/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["main~cashier_dist_cashier_js_cashier-store_js_77e8332f"],{

/***/ "../../cashier/dist/cashier/js/cashier-store.js":
/*!******************************************************!*\
  !*** ../../cashier/dist/cashier/js/cashier-store.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/lib/mobx.module.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_react__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Stores/Cashier/cashier-store.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ CashierStore)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: external \\\"mobx\\\"\\nvar external_mobx_ = __webpack_require__(\\\"mobx\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n;// CONCATENATED MODULE: ./Config/on-ramp-providers.js\\n\\n\\nvar createBanxaProvider = function createBanxaProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierBanxaDark',\\n      light: 'IcCashierBanxaLight'\\n    },\\n    name: 'Banxa',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('A fast and secure fiat-to-crypto payment service. Deposit cryptocurrencies from anywhere in the world using your credit/debit cards and bank transfers.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }, {\\n        dark: 'IcCashierBpayDark',\\n        light: 'IcCashierBpayLight'\\n      }, {\\n        dark: 'IcCashierSepaDark',\\n        light: 'IcCashierSepaLight'\\n      }, {\\n        dark: 'IcCashierBlueshyftDark',\\n        light: 'IcCashierBlueshyftLight'\\n      }, {\\n        dark: 'IcCashierFlexepinDark',\\n        light: 'IcCashierFlexepinLight'\\n      }, {\\n        dark: 'IcCashierPayIdDark',\\n        light: 'IcCashierPayIdLight'\\n      }, {\\n        dark: 'IcCashierPoliDark',\\n        light: 'IcCashierPoliLight'\\n      }, {\\n        dark: 'IcCashierApplePay',\\n        light: 'IcCashierApplePay'\\n      }, {\\n        dark: 'IcCashierInteracEtransfer',\\n        light: 'IcCashierInteracEtransfer'\\n      }, {\\n        dark: 'IcCashierIdeal',\\n        light: 'IcCashierIdeal'\\n      }, {\\n        dark: 'IcCashierPostBillPayDark',\\n        light: 'IcCashierPostBillPayLight'\\n      }, {\\n        dark: 'IcCashierSofort',\\n        light: 'IcCashierSofort'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    // None.\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return '';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['*'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['*'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve, reject) {\\n        store.WS.serviceToken({\\n          service_token: 1,\\n          service: 'banxa',\\n          referrer: window.location.href\\n        }).then(function (response) {\\n          if (response.error) {\\n            reject(response.error.message);\\n          } else {\\n            var url = response.service_token.banxa.url;\\n\\n            if (url) {\\n              window.open(url);\\n            } // Resolving empty will/should redirect user.\\n\\n\\n            resolve();\\n          }\\n        });\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\nvar createChangellyProvider = function createChangellyProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierChangellyDark',\\n      light: 'IcCashierChangellyLight'\\n    },\\n    name: 'Changelly',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Your simple access to crypto. Fast and secure way to exchange and purchase cryptocurrencies. 24/7 live chat support.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return 'usd';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['usd', 'eur', 'gbp'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['bch', 'btc', 'etc', 'eth', 'ltc', 'ust'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      var _this = this;\\n\\n      return new Promise(function (resolve) {\\n        var url = new URL('https://widget.changelly.com/?v=3&theme=default');\\n        url.searchParams.append('fromDefault', _this.getDefaultFromCurrency());\\n        var currency = store.root_store.client.currency.toLowerCase();\\n\\n        if (_this.getToCurrencies().includes(currency)) {\\n          var to_currency = currency === 'ust' ? 'usdt' : currency;\\n          url.searchParams.append('to', to_currency);\\n          url.searchParams.append('toDefault', to_currency);\\n        }\\n\\n        url.searchParams.append('amount', 1);\\n        url.searchParams.append('merchant_id', 'iiq3jdt2p44yrfbx');\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: true\\n  };\\n};\\n\\nvar createXanPoolProvider = function createXanPoolProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierXanpoolDark',\\n      light: 'IcCashierXanpoolLight'\\n    },\\n    name: 'XanPool',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Buy cryptocurrencies in an instant. Enjoy easy, quick, and secure exchanges using your local payment methods.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierFpsDark',\\n        light: 'IcCashierFpsLight'\\n      }, {\\n        dark: 'IcCashierAliPayDark',\\n        light: 'IcCashierAliPayLight'\\n      }, {\\n        dark: 'IcCashierGoPayDark',\\n        light: 'IcCashierGoPayLight'\\n      }, {\\n        dark: 'IcCashierMandiriPay',\\n        light: 'IcCashierMandiriPay'\\n      }, {\\n        dark: 'IcCashierInstaPayLight',\\n        light: 'IcCashierInstaPayDark'\\n      }, {\\n        dark: 'IcCashierCebuanaLhuillierDark',\\n        light: 'IcCashierCebuanaLhuillierLight'\\n      }, {\\n        dark: 'IcCashierPayNowDark',\\n        light: 'IcCashierPayNowLight'\\n      }, {\\n        dark: 'IcCashierUpiDark',\\n        light: 'IcCashierUpiLight'\\n      }, {\\n        dark: 'IcCashierPromptPayDark',\\n        light: 'IcCashierPromptPayLight'\\n      }, {\\n        dark: 'IcCashierViettlePay',\\n        light: 'IcCashierViettlePay'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['btc', 'eth', 'ust', 'zil', 'nem'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve) {\\n        var currency = store.root_store.client.currency;\\n        var url = 'https://checkout.xanpool.com/';\\n        url += \\\"?apiKey=db4ec638dff9a68abda1ef6b7638c220\\\";\\n        url += \\\"&redirectUrl=\\\".concat(window.location.href);\\n        url += \\\"&wallet=\\\".concat(store.deposit_address);\\n        url += \\\"&cryptoCurrency=\\\".concat(currency === 'UST' ? 'USDT' : currency);\\n        url += \\\"&transactionType=buy\\\";\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\n/* harmony default export */ const on_ramp_providers = ({\\n  createBanxaProvider: createBanxaProvider,\\n  createChangellyProvider: createChangellyProvider,\\n  createXanPoolProvider: createXanPoolProvider\\n});\\n;// CONCATENATED MODULE: ./_common/utility.js\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\nvar template = function template(string, content) {\\n  var to_replace = content;\\n\\n  if (content && !Array.isArray(content)) {\\n    to_replace = [content];\\n  }\\n\\n  return string.replace(/\\\\[_(\\\\d+)]/g, function (s, index) {\\n    return to_replace[+index - 1];\\n  });\\n};\\n/**\\n * Creates a DOM element and adds any attributes to it.\\n *\\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\\n * @return the created DOM element\\n */\\n\\n\\nvar createElement = function createElement(tag_name) {\\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n  var el = document.createElement(tag_name);\\n  Object.keys(attributes).forEach(function (attr) {\\n    var value = attributes[attr];\\n\\n    if (attr === 'text') {\\n      el.textContent = value;\\n    } else if (attr === 'html') {\\n      el.html(value);\\n    } else {\\n      el.setAttribute(attr, value);\\n    }\\n  });\\n  return el;\\n};\\n\\nvar static_hash;\\n\\nvar getStaticHash = function getStaticHash() {\\n  static_hash = static_hash || (document.querySelector('script[src*=\\\"main\\\"]').getAttribute('src') || '').split('.')[1];\\n  return static_hash;\\n};\\n\\nvar PromiseClass = function PromiseClass() {\\n  var _this = this;\\n\\n  _classCallCheck(this, PromiseClass);\\n\\n  this.promise = new Promise(function (resolve, reject) {\\n    _this.reject = reject;\\n    _this.resolve = resolve;\\n  });\\n};\\n\\nvar copyToClipboard = function copyToClipboard(text) {\\n  var textField = document.createElement('textarea');\\n  textField.innerText = text;\\n  document.body.appendChild(textField);\\n  textField.select();\\n  document.execCommand('copy');\\n  textField.remove();\\n}; // eu countries to support\\n\\n\\nvar eu_countries = (/* unused pure expression or super */ null && (['it', 'de', 'fr', 'lu', 'gr', 'mf', 'es', 'sk', 'lt', 'nl', 'at', 'bg', 'si', 'cy', 'be', 'ro', 'hr', 'pt', 'pl', 'lv', 'ee', 'cz', 'fi', 'hu', 'dk', 'se', 'ie', 'im', 'gb', 'mt'])); // check if client is from EU\\n\\nvar isEuCountry = function isEuCountry(country) {\\n  return eu_countries.includes(country);\\n}; // check if mlt or dxtrade for account text\\n\\n\\nvar getAccountText = function getAccountText(account) {\\n  var account_text = '';\\n\\n  if (account.is_dxtrade || account.is_mt) {\\n    account_text = account.text;\\n  } else {\\n    account_text = getCurrencyDisplayCode(account.text);\\n  }\\n\\n  return account_text;\\n};\\n\\n\\n;// CONCATENATED MODULE: ./Utils/Validator/errors.js\\nfunction errors_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nvar Errors = /*#__PURE__*/function () {\\n  function Errors() {\\n    errors_classCallCheck(this, Errors);\\n\\n    this.errors = {};\\n  }\\n\\n  _createClass(Errors, [{\\n    key: \\\"add\\\",\\n    value: function add(attribute, message) {\\n      if (!this.has(attribute)) {\\n        this.errors[attribute] = [];\\n      }\\n\\n      if (this.errors[attribute].indexOf(message) === -1) {\\n        this.errors[attribute].push(message);\\n      }\\n    }\\n  }, {\\n    key: \\\"all\\\",\\n    value: function all() {\\n      return this.errors;\\n    }\\n  }, {\\n    key: \\\"first\\\",\\n    value: function first(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute][0];\\n      }\\n\\n      return null;\\n    }\\n  }, {\\n    key: \\\"get\\\",\\n    value: function get(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute];\\n      }\\n\\n      return [];\\n    }\\n  }, {\\n    key: \\\"has\\\",\\n    value: function has(attribute) {\\n      return Object.prototype.hasOwnProperty.call(this.errors, attribute);\\n    }\\n  }]);\\n\\n  return Errors;\\n}();\\n\\n/* harmony default export */ const errors = (Errors);\\n;// CONCATENATED MODULE: ./Utils/Validator/validator.js\\nfunction validator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction validator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction validator_createClass(Constructor, protoProps, staticProps) { if (protoProps) validator_defineProperties(Constructor.prototype, protoProps); if (staticProps) validator_defineProperties(Constructor, staticProps); return Constructor; }\\n\\n\\n\\n\\n\\nvar Validator = /*#__PURE__*/function () {\\n  function Validator(input, rules) {\\n    var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n\\n    validator_classCallCheck(this, Validator);\\n\\n    this.input = input;\\n    this.rules = rules;\\n    this.store = store;\\n    this.errors = new errors();\\n    this.error_count = 0;\\n  }\\n  /**\\n   * Add failure and error message for given rule\\n   *\\n   * @param {string} attribute\\n   * @param {object} rule\\n   */\\n\\n\\n  validator_createClass(Validator, [{\\n    key: \\\"addFailure\\\",\\n    value: function addFailure(attribute, rule, error_message) {\\n      var message = error_message || rule.options.message || (0,shared_.getPreBuildDVRs)()[rule.name].message();\\n\\n      if (rule.name === 'length') {\\n        message = template(message, [rule.options.min === rule.options.max ? rule.options.min : \\\"\\\".concat(rule.options.min, \\\"-\\\").concat(rule.options.max)]);\\n      } else if (rule.name === 'min') {\\n        message = template(message, [rule.options.min]);\\n      } else if (rule.name === 'not_equal') {\\n        message = template(message, [rule.options.name1, rule.options.name2]);\\n      }\\n\\n      this.errors.add(attribute, message);\\n      this.error_count++;\\n    }\\n    /**\\n     * Runs validator\\n     *\\n     * @return {boolean} Whether it passes; true = passes, false = fails\\n     */\\n\\n  }, {\\n    key: \\\"check\\\",\\n    value: function check() {\\n      var _this = this;\\n\\n      Object.keys(this.input).forEach(function (attribute) {\\n        if (!Object.prototype.hasOwnProperty.call(_this.rules, attribute)) {\\n          return;\\n        }\\n\\n        _this.rules[attribute].forEach(function (rule) {\\n          var ruleObject = Validator.getRuleObject(rule);\\n\\n          if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\\n            return;\\n          }\\n\\n          if (ruleObject.options.condition && !ruleObject.options.condition(_this.store)) {\\n            return;\\n          }\\n\\n          if (_this.input[attribute] === '' && ruleObject.name !== 'req') {\\n            return;\\n          }\\n\\n          var is_valid, error_message;\\n\\n          if (ruleObject.name === 'number') {\\n            var _ruleObject$validator = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input),\\n                is_ok = _ruleObject$validator.is_ok,\\n                message = _ruleObject$validator.message;\\n\\n            is_valid = is_ok;\\n            error_message = message;\\n          } else {\\n            is_valid = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input);\\n          }\\n\\n          if (!is_valid) {\\n            _this.addFailure(attribute, ruleObject, error_message);\\n          }\\n        });\\n      });\\n      return !this.error_count;\\n    }\\n    /**\\n     * Determine if validation passes\\n     *\\n     * @return {boolean}\\n     */\\n\\n  }, {\\n    key: \\\"isPassed\\\",\\n    value: function isPassed() {\\n      return this.check();\\n    }\\n    /**\\n     * Converts the rule array to an object\\n     *\\n     * @param {array} rule\\n     * @return {object}\\n     */\\n\\n  }], [{\\n    key: \\\"getRuleObject\\\",\\n    value: function getRuleObject(rule) {\\n      var is_rule_string = typeof rule === 'string';\\n      var rule_object = {\\n        name: is_rule_string ? rule : rule[0],\\n        options: is_rule_string ? {} : rule[1] || {}\\n      };\\n      rule_object.validator = rule_object.name === 'custom' ? rule[1].func : (0,shared_.getPreBuildDVRs)()[rule_object.name].func;\\n      return rule_object;\\n    }\\n  }]);\\n\\n  return Validator;\\n}();\\n\\n/* harmony default export */ const Validator_validator = (Validator);\\n;// CONCATENATED MODULE: ./Utils/Validator/index.js\\n\\n\\n;// CONCATENATED MODULE: ./Stores/base-store.js\\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _descriptor, _descriptor2, _descriptor3, _class2, _temp;\\n\\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction base_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction base_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction base_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n/**\\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\\n *  1. Creating snapshot object from the store.\\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\\n */\\n\\nvar BaseStore = (_dec = external_mobx_.action.bound, _dec2 = external_mobx_.action.bound, _dec3 = external_mobx_.action.bound, _dec4 = external_mobx_.action.bound, _dec5 = external_mobx_.action.bound, _dec6 = external_mobx_.action.bound, _dec7 = external_mobx_.action.bound, _dec8 = external_mobx_.action.bound, _dec9 = external_mobx_.action.bound, _dec10 = external_mobx_.action.bound, _dec11 = external_mobx_.action.bound, _dec12 = external_mobx_.action.bound, _dec13 = external_mobx_.action.bound, _dec14 = external_mobx_.action.bound, _dec15 = external_mobx_.action.bound, _dec16 = external_mobx_.action.bound, (_class = (_temp = _class2 = /*#__PURE__*/function () {\\n  /**\\n   * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\\n   */\\n\\n  /**\\n   * Constructor of the base class that gets properties' name of child which should be saved in storages\\n   *\\n   * @param {Object} options - An object that contains the following properties:\\n   *     @property {Object}   root_store - An object that contains the root store of the app.\\n   *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\\n   *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\\n   *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\\n   *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\\n   */\\n  function BaseStore() {\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    base_store_classCallCheck(this, BaseStore);\\n\\n    _initializerDefineProperty(this, \\\"validation_errors\\\", _descriptor, this);\\n\\n    _initializerDefineProperty(this, \\\"validation_rules\\\", _descriptor2, this);\\n\\n    this.preSwitchAccountDisposer = null;\\n    this.pre_switch_account_listener = null;\\n    this.switchAccountDisposer = null;\\n    this.switch_account_listener = null;\\n    this.logoutDisposer = null;\\n    this.logout_listener = null;\\n    this.clientInitDisposer = null;\\n    this.client_init_listener = null;\\n    this.networkStatusChangeDisposer = null;\\n    this.network_status_change_listener = null;\\n    this.themeChangeDisposer = null;\\n    this.theme_change_listener = null;\\n    this.realAccountSignupEndedDisposer = null;\\n    this.real_account_signup_ended_listener = null;\\n\\n    _initializerDefineProperty(this, \\\"partial_fetch_time\\\", _descriptor3, this);\\n\\n    var root_store = options.root_store,\\n        local_storage_properties = options.local_storage_properties,\\n        session_storage_properties = options.session_storage_properties,\\n        validation_rules = options.validation_rules,\\n        store_name = options.store_name;\\n    Object.defineProperty(this, 'root_store', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'local_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'session_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    var has_local_or_session_storage = local_storage_properties && local_storage_properties.length || session_storage_properties && session_storage_properties.length;\\n\\n    if (has_local_or_session_storage) {\\n      if (!store_name) {\\n        throw new Error('store_name is required for local/session storage');\\n      }\\n\\n      Object.defineProperty(this, 'store_name', {\\n        value: store_name,\\n        enumerable: false,\\n        writable: false\\n      });\\n    }\\n\\n    this.root_store = root_store;\\n    this.local_storage_properties = local_storage_properties || [];\\n    this.session_storage_properties = session_storage_properties || [];\\n    this.setValidationRules(validation_rules);\\n    this.setupReactionForLocalStorage();\\n    this.setupReactionForSessionStorage();\\n    this.retrieveFromStorage();\\n  }\\n  /**\\n   * Returns an snapshot of the current store\\n   *\\n   * @param {String[]} properties - A list of properties' names that should be in the snapshot.\\n   *\\n   * @return {Object} Returns a cloned object of the store.\\n   */\\n\\n\\n  base_store_createClass(BaseStore, [{\\n    key: \\\"getSnapshot\\\",\\n    value: function getSnapshot(properties) {\\n      var snapshot = (0,external_mobx_.toJS)(this);\\n\\n      if (!(0,shared_.isEmptyObject)(this.root_store)) {\\n        snapshot.root_store = this.root_store;\\n      }\\n\\n      if (properties && properties.length) {\\n        snapshot = properties.reduce(function (result, p) {\\n          return Object.assign(result, _defineProperty({}, p, snapshot[p]));\\n        }, {});\\n      }\\n\\n      return snapshot;\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForLocalStorage\\\",\\n    value: function setupReactionForLocalStorage() {\\n      var _this = this;\\n\\n      if (this.local_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this.local_storage_properties.map(function (i) {\\n            return _this[i];\\n          });\\n        }, function () {\\n          return _this.saveToStorage(_this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForSessionStorage\\\",\\n    value: function setupReactionForSessionStorage() {\\n      var _this2 = this;\\n\\n      if (this.session_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this2.session_storage_properties.map(function (i) {\\n            return _this2[i];\\n          });\\n        }, function () {\\n          return _this2.saveToStorage(_this2.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\\n     *\\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"saveToStorage\\\",\\n    value: function saveToStorage(properties, storage) {\\n      var snapshot = JSON.stringify(this.getSnapshot(properties), function (key, value) {\\n        if (value !== null) return value;\\n        return undefined;\\n      });\\n\\n      if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\\n        localStorage.setItem(this.store_name, snapshot);\\n      } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\\n        sessionStorage.setItem(this.store_name, snapshot);\\n      }\\n    }\\n    /**\\n     * Retrieves saved snapshot of the store and assigns to the current instance.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"retrieveFromStorage\\\",\\n    value: function retrieveFromStorage() {\\n      var _this3 = this;\\n\\n      var local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\\n      var session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\\n\\n      var snapshot = _objectSpread(_objectSpread({}, local_storage_snapshot), session_storage_snapshot);\\n\\n      Object.keys(snapshot).forEach(function (k) {\\n        return _this3[k] = snapshot[k];\\n      });\\n    }\\n    /**\\n     * Sets validation error messages for an observable property of the store\\n     *\\n     * @param {String} propertyName - The observable property's name\\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationErrorMessages\\\",\\n    value: function setValidationErrorMessages(propertyName, messages) {\\n      var _this4 = this;\\n\\n      var is_different = function is_different() {\\n        return !!_this4.validation_errors[propertyName].filter(function (x) {\\n          return !messages.includes(x);\\n        }).concat(messages.filter(function (x) {\\n          return !_this4.validation_errors[propertyName].includes(x);\\n        })).length;\\n      };\\n\\n      if (!this.validation_errors[propertyName] || is_different()) {\\n        this.validation_errors[propertyName] = messages;\\n      }\\n    }\\n    /**\\n     * Sets validation rules\\n     *\\n     * @param {object} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationRules\\\",\\n    value: function setValidationRules() {\\n      var _this5 = this;\\n\\n      var rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      Object.keys(rules).forEach(function (key) {\\n        _this5.addRule(key, rules[key]);\\n      });\\n    }\\n    /**\\n     * Adds rules to the particular property\\n     *\\n     * @param {String} property\\n     * @param {String} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"addRule\\\",\\n    value: function addRule(property, rules) {\\n      var _this6 = this;\\n\\n      this.validation_rules[property] = rules;\\n      (0,external_mobx_.intercept)(this, property, function (change) {\\n        _this6.validateProperty(property, change.newValue);\\n\\n        return change;\\n      });\\n    }\\n    /**\\n     * Validates a particular property of the store\\n     *\\n     * @param {String} property - The name of the property in the store\\n     * @param {object} value    - The value of the property, it can be undefined.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateProperty\\\",\\n    value: function validateProperty(property, value) {\\n      var _this7 = this;\\n\\n      var trigger = this.validation_rules[property].trigger;\\n\\n      var inputs = _defineProperty({}, property, value !== undefined ? value : this[property]);\\n\\n      var validation_rules = _defineProperty({}, property, this.validation_rules[property].rules || []);\\n\\n      if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\\n        inputs[trigger] = this[trigger];\\n        validation_rules[trigger] = this.validation_rules[trigger].rules || [];\\n      }\\n\\n      var validator = new Validator_validator(inputs, validation_rules, this);\\n      validator.isPassed();\\n      Object.keys(inputs).forEach(function (key) {\\n        _this7.setValidationErrorMessages(key, validator.errors.get(key));\\n      });\\n    }\\n    /**\\n     * Validates all properties which validation rule has been set for.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateAllProperties\\\",\\n    value: function validateAllProperties() {\\n      var _this8 = this;\\n\\n      var validation_rules = Object.keys(this.validation_rules);\\n      var validation_errors = Object.keys(this.validation_errors);\\n      validation_rules.forEach(function (p) {\\n        _this8.validateProperty(p, _this8[p]);\\n      }); // Remove keys that are present in error, but not in rules:\\n\\n      validation_errors.forEach(function (error) {\\n        if (!validation_rules.includes(error)) {\\n          delete _this8.validation_errors[error];\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onSwitchAccount\\\",\\n    value: function onSwitchAccount(listener) {\\n      var _this9 = this;\\n\\n      if (listener) {\\n        this.switch_account_listener = listener;\\n        this.switchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this9.root_store.client.switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this9.switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this9.root_store.client.switchEndSignal();\\n\\n                _this9.onSwitchAccount(_this9.switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Switching account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onPreSwitchAccount\\\",\\n    value: function onPreSwitchAccount(listener) {\\n      var _this10 = this;\\n\\n      if (listener) {\\n        this.pre_switch_account_listener = listener;\\n        this.preSwitchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this10.root_store.client.pre_switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this10.pre_switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this10.root_store.client.setPreSwitchAccount(false);\\n\\n                _this10.onPreSwitchAccount(_this10.pre_switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Pre-switch account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onLogout\\\",\\n    value: function onLogout(listener) {\\n      var _this11 = this;\\n\\n      this.logoutDisposer = (0,external_mobx_.when)(function () {\\n        return _this11.root_store.client.has_logged_out;\\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.prev = 0;\\n                result = _this11.logout_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this11.root_store.client.setLogout(false);\\n\\n                  _this11.onLogout(_this11.logout_listener);\\n                });\\n                _context.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Logout listeners are required to return a promise.');\\n\\n              case 7:\\n                _context.next = 12;\\n                break;\\n\\n              case 9:\\n                _context.prev = 9;\\n                _context.t0 = _context[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, null, [[0, 9]]);\\n      })));\\n      this.logout_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onClientInit\\\",\\n    value: function onClientInit(listener) {\\n      var _this12 = this;\\n\\n      this.clientInitDisposer = (0,external_mobx_.when)(function () {\\n        return _this12.root_store.client.initialized_broadcast;\\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.prev = 0;\\n                result = _this12.client_init_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context2.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this12.root_store.client.setInitialized(false);\\n\\n                  _this12.onClientInit(_this12.client_init_listener);\\n                });\\n                _context2.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Client init listeners are required to return a promise.');\\n\\n              case 7:\\n                _context2.next = 12;\\n                break;\\n\\n              case 9:\\n                _context2.prev = 9;\\n                _context2.t0 = _context2[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context2.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, null, [[0, 9]]);\\n      })));\\n      this.client_init_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onNetworkStatusChange\\\",\\n    value: function onNetworkStatusChange(listener) {\\n      var _this13 = this;\\n\\n      this.networkStatusChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this13.root_store.common.is_network_online;\\n      }, function (is_online) {\\n        try {\\n          _this13.network_status_change_listener(is_online);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.network_status_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onThemeChange\\\",\\n    value: function onThemeChange(listener) {\\n      var _this14 = this;\\n\\n      this.themeChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this14.root_store.ui.is_dark_mode_on;\\n      }, function (is_dark_mode_on) {\\n        try {\\n          _this14.theme_change_listener(is_dark_mode_on);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.theme_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onRealAccountSignupEnd\\\",\\n    value: function onRealAccountSignupEnd(listener) {\\n      var _this15 = this;\\n\\n      this.realAccountSignupEndedDisposer = (0,external_mobx_.when)(function () {\\n        return _this15.root_store.ui.has_real_account_signup_ended;\\n      }, function () {\\n        try {\\n          var result = _this15.real_account_signup_ended_listener();\\n\\n          if (result && result.then && typeof result.then === 'function') {\\n            result.then(function () {\\n              _this15.root_store.ui.setRealAccountSignupEnd(false);\\n\\n              _this15.onRealAccountSignupEnd(_this15.real_account_signup_ended_listener);\\n            });\\n          } else {\\n            throw new Error('Real account signup listeners are required to return a promise.');\\n          }\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.real_account_signup_ended_listener = listener;\\n    }\\n  }, {\\n    key: \\\"disposePreSwitchAccount\\\",\\n    value: function disposePreSwitchAccount() {\\n      if (typeof this.preSwitchAccountDisposer === 'function') {\\n        this.preSwitchAccountDisposer();\\n      }\\n\\n      this.pre_switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeSwitchAccount\\\",\\n    value: function disposeSwitchAccount() {\\n      if (typeof this.switchAccountDisposer === 'function') {\\n        this.switchAccountDisposer();\\n      }\\n\\n      this.switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeLogout\\\",\\n    value: function disposeLogout() {\\n      if (typeof this.logoutDisposer === 'function') {\\n        this.logoutDisposer();\\n      }\\n\\n      this.logout_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeClientInit\\\",\\n    value: function disposeClientInit() {\\n      if (typeof this.clientInitDisposer === 'function') {\\n        this.clientInitDisposer();\\n      }\\n\\n      this.client_init_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeNetworkStatusChange\\\",\\n    value: function disposeNetworkStatusChange() {\\n      if (typeof this.networkStatusChangeDisposer === 'function') {\\n        this.networkStatusChangeDisposer();\\n      }\\n\\n      this.network_status_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeThemeChange\\\",\\n    value: function disposeThemeChange() {\\n      if (typeof this.themeChangeDisposer === 'function') {\\n        this.themeChangeDisposer();\\n      }\\n\\n      this.theme_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeRealAccountSignupEnd\\\",\\n    value: function disposeRealAccountSignupEnd() {\\n      if (typeof this.realAccountSignupEndedDisposer === 'function') {\\n        this.realAccountSignupEndedDisposer();\\n      }\\n\\n      this.real_account_signup_ended_listener = null;\\n    }\\n  }, {\\n    key: \\\"onUnmount\\\",\\n    value: function onUnmount() {\\n      this.disposePreSwitchAccount();\\n      this.disposeSwitchAccount();\\n      this.disposeLogout();\\n      this.disposeClientInit();\\n      this.disposeNetworkStatusChange();\\n      this.disposeThemeChange();\\n      this.disposeRealAccountSignupEnd();\\n    }\\n  }, {\\n    key: \\\"assertHasValidCache\\\",\\n    value: function assertHasValidCache(loginid) {\\n      // account was changed when this was unmounted.\\n      if (this.root_store.client.loginid !== loginid) {\\n        for (var _len = arguments.length, reactions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n          reactions[_key - 1] = arguments[_key];\\n        }\\n\\n        reactions.forEach(function (act) {\\n          return act();\\n        });\\n        this.partial_fetch_time = false;\\n      }\\n    }\\n  }]);\\n\\n  return BaseStore;\\n}(), _class2.STORAGES = Object.freeze({\\n  LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\\n  SESSION_STORAGE: Symbol('SESSION_STORAGE')\\n}), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \\\"validation_errors\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \\\"validation_rules\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \\\"partial_fetch_time\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _applyDecoratedDescriptor(_class.prototype, \\\"retrieveFromStorage\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"retrieveFromStorage\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"setValidationErrorMessages\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"setValidationErrorMessages\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"setValidationRules\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"setValidationRules\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"addRule\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"addRule\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"validateProperty\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"validateProperty\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"validateAllProperties\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"validateAllProperties\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onSwitchAccount\\\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onPreSwitchAccount\\\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onPreSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onLogout\\\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onLogout\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onClientInit\\\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onClientInit\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onNetworkStatusChange\\\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onNetworkStatusChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onThemeChange\\\", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onThemeChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onRealAccountSignupEnd\\\", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onRealAccountSignupEnd\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposePreSwitchAccount\\\", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposePreSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeSwitchAccount\\\", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeLogout\\\", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeLogout\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeClientInit\\\", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeClientInit\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeNetworkStatusChange\\\", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeNetworkStatusChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeThemeChange\\\", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeThemeChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeRealAccountSignupEnd\\\", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeRealAccountSignupEnd\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onUnmount\\\", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onUnmount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"assertHasValidCache\\\", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, \\\"assertHasValidCache\\\"), _class.prototype)), _class));\\n\\n;// CONCATENATED MODULE: ./Stores/Cashier/on-ramp-store.js\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nvar on_ramp_store_dec, on_ramp_store_dec2, on_ramp_store_dec3, on_ramp_store_dec4, on_ramp_store_dec5, on_ramp_store_dec6, on_ramp_store_dec7, on_ramp_store_dec8, on_ramp_store_dec9, on_ramp_store_dec10, on_ramp_store_dec11, on_ramp_store_dec12, on_ramp_store_dec13, on_ramp_store_dec14, on_ramp_store_dec15, on_ramp_store_dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, on_ramp_store_class, on_ramp_store_descriptor, on_ramp_store_descriptor2, on_ramp_store_descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;\\n\\nfunction on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction on_ramp_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction on_ramp_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction on_ramp_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction on_ramp_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction on_ramp_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) on_ramp_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) on_ramp_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction on_ramp_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction on_ramp_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\nvar OnRampStore = (on_ramp_store_dec = external_mobx_.observable.shallow, on_ramp_store_dec2 = external_mobx_.observable.ref, on_ramp_store_dec3 = external_mobx_.action.bound, on_ramp_store_dec4 = external_mobx_.action.bound, on_ramp_store_dec5 = external_mobx_.action.bound, on_ramp_store_dec6 = external_mobx_.action.bound, on_ramp_store_dec7 = external_mobx_.action.bound, on_ramp_store_dec8 = external_mobx_.action.bound, on_ramp_store_dec9 = external_mobx_.action.bound, on_ramp_store_dec10 = external_mobx_.action.bound, on_ramp_store_dec11 = external_mobx_.action.bound, on_ramp_store_dec12 = external_mobx_.action.bound, on_ramp_store_dec13 = external_mobx_.action.bound, on_ramp_store_dec14 = external_mobx_.action.bound, on_ramp_store_dec15 = external_mobx_.action.bound, on_ramp_store_dec16 = external_mobx_.action.bound, _dec17 = external_mobx_.action.bound, _dec18 = external_mobx_.action.bound, _dec19 = external_mobx_.action.bound, _dec20 = external_mobx_.action.bound, _dec21 = external_mobx_.action.bound, _dec22 = external_mobx_.action.bound, (on_ramp_store_class = /*#__PURE__*/function (_BaseStore) {\\n  _inherits(OnRampStore, _BaseStore);\\n\\n  var _super = _createSuper(OnRampStore);\\n\\n  function OnRampStore(_ref) {\\n    var _this;\\n\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    on_ramp_store_classCallCheck(this, OnRampStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"api_error\\\", on_ramp_store_descriptor, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"deposit_address\\\", on_ramp_store_descriptor2, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_loading\\\", on_ramp_store_descriptor3, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_popover_open\\\", _descriptor4, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_onramp_modal_open\\\", _descriptor5, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_requesting_widget_html\\\", _descriptor6, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"onramp_providers\\\", _descriptor7, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"selected_provider\\\", _descriptor8, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"should_show_widget\\\", _descriptor9, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_error\\\", _descriptor10, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_html\\\", _descriptor11, _assertThisInitialized(_this));\\n\\n    _this.deposit_address_ref = null;\\n    _this.WS = WS;\\n\\n    _this.onClientInit( /*#__PURE__*/on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n      return regeneratorRuntime.wrap(function _callee$(_context) {\\n        while (1) {\\n          switch (_context.prev = _context.next) {\\n            case 0:\\n              _this.setOnrampProviders([on_ramp_providers.createChangellyProvider(_assertThisInitialized(_this)), on_ramp_providers.createXanPoolProvider(_assertThisInitialized(_this)), on_ramp_providers.createBanxaProvider(_assertThisInitialized(_this))]);\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context.stop();\\n          }\\n        }\\n      }, _callee);\\n    })));\\n\\n    return _this;\\n  }\\n\\n  on_ramp_store_createClass(OnRampStore, [{\\n    key: \\\"is_onramp_tab_visible\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return client.is_virtual === false && (0,shared_.isCryptocurrency)(client.currency) && this.filtered_onramp_providers.length > 0;\\n    }\\n  }, {\\n    key: \\\"filtered_onramp_providers\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return this.onramp_providers // Ensure provider supports this user's account currency.\\n      .filter(function (provider) {\\n        var to_currencies = provider.getToCurrencies();\\n        return to_currencies.includes('*') || to_currencies.includes(client.currency.toLowerCase());\\n      }) // Ensure provider supports this user's residency.\\n      .filter(function (provider) {\\n        var allowed_residencies = provider.getAllowedResidencies();\\n        return allowed_residencies.includes('*') || allowed_residencies.includes(client.residence);\\n      });\\n    }\\n  }, {\\n    key: \\\"onramp_popup_modal_title\\\",\\n    get: function get() {\\n      if (this.should_show_widget) {\\n        return (0,translations_.localize)('Payment channel');\\n      } else if (this.selected_provider) {\\n        if (this.should_show_dialog) {\\n          return (0,translations_.localize)('Our server cannot retrieve an address.');\\n        }\\n\\n        return ' '; // Empty string to render header + close icon.\\n      }\\n\\n      return undefined;\\n    }\\n  }, {\\n    key: \\\"should_show_dialog\\\",\\n    get: function get() {\\n      return this.api_error;\\n    }\\n  }, {\\n    key: \\\"onMountOnramp\\\",\\n    value: function onMountOnramp() {\\n      var _this2 = this;\\n\\n      this.disposeThirdPartyJsReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.selected_provider;\\n      }, /*#__PURE__*/function () {\\n        var _ref3 = on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(provider) {\\n          var dependencies, _yield$import, loadjs, script_name;\\n\\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n            while (1) {\\n              switch (_context2.prev = _context2.next) {\\n                case 0:\\n                  if (provider) {\\n                    _context2.next = 2;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 2:\\n                  dependencies = provider.getScriptDependencies();\\n\\n                  if (!(dependencies.length === 0)) {\\n                    _context2.next = 5;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 5:\\n                  _context2.next = 7;\\n                  return __webpack_require__.e(/* import() | loadjs */ \\\"loadjs\\\").then(__webpack_require__.t.bind(__webpack_require__, \\\"../../../node_modules/loadjs/dist/loadjs.umd.js\\\", 23));\\n\\n                case 7:\\n                  _yield$import = _context2.sent;\\n                  loadjs = _yield$import[\\\"default\\\"];\\n                  script_name = \\\"\\\".concat((0,shared_.getKebabCase)(provider.name), \\\"-onramp\\\");\\n\\n                  if (!loadjs.isDefined(script_name)) {\\n                    loadjs(dependencies, script_name, {\\n                      error: function error() {\\n                        // eslint-disable-next-line no-console\\n                        console.warn(\\\"Dependencies for onramp provider \\\".concat(provider.name, \\\" could not be loaded.\\\"));\\n\\n                        _this2.setSelectedProvider(null);\\n                      }\\n                    });\\n                  }\\n\\n                case 11:\\n                case \\\"end\\\":\\n                  return _context2.stop();\\n              }\\n            }\\n          }, _callee2);\\n        }));\\n\\n        return function (_x) {\\n          return _ref3.apply(this, arguments);\\n        };\\n      }()); // When \\\"should_show_widget\\\", attempt to fetch \\\"selected_provider\\\"'s \\\"widget_html\\\".\\n\\n      this.disposeGetWidgetHtmlReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.should_show_widget;\\n      }, function (should_show_widget) {\\n        if (should_show_widget) {\\n          if (_this2.is_requesting_widget_html) {\\n            return;\\n          }\\n\\n          _this2.setIsRequestingWidgetHtml(true);\\n\\n          _this2.selected_provider.getWidgetHtml().then(function (widget_html) {\\n            if (widget_html) {\\n              // Regular providers (iframe/JS embed)\\n              _this2.setWidgetHtml(widget_html);\\n            } else {\\n              // An empty resolve (widget_html) identifies a redirect.\\n              _this2.setShouldShowWidget(false);\\n            }\\n          })[\\\"catch\\\"](function (error) {\\n            _this2.setWidgetError(error);\\n          })[\\\"finally\\\"](function () {\\n            return _this2.setIsRequestingWidgetHtml(false);\\n          });\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onUnmountOnramp\\\",\\n    value: function onUnmountOnramp() {\\n      if (typeof this.disposeThirdPartyJsReaction === 'function') {\\n        this.disposeThirdPartyJsReaction();\\n      }\\n\\n      if (typeof this.disposeGetWidgetHtmlReaction === 'function') {\\n        this.disposeGetWidgetHtmlReaction();\\n      }\\n    }\\n  }, {\\n    key: \\\"onClickCopyDepositAddress\\\",\\n    value: function onClickCopyDepositAddress() {\\n      var _this3 = this;\\n\\n      var range = document.createRange();\\n      range.selectNodeContents(this.deposit_address_ref);\\n      var selections = window.getSelection();\\n      selections.removeAllRanges();\\n      selections.addRange(range);\\n      navigator.clipboard.writeText(this.deposit_address).then(function () {\\n        _this3.setIsDepositAddressPopoverOpen(true);\\n\\n        setTimeout(function () {\\n          return _this3.setIsDepositAddressPopoverOpen(false);\\n        }, 500);\\n      });\\n    }\\n  }, {\\n    key: \\\"onClickDisclaimerContinue\\\",\\n    value: function onClickDisclaimerContinue() {\\n      this.setShouldShowWidget(true);\\n    }\\n  }, {\\n    key: \\\"onClickGoToDepositPage\\\",\\n    value: function onClickGoToDepositPage() {\\n      this.pollApiForDepositAddress(false);\\n      window.open((0,shared_.websiteUrl)() + shared_.routes.cashier_deposit.substring(1));\\n    }\\n  }, {\\n    key: \\\"pollApiForDepositAddress\\\",\\n    value: function pollApiForDepositAddress(should_allow_empty_address) {\\n      var _this4 = this;\\n\\n      // should_allow_empty_address: API returns empty deposit address for legacy accounts\\n      // that have never generated a deposit address. Setting this to \\\"true\\\" will allow\\n      // the user to be redirected to the Deposit page (where an address will be generated).\\n      // Setting this to \\\"false\\\" will start polling the API for this deposit address.\\n      this.setIsDepositAddressLoading(true);\\n      this.setApiError(null);\\n      var deposit_address_interval = setInterval(function () {\\n        return getDepositAddressFromApi;\\n      }, 3000);\\n\\n      var getDepositAddressFromApi = function getDepositAddressFromApi() {\\n        _this4.root_store.modules.cashier.WS.authorized.cashier('deposit', {\\n          provider: 'crypto',\\n          type: 'api'\\n        }).then(function (response) {\\n          var should_clear_interval = false;\\n\\n          if (response.error) {\\n            _this4.setApiError(response.error);\\n\\n            should_clear_interval = true;\\n          } else {\\n            var address = response.cashier.deposit.address;\\n\\n            if (address || should_allow_empty_address) {\\n              _this4.setDepositAddress(address);\\n\\n              should_clear_interval = true;\\n            }\\n          }\\n\\n          if (should_clear_interval) {\\n            clearInterval(deposit_address_interval);\\n\\n            _this4.setIsDepositAddressLoading(false);\\n          }\\n        });\\n      };\\n\\n      getDepositAddressFromApi();\\n      setTimeout(function () {\\n        clearInterval(deposit_address_interval);\\n\\n        _this4.setIsDepositAddressLoading(false);\\n      }, 30000);\\n    }\\n  }, {\\n    key: \\\"resetPopup\\\",\\n    value: function resetPopup() {\\n      this.setApiError(null);\\n      this.setDepositAddress(null);\\n      this.setDepositAddressRef(null);\\n      this.setIsDepositAddressLoading(true);\\n      this.setSelectedProvider(null);\\n      this.setShouldShowWidget(false);\\n      this.setWidgetError(null);\\n      this.setWidgetHtml(null);\\n    }\\n  }, {\\n    key: \\\"setApiError\\\",\\n    value: function setApiError(api_error) {\\n      this.api_error = api_error;\\n    }\\n  }, {\\n    key: \\\"setCopyIconRef\\\",\\n    value: function setCopyIconRef(ref) {\\n      this.copy_icon_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setDepositAddress\\\",\\n    value: function setDepositAddress(deposit_address) {\\n      this.deposit_address = deposit_address;\\n    }\\n  }, {\\n    key: \\\"setDepositAddressRef\\\",\\n    value: function setDepositAddressRef(ref) {\\n      this.deposit_address_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressLoading\\\",\\n    value: function setIsDepositAddressLoading(is_loading) {\\n      this.is_deposit_address_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressPopoverOpen\\\",\\n    value: function setIsDepositAddressPopoverOpen(is_open) {\\n      this.is_deposit_address_popover_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsOnRampModalOpen\\\",\\n    value: function setIsOnRampModalOpen(is_open) {\\n      this.is_onramp_modal_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsRequestingWidgetHtml\\\",\\n    value: function setIsRequestingWidgetHtml(is_requesting_widget_html) {\\n      this.is_requesting_widget_html = is_requesting_widget_html;\\n    }\\n  }, {\\n    key: \\\"setSelectedProvider\\\",\\n    value: function setSelectedProvider(provider) {\\n      if (provider) {\\n        this.selected_provider = provider;\\n        this.setIsOnRampModalOpen(true);\\n        this.pollApiForDepositAddress(true);\\n      } else {\\n        this.setIsOnRampModalOpen(false);\\n        this.selected_provider = null;\\n      }\\n    }\\n  }, {\\n    key: \\\"setShouldShowWidget\\\",\\n    value: function setShouldShowWidget(should_show) {\\n      this.should_show_widget = should_show;\\n    }\\n  }, {\\n    key: \\\"setOnrampProviders\\\",\\n    value: function setOnrampProviders(onramp_providers) {\\n      this.onramp_providers = onramp_providers.slice();\\n    }\\n  }, {\\n    key: \\\"setWidgetError\\\",\\n    value: function setWidgetError(widget_error) {\\n      this.widget_error = widget_error;\\n    }\\n  }, {\\n    key: \\\"setWidgetHtml\\\",\\n    value: function setWidgetHtml(widget_html) {\\n      this.widget_html = widget_html;\\n    }\\n  }]);\\n\\n  return OnRampStore;\\n}(BaseStore), (on_ramp_store_descriptor = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"api_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor2 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"deposit_address\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor3 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), _descriptor4 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_popover_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor5 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_modal_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor6 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_requesting_widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor7 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_providers\\\", [on_ramp_store_dec], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor8 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"selected_provider\\\", [on_ramp_store_dec2], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor9 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_widget\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor10 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor11 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\", [on_ramp_store_dec3], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\", [on_ramp_store_dec4], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\", [on_ramp_store_dec5], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\", [on_ramp_store_dec6], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\", [on_ramp_store_dec7], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\", [on_ramp_store_dec8], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\", [on_ramp_store_dec9], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\", [on_ramp_store_dec10], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\", [on_ramp_store_dec11], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\", [on_ramp_store_dec12], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\", [on_ramp_store_dec13], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\", [on_ramp_store_dec14], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\", [on_ramp_store_dec15], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\", [on_ramp_store_dec16], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\", [_dec17], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\", [_dec18], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\", [_dec19], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\", [_dec20], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\", [_dec21], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\", [_dec22], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\"), on_ramp_store_class.prototype)), on_ramp_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/Cashier/transaction-history-store.js\\nvar transaction_history_store_dec, transaction_history_store_dec2, transaction_history_store_dec3, transaction_history_store_dec4, transaction_history_store_dec5, transaction_history_store_dec6, transaction_history_store_dec7, transaction_history_store_dec8, transaction_history_store_dec9, transaction_history_store_dec10, transaction_history_store_dec11, transaction_history_store_dec12, transaction_history_store_dec13, transaction_history_store_dec14, transaction_history_store_dec15, transaction_history_store_dec16, transaction_history_store_dec17, transaction_history_store_dec18, transaction_history_store_class, transaction_history_store_descriptor, transaction_history_store_descriptor2, transaction_history_store_descriptor3, transaction_history_store_descriptor4, transaction_history_store_descriptor5, transaction_history_store_descriptor6, transaction_history_store_descriptor7, transaction_history_store_descriptor8;\\n\\nfunction transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction transaction_history_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction transaction_history_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction transaction_history_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction transaction_history_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction transaction_history_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) transaction_history_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) transaction_history_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction transaction_history_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction transaction_history_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar TransactionHistoryStore = (transaction_history_store_dec = external_mobx_.action.bound, transaction_history_store_dec2 = external_mobx_.action.bound, transaction_history_store_dec3 = external_mobx_.action.bound, transaction_history_store_dec4 = external_mobx_.action.bound, transaction_history_store_dec5 = external_mobx_.action.bound, transaction_history_store_dec6 = external_mobx_.action.bound, transaction_history_store_dec7 = external_mobx_.action.bound, transaction_history_store_dec8 = external_mobx_.action.bound, transaction_history_store_dec9 = external_mobx_.action.bound, transaction_history_store_dec10 = external_mobx_.action.bound, transaction_history_store_dec11 = external_mobx_.action.bound, transaction_history_store_dec12 = external_mobx_.action.bound, transaction_history_store_dec13 = external_mobx_.action.bound, transaction_history_store_dec14 = external_mobx_.action.bound, transaction_history_store_dec15 = external_mobx_.action.bound, transaction_history_store_dec16 = external_mobx_.action.bound, transaction_history_store_dec17 = external_mobx_.action.bound, transaction_history_store_dec18 = external_mobx_.action.bound, (transaction_history_store_class = /*#__PURE__*/function () {\\n  function TransactionHistoryStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    transaction_history_store_classCallCheck(this, TransactionHistoryStore);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"crypto_transactions\\\", transaction_history_store_descriptor, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_cancel_modal_visible\\\", transaction_history_store_descriptor2, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_status_modal_visible\\\", transaction_history_store_descriptor3, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_visible\\\", transaction_history_store_descriptor4, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_loading\\\", transaction_history_store_descriptor5, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_transaction_id\\\", transaction_history_store_descriptor6, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_status\\\", transaction_history_store_descriptor7, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_status_description\\\", transaction_history_store_descriptor8, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  transaction_history_store_createClass(TransactionHistoryStore, [{\\n    key: \\\"updateCryptoTransactions\\\",\\n    value: function updateCryptoTransactions(transactions) {\\n      var _this = this;\\n\\n      transactions.forEach(function (transaction) {\\n        var index = _this.crypto_transactions.findIndex(function (crypto) {\\n          return crypto.id === transaction.id;\\n        });\\n\\n        if (index === -1) {\\n          _this.crypto_transactions.push(transaction);\\n        } else {\\n          Object.assign(_this.crypto_transactions[index], transaction);\\n        }\\n      });\\n      this.sortCryptoTransactions();\\n    }\\n  }, {\\n    key: \\\"setCryptoTransactionsHistory\\\",\\n    value: function setCryptoTransactionsHistory(transactions) {\\n      this.crypto_transactions = transactions;\\n      this.sortCryptoTransactions();\\n    }\\n  }, {\\n    key: \\\"sortCryptoTransactions\\\",\\n    value: function sortCryptoTransactions() {\\n      this.crypto_transactions = this.crypto_transactions.sort(function (a, b) {\\n        return b.submit_date - a.submit_date;\\n      });\\n    }\\n  }, {\\n    key: \\\"getCryptoTransactions\\\",\\n    value: function () {\\n      var _getCryptoTransactions = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this2 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.next = 2;\\n                return this.WS.subscribeCashierPayments(function (response) {\\n                  if (!response.error) {\\n                    var crypto = response.cashier_payments.crypto;\\n\\n                    _this2.updateCryptoTransactions(crypto);\\n                  }\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function getCryptoTransactions() {\\n        return _getCryptoTransactions.apply(this, arguments);\\n      }\\n\\n      return getCryptoTransactions;\\n    }()\\n  }, {\\n    key: \\\"onMount\\\",\\n    value: function () {\\n      var _onMount = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this$root_store$clie, currency, switched, is_crypto;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _this$root_store$clie = this.root_store.client, currency = _this$root_store$clie.currency, switched = _this$root_store$clie.switched;\\n                is_crypto = !!currency && (0,shared_.isCryptocurrency)(currency);\\n\\n                if (!(is_crypto && !switched)) {\\n                  _context2.next = 9;\\n                  break;\\n                }\\n\\n                this.setLoading(true);\\n                _context2.next = 6;\\n                return this.unsubscribeCryptoTransactions();\\n\\n              case 6:\\n                _context2.next = 8;\\n                return this.getCryptoTransactions();\\n\\n              case 8:\\n                this.setLoading(false);\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function onMount() {\\n        return _onMount.apply(this, arguments);\\n      }\\n\\n      return onMount;\\n    }()\\n  }, {\\n    key: \\\"unsubscribeCryptoTransactions\\\",\\n    value: function () {\\n      var _unsubscribeCryptoTransactions = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\\n        var _this3 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.next = 2;\\n                return this.WS.authorized.cashierPayments({\\n                  provider: 'crypto',\\n                  transaction_type: 'all'\\n                }).then(function (response) {\\n                  if (!response.error) {\\n                    var crypto = response.cashier_payments.crypto;\\n\\n                    _this3.setCryptoTransactionsHistory(crypto);\\n                  }\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function unsubscribeCryptoTransactions() {\\n        return _unsubscribeCryptoTransactions.apply(this, arguments);\\n      }\\n\\n      return unsubscribeCryptoTransactions;\\n    }()\\n  }, {\\n    key: \\\"cancelCryptoTransaction\\\",\\n    value: function () {\\n      var _cancelCryptoTransaction = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(transaction_id) {\\n        var _this4 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _context4.next = 2;\\n                return this.WS.cancelCryptoTransaction(transaction_id).then(function (response) {\\n                  if (!response.error) {\\n                    _this4.setSelectedCryptoTransactionId('');\\n\\n                    _this4.setIsCryptoTransactionsCancelModalVisible(false);\\n\\n                    return Promise.resolve(response);\\n                  }\\n\\n                  return Promise.reject(response.error);\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function cancelCryptoTransaction(_x) {\\n        return _cancelCryptoTransaction.apply(this, arguments);\\n      }\\n\\n      return cancelCryptoTransaction;\\n    }()\\n  }, {\\n    key: \\\"setSelectedCryptoTransactionId\\\",\\n    value: function setSelectedCryptoTransactionId(id) {\\n      this.selected_crypto_transaction_id = id;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsCancelModalVisible\\\",\\n    value: function setIsCryptoTransactionsCancelModalVisible(is_visible) {\\n      this.is_crypto_transactions_cancel_modal_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"showCryptoTransactionsCancelModal\\\",\\n    value: function showCryptoTransactionsCancelModal(id) {\\n      this.setSelectedCryptoTransactionId(id);\\n      this.setIsCryptoTransactionsCancelModalVisible(true);\\n    }\\n  }, {\\n    key: \\\"hideCryptoTransactionsCancelModal\\\",\\n    value: function hideCryptoTransactionsCancelModal() {\\n      this.setSelectedCryptoTransactionId('');\\n      this.setIsCryptoTransactionsCancelModalVisible(false);\\n    }\\n  }, {\\n    key: \\\"setSelectedCryptoStatus\\\",\\n    value: function setSelectedCryptoStatus(status) {\\n      this.selected_crypto_status = status;\\n    }\\n  }, {\\n    key: \\\"setSelectedCryptoStatusDescription\\\",\\n    value: function setSelectedCryptoStatusDescription(description) {\\n      this.selected_crypto_status_description = description;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsStatusModalVisible\\\",\\n    value: function setIsCryptoTransactionsStatusModalVisible(is_visible) {\\n      this.is_crypto_transactions_status_modal_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"showCryptoTransactionsStatusModal\\\",\\n    value: function showCryptoTransactionsStatusModal(description, name) {\\n      this.setSelectedCryptoStatusDescription(description);\\n      this.setSelectedCryptoStatus(name);\\n      this.setIsCryptoTransactionsStatusModalVisible(true);\\n    }\\n  }, {\\n    key: \\\"hideCryptoTransactionsStatusModal\\\",\\n    value: function hideCryptoTransactionsStatusModal() {\\n      this.setIsCryptoTransactionsStatusModalVisible(false);\\n    }\\n  }, {\\n    key: \\\"setLoading\\\",\\n    value: function setLoading(is_loading) {\\n      this.is_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsVisible\\\",\\n    value: function setIsCryptoTransactionsVisible(is_visible) {\\n      this.is_crypto_transactions_visible = is_visible;\\n    }\\n  }]);\\n\\n  return TransactionHistoryStore;\\n}(), (transaction_history_store_descriptor = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"crypto_transactions\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), transaction_history_store_descriptor2 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_cancel_modal_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor3 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_status_modal_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor4 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor5 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor6 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_transaction_id\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_descriptor7 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_status\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_descriptor8 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_status_description\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"updateCryptoTransactions\\\", [transaction_history_store_dec], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"updateCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setCryptoTransactionsHistory\\\", [transaction_history_store_dec2], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setCryptoTransactionsHistory\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"sortCryptoTransactions\\\", [transaction_history_store_dec3], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"sortCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"getCryptoTransactions\\\", [transaction_history_store_dec4], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"getCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"onMount\\\", [transaction_history_store_dec5], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"onMount\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"unsubscribeCryptoTransactions\\\", [transaction_history_store_dec6], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"unsubscribeCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"cancelCryptoTransaction\\\", [transaction_history_store_dec7], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"cancelCryptoTransaction\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoTransactionId\\\", [transaction_history_store_dec8], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoTransactionId\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsCancelModalVisible\\\", [transaction_history_store_dec9], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsCancelModalVisible\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsCancelModal\\\", [transaction_history_store_dec10], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsCancelModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsCancelModal\\\", [transaction_history_store_dec11], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsCancelModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatus\\\", [transaction_history_store_dec12], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatus\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatusDescription\\\", [transaction_history_store_dec13], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatusDescription\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsStatusModalVisible\\\", [transaction_history_store_dec14], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsStatusModalVisible\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsStatusModal\\\", [transaction_history_store_dec15], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsStatusModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsStatusModal\\\", [transaction_history_store_dec16], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsStatusModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setLoading\\\", [transaction_history_store_dec17], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setLoading\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsVisible\\\", [transaction_history_store_dec18], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsVisible\\\"), transaction_history_store_class.prototype)), transaction_history_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/account-prompt-dialog-store.js\\nvar account_prompt_dialog_store_dec, account_prompt_dialog_store_dec2, account_prompt_dialog_store_dec3, account_prompt_dialog_store_dec4, account_prompt_dialog_store_dec5, account_prompt_dialog_store_dec6, account_prompt_dialog_store_class, account_prompt_dialog_store_descriptor, account_prompt_dialog_store_descriptor2, account_prompt_dialog_store_descriptor3, account_prompt_dialog_store_descriptor4;\\n\\nfunction account_prompt_dialog_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction account_prompt_dialog_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { account_prompt_dialog_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { account_prompt_dialog_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction account_prompt_dialog_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction account_prompt_dialog_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction account_prompt_dialog_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction account_prompt_dialog_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) account_prompt_dialog_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) account_prompt_dialog_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction account_prompt_dialog_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction account_prompt_dialog_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar AccountPromptDialogStore = (account_prompt_dialog_store_dec = external_mobx_.action.bound, account_prompt_dialog_store_dec2 = external_mobx_.action.bound, account_prompt_dialog_store_dec3 = external_mobx_.action.bound, account_prompt_dialog_store_dec4 = external_mobx_.action.bound, account_prompt_dialog_store_dec5 = external_mobx_.action.bound, account_prompt_dialog_store_dec6 = external_mobx_.action.bound, (account_prompt_dialog_store_class = /*#__PURE__*/function () {\\n  function AccountPromptDialogStore(root_store) {\\n    account_prompt_dialog_store_classCallCheck(this, AccountPromptDialogStore);\\n\\n    account_prompt_dialog_store_initializerDefineProperty(this, \\\"should_show\\\", account_prompt_dialog_store_descriptor, this);\\n\\n    account_prompt_dialog_store_initializerDefineProperty(this, \\\"is_confirmed\\\", account_prompt_dialog_store_descriptor2, this);\\n\\n    account_prompt_dialog_store_initializerDefineProperty(this, \\\"last_location\\\", account_prompt_dialog_store_descriptor3, this);\\n\\n    account_prompt_dialog_store_initializerDefineProperty(this, \\\"current_location\\\", account_prompt_dialog_store_descriptor4, this);\\n\\n    this.root_store = root_store;\\n  }\\n\\n  account_prompt_dialog_store_createClass(AccountPromptDialogStore, [{\\n    key: \\\"shouldNavigateAfterPrompt\\\",\\n    value: function shouldNavigateAfterPrompt(next_location, current_location) {\\n      if (!this.is_confirmed) {\\n        this.last_location = next_location;\\n        this.should_show = true;\\n        this.current_location = current_location;\\n      }\\n    }\\n  }, {\\n    key: \\\"resetLastLocation\\\",\\n    value: function resetLastLocation() {\\n      this.last_location = null;\\n    }\\n  }, {\\n    key: \\\"resetIsConfirmed\\\",\\n    value: function resetIsConfirmed() {\\n      this.is_confirmed = false;\\n    }\\n  }, {\\n    key: \\\"onConfirm\\\",\\n    value: function () {\\n      var _onConfirm = account_prompt_dialog_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store$clie;\\n\\n        var has_fiat_account;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                this.should_show = false;\\n                this.is_confirmed = true;\\n                has_fiat_account = this.root_store.modules.cashier.config.account_transfer.accounts_list.some(function (x) {\\n                  return !x.is_crypto;\\n                });\\n\\n                if (!((0,shared_.isCryptocurrency)((_this$root_store$clie = this.root_store.client) === null || _this$root_store$clie === void 0 ? void 0 : _this$root_store$clie.currency) && has_fiat_account)) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                _context.next = 6;\\n                return this.doSwitch();\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onConfirm() {\\n        return _onConfirm.apply(this, arguments);\\n      }\\n\\n      return onConfirm;\\n    }()\\n  }, {\\n    key: \\\"doSwitch\\\",\\n    value: function () {\\n      var _doSwitch = account_prompt_dialog_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var non_crypto_accounts, loginid;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                non_crypto_accounts = this.root_store.modules.cashier.config.account_transfer.accounts_list.filter(function (x) {\\n                  return !x.is_crypto;\\n                });\\n                loginid = non_crypto_accounts.map(function (x) {\\n                  return x.value;\\n                })[0];\\n                _context2.next = 4;\\n                return this.root_store.client.switchAccount(loginid);\\n\\n              case 4:\\n                if (this.current_location === 'deposit') {\\n                  this.root_store.modules.cashier.setIsDeposit(true);\\n                }\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function doSwitch() {\\n        return _doSwitch.apply(this, arguments);\\n      }\\n\\n      return doSwitch;\\n    }()\\n  }, {\\n    key: \\\"onCancel\\\",\\n    value: function onCancel() {\\n      this.should_show = false;\\n    }\\n  }, {\\n    key: \\\"continueRoute\\\",\\n    value: function continueRoute() {\\n      if (this.is_confirmed && this.last_location) {\\n        this.root_store.common.routeTo(this.last_location);\\n      }\\n    }\\n  }]);\\n\\n  return AccountPromptDialogStore;\\n}(), (account_prompt_dialog_store_descriptor = account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"should_show\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_prompt_dialog_store_descriptor2 = account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"is_confirmed\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_prompt_dialog_store_descriptor3 = account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"last_location\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), account_prompt_dialog_store_descriptor4 = account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"current_location\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"shouldNavigateAfterPrompt\\\", [account_prompt_dialog_store_dec], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"shouldNavigateAfterPrompt\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"resetLastLocation\\\", [account_prompt_dialog_store_dec2], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"resetLastLocation\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"resetIsConfirmed\\\", [account_prompt_dialog_store_dec3], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"resetIsConfirmed\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"onConfirm\\\", [account_prompt_dialog_store_dec4], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"onConfirm\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"onCancel\\\", [account_prompt_dialog_store_dec5], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"onCancel\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"continueRoute\\\", [account_prompt_dialog_store_dec6], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"continueRoute\\\"), account_prompt_dialog_store_class.prototype)), account_prompt_dialog_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/error-dialog-store.js\\nvar error_dialog_store_dec, error_dialog_store_dec2, error_dialog_store_class, error_dialog_store_descriptor, error_dialog_store_descriptor2;\\n\\nfunction error_dialog_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction error_dialog_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction error_dialog_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction error_dialog_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) error_dialog_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) error_dialog_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction error_dialog_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction error_dialog_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\nvar ErrorDialogStore = (error_dialog_store_dec = external_mobx_.action.bound, error_dialog_store_dec2 = external_mobx_.action.bound, (error_dialog_store_class = /*#__PURE__*/function () {\\n  function ErrorDialogStore() {\\n    error_dialog_store_classCallCheck(this, ErrorDialogStore);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"error_message\\\", error_dialog_store_descriptor, this);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"should_show\\\", error_dialog_store_descriptor2, this);\\n  }\\n\\n  error_dialog_store_createClass(ErrorDialogStore, [{\\n    key: \\\"setShouldShow\\\",\\n    value: function setShouldShow(value) {\\n      this.should_show = value;\\n    }\\n  }, {\\n    key: \\\"setErrorMessage\\\",\\n    value: function setErrorMessage(message) {\\n      this.error_message = message;\\n      this.setShouldShow(true);\\n    }\\n  }]);\\n\\n  return ErrorDialogStore;\\n}(), (error_dialog_store_descriptor = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"error_message\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_dialog_store_descriptor2 = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"should_show\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setShouldShow\\\", [error_dialog_store_dec], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setShouldShow\\\"), error_dialog_store_class.prototype), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setErrorMessage\\\", [error_dialog_store_dec2], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setErrorMessage\\\"), error_dialog_store_class.prototype)), error_dialog_store_class));\\n\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n;// CONCATENATED MODULE: ./Containers/cashier-notifications.jsx\\n\\n\\n\\n\\nvar CashierNotifications = function CashierNotifications(_ref) {\\n  var p2p_notification_count = _ref.p2p_notification_count;\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcCashier\\\",\\n    className: \\\"header__icon\\\"\\n  }), !!p2p_notification_count && /*#__PURE__*/external_react_default().createElement(components_.Counter, {\\n    className: \\\"cashier__counter\\\",\\n    count: p2p_notification_count\\n  }));\\n};\\n\\nCashierNotifications.propTypes = {\\n  p2p_notification_count: (prop_types_default()).number\\n};\\n/* harmony default export */ const cashier_notifications = (CashierNotifications);\\n;// CONCATENATED MODULE: ./Stores/Cashier/cashier-store.js\\nfunction cashier_store_typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { cashier_store_typeof = function _typeof(obj) { return typeof obj; }; } else { cashier_store_typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return cashier_store_typeof(obj); }\\n\\nvar cashier_store_class, cashier_store_descriptor, cashier_store_descriptor2, _class3, cashier_store_descriptor3, cashier_store_descriptor4, cashier_store_descriptor5, cashier_store_descriptor6, cashier_store_descriptor7, cashier_store_descriptor8, cashier_store_descriptor9, cashier_store_descriptor10, cashier_store_descriptor11, cashier_store_dec, _class5, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _class7, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, cashier_store_dec2, cashier_store_dec3, cashier_store_dec4, _class9, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _class11, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _class13, _descriptor53, _descriptor54, _descriptor55, _descriptor56, cashier_store_dec5, cashier_store_dec6, cashier_store_dec7, cashier_store_dec8, cashier_store_dec9, cashier_store_dec10, cashier_store_dec11, cashier_store_dec12, cashier_store_dec13, cashier_store_dec14, cashier_store_dec15, cashier_store_dec16, cashier_store_dec17, cashier_store_dec18, cashier_store_dec19, cashier_store_dec20, cashier_store_dec21, cashier_store_dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _dec57, _dec58, _dec59, _dec60, _dec61, _dec62, _dec63, _dec64, _dec65, _dec66, _dec67, _dec68, _dec69, _dec70, _dec71, _dec72, _dec73, _dec74, _dec75, _dec76, _dec77, _dec78, _dec79, _dec80, _dec81, _dec82, _dec83, _dec84, _dec85, _dec86, _dec87, _dec88, _dec89, _dec90, _dec91, _dec92, _dec93, _dec94, _dec95, _dec96, _dec97, _dec98, _dec99, _dec100, _dec101, _dec102, _dec103, _dec104, _dec105, _dec106, _dec107, _dec108, _dec109, _dec110, _dec111, _dec112, _dec113, _dec114, _dec115, _dec116, _dec117, _dec118, _dec119, _dec120, _dec121, _dec122, _dec123, _class15, _descriptor57, _descriptor58, _descriptor59, _descriptor60, _descriptor61, _descriptor62, _descriptor63, _descriptor64, _descriptor65, _descriptor66, _descriptor67, _descriptor68, _descriptor69, _descriptor70, _descriptor71, _descriptor72, _descriptor73, _descriptor74, _descriptor75, _descriptor76, _descriptor77, _descriptor78, _descriptor79, _descriptor80, _descriptor81, _descriptor82, _descriptor83, _descriptor84, _descriptor85, _descriptor86, _descriptor87, _descriptor88, _descriptor89, _descriptor90, _descriptor91;\\n\\nfunction cashier_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction cashier_store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { cashier_store_ownKeys(Object(source), true).forEach(function (key) { cashier_store_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { cashier_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \\\"undefined\\\" && arr[Symbol.iterator] || arr[\\\"@@iterator\\\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction cashier_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction cashier_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { cashier_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { cashier_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction cashier_store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction cashier_store_inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) cashier_store_setPrototypeOf(subClass, superClass); }\\n\\nfunction cashier_store_setPrototypeOf(o, p) { cashier_store_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return cashier_store_setPrototypeOf(o, p); }\\n\\nfunction cashier_store_createSuper(Derived) { var hasNativeReflectConstruct = cashier_store_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = cashier_store_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = cashier_store_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return cashier_store_possibleConstructorReturn(this, result); }; }\\n\\nfunction cashier_store_possibleConstructorReturn(self, call) { if (call && (cashier_store_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return cashier_store_assertThisInitialized(self); }\\n\\nfunction cashier_store_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction cashier_store_isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction cashier_store_getPrototypeOf(o) { cashier_store_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return cashier_store_getPrototypeOf(o); }\\n\\nfunction cashier_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction cashier_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) cashier_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) cashier_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction cashier_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction cashier_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction cashier_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction cashier_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n/* eslint-disable max-classes-per-file */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar hasTransferNotAllowedLoginid = function hasTransferNotAllowedLoginid(loginid) {\\n  return loginid.startsWith('MX');\\n};\\n\\nvar getSelectedError = function getSelectedError(selected_value, is_from_account) {\\n  if (is_from_account) {\\n    return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n      i18n_default_text: \\\"Transfer from {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n      values: {\\n        selected_value: selected_value\\n      }\\n    });\\n  }\\n\\n  return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Transfer to {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n    values: {\\n      selected_value: selected_value\\n    }\\n  });\\n};\\n\\nvar Config = (cashier_store_class = function Config(_ref) {\\n  var container = _ref.container;\\n\\n  cashier_store_classCallCheck(this, Config);\\n\\n  this.container = '';\\n  this.is_session_timeout = true;\\n  this.onIframeLoaded = '';\\n  this.timeout_session = '';\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_height\\\", cashier_store_descriptor, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_url\\\", cashier_store_descriptor2, this);\\n\\n  this.container = container;\\n}, (cashier_store_descriptor = cashier_store_applyDecoratedDescriptor(cashier_store_class.prototype, \\\"iframe_height\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), cashier_store_descriptor2 = cashier_store_applyDecoratedDescriptor(cashier_store_class.prototype, \\\"iframe_url\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n})), cashier_store_class);\\nvar ConfigError = (_class3 = function ConfigError() {\\n  cashier_store_classCallCheck(this, ConfigError);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"message\\\", cashier_store_descriptor3, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"code\\\", cashier_store_descriptor4, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"fields\\\", cashier_store_descriptor5, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_show_full_page\\\", cashier_store_descriptor6, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"onClickButton\\\", cashier_store_descriptor7, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_ask_uk_funds_protection\\\", cashier_store_descriptor8, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_self_exclusion_max_turnover_set\\\", cashier_store_descriptor9, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_ask_authentication\\\", cashier_store_descriptor10, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_ask_financial_risk_approval\\\", cashier_store_descriptor11, this);\\n}, (cashier_store_descriptor3 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"message\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), cashier_store_descriptor4 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"code\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), cashier_store_descriptor5 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"fields\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), cashier_store_descriptor6 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_show_full_page\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor7 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"onClickButton\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), cashier_store_descriptor8 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_ask_uk_funds_protection\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor9 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_self_exclusion_max_turnover_set\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor10 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_ask_authentication\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor11 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_ask_financial_risk_approval\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n})), _class3);\\nvar ConfigPaymentAgent = (cashier_store_dec = external_mobx_.action.bound, (_class5 = /*#__PURE__*/function () {\\n  function ConfigPaymentAgent() {\\n    cashier_store_classCallCheck(this, ConfigPaymentAgent);\\n\\n    this.list = [];\\n\\n    cashier_store_initializerDefineProperty(this, \\\"agents\\\", _descriptor12, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor13, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor14, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"filtered_list\\\", _descriptor15, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_name_selected\\\", _descriptor16, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_withdraw\\\", _descriptor17, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_try_withdraw_successful\\\", _descriptor18, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_withdraw_successful\\\", _descriptor19, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"confirm\\\", _descriptor20, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor21, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"selected_bank\\\", _descriptor22, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"supported_banks\\\", _descriptor23, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"verification\\\", _descriptor24, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"active_tab_index\\\", _descriptor25, this);\\n  }\\n\\n  cashier_store_createClass(ConfigPaymentAgent, [{\\n    key: \\\"setActiveTabIndex\\\",\\n    value: function setActiveTabIndex(index) {\\n      this.active_tab_index = index;\\n    }\\n  }]);\\n\\n  return ConfigPaymentAgent;\\n}(), (_descriptor12 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"agents\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor13 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'payment_agent';\\n  }\\n}), _descriptor14 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor15 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"filtered_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor16 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_name_selected\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), _descriptor17 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_withdraw\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor18 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_try_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor19 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor20 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor21 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor22 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"selected_bank\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor23 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"supported_banks\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor24 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"verification\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigVerification();\\n  }\\n}), _descriptor25 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"active_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"setActiveTabIndex\\\", [cashier_store_dec], Object.getOwnPropertyDescriptor(_class5.prototype, \\\"setActiveTabIndex\\\"), _class5.prototype)), _class5));\\nvar ConfigPaymentAgentTransfer = (_class7 = function ConfigPaymentAgentTransfer() {\\n  cashier_store_classCallCheck(this, ConfigPaymentAgentTransfer);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor26, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor27, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_payment_agent\\\", _descriptor28, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_try_transfer_successful\\\", _descriptor29, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_transfer_successful\\\", _descriptor30, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"confirm\\\", _descriptor31, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor32, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"transfer_limit\\\", _descriptor33, this);\\n}, (_descriptor26 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'payment_agent_transfer';\\n  }\\n}), _descriptor27 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor28 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"is_payment_agent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor29 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"is_try_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor30 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"is_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor31 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor32 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor33 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n})), _class7);\\nvar ConfigAccountTransfer = (cashier_store_dec2 = external_mobx_.action.bound, cashier_store_dec3 = external_mobx_.action.bound, cashier_store_dec4 = external_mobx_.action.bound, (_class9 = /*#__PURE__*/function () {\\n  function ConfigAccountTransfer() {\\n    cashier_store_classCallCheck(this, ConfigAccountTransfer);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"accounts_list\\\", _descriptor34, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor35, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor36, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"has_no_account\\\", _descriptor37, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"has_no_accounts_balance\\\", _descriptor38, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_transfer_confirm\\\", _descriptor39, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_mt5_transfer_in_progress\\\", _descriptor40, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"minimum_fee\\\", _descriptor41, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor42, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"selected_from\\\", _descriptor43, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"selected_to\\\", _descriptor44, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"account_transfer_amount\\\", _descriptor45, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"transfer_fee\\\", _descriptor46, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"transfer_limit\\\", _descriptor47, this);\\n  }\\n\\n  cashier_store_createClass(ConfigAccountTransfer, [{\\n    key: \\\"setBalanceByLoginId\\\",\\n    value: function setBalanceByLoginId(loginid, balance) {\\n      this.accounts_list.find(function (acc) {\\n        return loginid === acc.value;\\n      }).balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedFrom\\\",\\n    value: function setBalanceSelectedFrom(balance) {\\n      this.selected_from.balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedTo\\\",\\n    value: function setBalanceSelectedTo(balance) {\\n      this.selected_to.balance = balance;\\n    }\\n  }]);\\n\\n  return ConfigAccountTransfer;\\n}(), (_descriptor34 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"accounts_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor35 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'account_transfer';\\n  }\\n}), _descriptor36 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor37 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"has_no_account\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor38 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"has_no_accounts_balance\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor39 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"is_transfer_confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor40 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"is_mt5_transfer_in_progress\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor41 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"minimum_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor42 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor43 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"selected_from\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor44 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"selected_to\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor45 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"account_transfer_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor46 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"transfer_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor47 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"setBalanceByLoginId\\\", [cashier_store_dec2], Object.getOwnPropertyDescriptor(_class9.prototype, \\\"setBalanceByLoginId\\\"), _class9.prototype), cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"setBalanceSelectedFrom\\\", [cashier_store_dec3], Object.getOwnPropertyDescriptor(_class9.prototype, \\\"setBalanceSelectedFrom\\\"), _class9.prototype), cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"setBalanceSelectedTo\\\", [cashier_store_dec4], Object.getOwnPropertyDescriptor(_class9.prototype, \\\"setBalanceSelectedTo\\\"), _class9.prototype)), _class9));\\nvar ConfigWithdraw = (_class11 = function ConfigWithdraw() {\\n  cashier_store_classCallCheck(this, ConfigWithdraw);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor48, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_height\\\", _descriptor49, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_url\\\", _descriptor50, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor51, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"verification\\\", _descriptor52, this);\\n\\n  this.is_session_timeout = true;\\n  this.onIframeLoaded = '';\\n  this.timeout_session = '';\\n}, (_descriptor48 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'withdraw';\\n  }\\n}), _descriptor49 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"iframe_height\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor50 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"iframe_url\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor51 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor52 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"verification\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigVerification();\\n  }\\n})), _class11);\\nvar ConfigVerification = (_class13 = function ConfigVerification() {\\n  cashier_store_classCallCheck(this, ConfigVerification);\\n\\n  this.is_button_clicked = false;\\n  this.timeout_button = '';\\n\\n  cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor53, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_email_sent\\\", _descriptor54, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_resend_clicked\\\", _descriptor55, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"resend_timeout\\\", _descriptor56, this);\\n}, (_descriptor53 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor54 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_email_sent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor55 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_resend_clicked\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor56 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"resend_timeout\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 60;\\n  }\\n})), _class13);\\nvar CashierStore = (cashier_store_dec5 = external_mobx_.action.bound, cashier_store_dec6 = external_mobx_.action.bound, cashier_store_dec7 = external_mobx_.action.bound, cashier_store_dec8 = external_mobx_.action.bound, cashier_store_dec9 = external_mobx_.action.bound, cashier_store_dec10 = external_mobx_.action.bound, cashier_store_dec11 = external_mobx_.action.bound, cashier_store_dec12 = external_mobx_.action.bound, cashier_store_dec13 = external_mobx_.action.bound, cashier_store_dec14 = external_mobx_.action.bound, cashier_store_dec15 = external_mobx_.action.bound, cashier_store_dec16 = external_mobx_.action.bound, cashier_store_dec17 = external_mobx_.action.bound, cashier_store_dec18 = external_mobx_.action.bound, cashier_store_dec19 = external_mobx_.action.bound, cashier_store_dec20 = external_mobx_.action.bound, cashier_store_dec21 = external_mobx_.action.bound, cashier_store_dec22 = external_mobx_.action.bound, _dec23 = external_mobx_.action.bound, _dec24 = external_mobx_.action.bound, _dec25 = external_mobx_.action.bound, _dec26 = external_mobx_.action.bound, _dec27 = external_mobx_.action.bound, _dec28 = external_mobx_.action.bound, _dec29 = external_mobx_.action.bound, _dec30 = external_mobx_.action.bound, _dec31 = external_mobx_.action.bound, _dec32 = external_mobx_.action.bound, _dec33 = external_mobx_.action.bound, _dec34 = external_mobx_.action.bound, _dec35 = external_mobx_.action.bound, _dec36 = external_mobx_.action.bound, _dec37 = external_mobx_.action.bound, _dec38 = external_mobx_.action.bound, _dec39 = external_mobx_.action.bound, _dec40 = external_mobx_.action.bound, _dec41 = external_mobx_.action.bound, _dec42 = external_mobx_.action.bound, _dec43 = external_mobx_.action.bound, _dec44 = external_mobx_.action.bound, _dec45 = external_mobx_.action.bound, _dec46 = external_mobx_.action.bound, _dec47 = external_mobx_.action.bound, _dec48 = external_mobx_.action.bound, _dec49 = external_mobx_.action.bound, _dec50 = external_mobx_.action.bound, _dec51 = external_mobx_.action.bound, _dec52 = external_mobx_.action.bound, _dec53 = external_mobx_.action.bound, _dec54 = external_mobx_.action.bound, _dec55 = external_mobx_.action.bound, _dec56 = external_mobx_.action.bound, _dec57 = external_mobx_.action.bound, _dec58 = external_mobx_.action.bound, _dec59 = external_mobx_.action.bound, _dec60 = external_mobx_.action.bound, _dec61 = external_mobx_.action.bound, _dec62 = external_mobx_.action.bound, _dec63 = external_mobx_.action.bound, _dec64 = external_mobx_.action.bound, _dec65 = external_mobx_.action.bound, _dec66 = external_mobx_.action.bound, _dec67 = external_mobx_.action.bound, _dec68 = external_mobx_.action.bound, _dec69 = external_mobx_.action.bound, _dec70 = external_mobx_.action.bound, _dec71 = external_mobx_.action.bound, _dec72 = external_mobx_.action.bound, _dec73 = external_mobx_.action.bound, _dec74 = external_mobx_.action.bound, _dec75 = external_mobx_.action.bound, _dec76 = external_mobx_.action.bound, _dec77 = external_mobx_.action.bound, _dec78 = external_mobx_.action.bound, _dec79 = external_mobx_.action.bound, _dec80 = external_mobx_.action.bound, _dec81 = external_mobx_.action.bound, _dec82 = external_mobx_.action.bound, _dec83 = external_mobx_.action.bound, _dec84 = external_mobx_.action.bound, _dec85 = external_mobx_.action.bound, _dec86 = external_mobx_.action.bound, _dec87 = external_mobx_.action.bound, _dec88 = external_mobx_.action.bound, _dec89 = external_mobx_.action.bound, _dec90 = external_mobx_.action.bound, _dec91 = external_mobx_.action.bound, _dec92 = external_mobx_.action.bound, _dec93 = external_mobx_.action.bound, _dec94 = external_mobx_.action.bound, _dec95 = external_mobx_.action.bound, _dec96 = external_mobx_.action.bound, _dec97 = external_mobx_.action.bound, _dec98 = external_mobx_.action.bound, _dec99 = external_mobx_.action.bound, _dec100 = external_mobx_.action.bound, _dec101 = external_mobx_.action.bound, _dec102 = external_mobx_.action.bound, _dec103 = external_mobx_.action.bound, _dec104 = external_mobx_.action.bound, _dec105 = external_mobx_.action.bound, _dec106 = external_mobx_.action.bound, _dec107 = external_mobx_.action.bound, _dec108 = external_mobx_.action.bound, _dec109 = external_mobx_.action.bound, _dec110 = external_mobx_.action.bound, _dec111 = external_mobx_.action.bound, _dec112 = external_mobx_.action.bound, _dec113 = external_mobx_.action.bound, _dec114 = external_mobx_.action.bound, _dec115 = external_mobx_.action.bound, _dec116 = external_mobx_.action.bound, _dec117 = external_mobx_.action.bound, _dec118 = external_mobx_.action.bound, _dec119 = external_mobx_.action.bound, _dec120 = external_mobx_.action.bound, _dec121 = external_mobx_.action.bound, _dec122 = external_mobx_.action.bound, _dec123 = external_mobx_.action.bound, (_class15 = /*#__PURE__*/function (_BaseStore) {\\n  cashier_store_inherits(CashierStore, _BaseStore);\\n\\n  var _super = cashier_store_createSuper(CashierStore);\\n\\n  function CashierStore(_ref2) {\\n    var _this$map_action;\\n\\n    var _this;\\n\\n    var root_store = _ref2.root_store,\\n        WS = _ref2.WS;\\n\\n    cashier_store_classCallCheck(this, CashierStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_loading\\\", _descriptor57, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_p2p_visible\\\", _descriptor58, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"p2p_notification_count\\\", _descriptor59, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"cashier_route_tab_index\\\", _descriptor60, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_10k_withdrawal_limit_reached\\\", _descriptor61, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_deposit\\\", _descriptor62, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"should_show_all_available_currencies\\\", _descriptor63, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_cashier_default\\\", _descriptor64, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"deposit_target\\\", _descriptor65, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"crypto_amount\\\", _descriptor66, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"fiat_amount\\\", _descriptor67, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"insufficient_fund_error\\\", _descriptor68, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"all_payment_agent_list\\\", _descriptor69, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"should_set_currency_modal_title_change\\\", _descriptor70, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"p2p_advertiser_error\\\", _descriptor71, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"has_set_currency\\\", _descriptor72, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"withdraw_amount\\\", _descriptor73, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"converter_from_amount\\\", _descriptor74, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"converter_to_amount\\\", _descriptor75, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"converter_from_error\\\", _descriptor76, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"converter_to_error\\\", _descriptor77, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_timer_visible\\\", _descriptor78, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_crypto_transactions_visible\\\", _descriptor79, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"blockchain_address\\\", _descriptor80, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"should_percentage_reset\\\", _descriptor81, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"percentage\\\", _descriptor82, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_withdraw_confirmed\\\", _descriptor83, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"show_p2p_in_cashier_default\\\", _descriptor84, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"max_withdraw_amount\\\", _descriptor85, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"config\\\", _descriptor86, cashier_store_assertThisInitialized(_this));\\n\\n    _this.active_container = _this.config.deposit.container;\\n\\n    _this.onRemount = function () {};\\n\\n    _this.is_populating_values = false;\\n    _this.containers = [_this.config.deposit.container, _this.config.withdraw.container];\\n    _this.map_action = (_this$map_action = {}, cashier_store_defineProperty(_this$map_action, _this.config.withdraw.container, 'payment_withdraw'), cashier_store_defineProperty(_this$map_action, _this.config.payment_agent.container, 'payment_agent_withdraw'), _this$map_action);\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"resetPaymentAgent\\\", _descriptor87, cashier_store_assertThisInitialized(_this));\\n\\n    _this.requestTransferBetweenAccounts = /*#__PURE__*/function () {\\n      var _ref4 = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref3) {\\n        var amount, is_mt_transfer, currency, transfer_between_accounts, account_status_response;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                amount = _ref3.amount;\\n\\n                if (_this.root_store.client.is_logged_in) {\\n                  _context.next = 3;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\", null);\\n\\n              case 3:\\n                _this.setLoading(true);\\n\\n                _this.setErrorMessage('');\\n\\n                is_mt_transfer = _this.config.account_transfer.selected_from.is_mt || _this.config.account_transfer.selected_to.is_mt;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(true);\\n                currency = _this.config.account_transfer.selected_from.currency;\\n                _context.next = 10;\\n                return _this.WS.authorized.transferBetweenAccounts(_this.config.account_transfer.selected_from.value, _this.config.account_transfer.selected_to.value, currency, amount);\\n\\n              case 10:\\n                transfer_between_accounts = _context.sent;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(false);\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context.next = 21;\\n                  break;\\n                }\\n\\n                if (!(transfer_between_accounts.error.code === 'Fiat2CryptoTransferOverLimit')) {\\n                  _context.next = 18;\\n                  break;\\n                }\\n\\n                _context.next = 16;\\n                return _this.WS.authorized.getAccountStatus();\\n\\n              case 16:\\n                account_status_response = _context.sent;\\n\\n                if (!account_status_response.error) {\\n                  _this.root_store.client.setAccountStatus(account_status_response.get_account_status);\\n                }\\n\\n              case 18:\\n                _this.setErrorMessage(transfer_between_accounts.error);\\n\\n                _context.next = 25;\\n                break;\\n\\n              case 21:\\n                _this.setReceiptTransfer({\\n                  amount: (0,shared_.formatMoney)(currency, amount, true)\\n                });\\n\\n                transfer_between_accounts.accounts.forEach(function (account) {\\n                  _this.config.account_transfer.setBalanceByLoginId(account.loginid, account.balance);\\n\\n                  if (account.loginid === _this.config.account_transfer.selected_from.value) {\\n                    _this.config.account_transfer.setBalanceSelectedFrom(account.balance);\\n                  } else if (account.loginid === _this.config.account_transfer.selected_to.value) {\\n                    _this.config.account_transfer.setBalanceSelectedTo(account.balance);\\n                  } // if one of the accounts was mt5\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5) {\\n                    Promise.all([_this.WS.mt5LoginList(), _this.WS.balanceAll()]).then(function (_ref5) {\\n                      var _ref6 = _slicedToArray(_ref5, 2),\\n                          mt5_login_list_response = _ref6[0],\\n                          balance_response = _ref6[1];\\n\\n                      // update the balance for account switcher by renewing the mt5_login_list response\\n                      _this.root_store.client.responseMt5LoginList(mt5_login_list_response); // update total balance since MT5 total only comes in non-stream balance call\\n\\n\\n                      _this.root_store.client.setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  } // if one of the accounts was dxtrade\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE) {\\n                    Promise.all([_this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE), _this.WS.balanceAll()]).then(function (_ref7) {\\n                      var _ref8 = _slicedToArray(_ref7, 2),\\n                          dxtrade_login_list_response = _ref8[0],\\n                          balance_response = _ref8[1];\\n\\n                      // update the balance for account switcher by renewing the dxtrade_login_list_response\\n                      _this.root_store.client.responseTradingPlatformAccountsList(dxtrade_login_list_response); // update total balance since Dxtrade total only comes in non-stream balance call\\n\\n\\n                      _this.root_store.client.setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  }\\n                });\\n\\n                _this.setAccountTransferAmount(null);\\n\\n                _this.setIsTransferConfirm(true);\\n\\n              case 25:\\n                _this.setLoading(false);\\n\\n                return _context.abrupt(\\\"return\\\", transfer_between_accounts);\\n\\n              case 27:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee);\\n      }));\\n\\n      return function (_x) {\\n        return _ref4.apply(this, arguments);\\n      };\\n    }();\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"resetAccountTransfer\\\", _descriptor88, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"requestTryPaymentAgentTransfer\\\", _descriptor89, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"requestPaymentAgentTransfer\\\", _descriptor90, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"resetPaymentAgentTransfer\\\", _descriptor91, cashier_store_assertThisInitialized(_this));\\n\\n    _this.WS = WS;\\n    (0,external_mobx_.when)(function () {\\n      return _this.root_store.client.is_logged_in;\\n    }, function () {\\n      _this.attachCashierToMenu();\\n    });\\n\\n    if (!_this.has_set_currency) {\\n      _this.changeSetCurrencyModalTitle();\\n    }\\n\\n    _this.onramp = new OnRampStore({\\n      root_store: _this.root_store,\\n      WS: _this.WS\\n    });\\n    _this.account_prompt_dialog = new AccountPromptDialogStore(_this.root_store);\\n    _this.error_dialog = new ErrorDialogStore();\\n    _this.transaction_history = new TransactionHistoryStore({\\n      root_store: _this.root_store,\\n      WS: _this.WS\\n    });\\n\\n    _this.init();\\n\\n    return _this;\\n  }\\n\\n  cashier_store_createClass(CashierStore, [{\\n    key: \\\"is_crypto\\\",\\n    get: function get() {\\n      var currency = this.root_store.client.currency;\\n      return !!currency && (0,shared_.isCryptocurrency)(currency);\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_visible\\\",\\n    get: function get() {\\n      return !!(this.config.payment_agent.filtered_list.length || this.config.payment_agent.agents.length);\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_visible_in_onboarding\\\",\\n    get: function get() {\\n      var _this$all_payment_age, _this$all_payment_age2, _this$all_payment_age3;\\n\\n      return !!((_this$all_payment_age = this.all_payment_agent_list) !== null && _this$all_payment_age !== void 0 && (_this$all_payment_age2 = _this$all_payment_age.paymentagent_list) !== null && _this$all_payment_age2 !== void 0 && (_this$all_payment_age3 = _this$all_payment_age2.list) !== null && _this$all_payment_age3 !== void 0 && _this$all_payment_age3.length);\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_transfer_visible\\\",\\n    get: function get() {\\n      return this.config.payment_agent_transfer.is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"is_account_transfer_visible\\\",\\n    get: function get() {\\n      // cashier Transfer account tab is hidden for iom clients\\n      // check for residence to hide the tab before creating a real money account\\n      return this.root_store.client.residence !== 'im';\\n    }\\n  }, {\\n    key: \\\"is_p2p_enabled\\\",\\n    get: function get() {\\n      return this.is_p2p_visible && !this.root_store.client.is_eu;\\n    }\\n  }, {\\n    key: \\\"showP2pInCashierDefault\\\",\\n    value: function showP2pInCashierDefault() {\\n      var is_p2p_restricted = this.p2p_advertiser_error === 'RestrictedCountry';\\n      var has_usd_currency = this.root_store.client.account_list.some(function (account) {\\n        return account.title === 'USD';\\n      });\\n      var has_user_fiat_currency = this.root_store.client.account_list.some(function (account) {\\n        return !(0,shared_.isCryptocurrency)(account.title) && account.title !== 'Real';\\n      });\\n\\n      if (is_p2p_restricted || this.root_store.client.is_virtual || has_user_fiat_currency && !has_usd_currency) {\\n        this.show_p2p_in_cashier_default = false;\\n      } else {\\n        this.show_p2p_in_cashier_default = true;\\n      }\\n    }\\n  }, {\\n    key: \\\"attachCashierToMenu\\\",\\n    value: function attachCashierToMenu() {\\n      if (!this.has_set_currency) {\\n        this.setHasSetCurrency();\\n      }\\n\\n      this.root_store.menu.attach({\\n        id: 'dt_cashier_tab',\\n        icon: /*#__PURE__*/external_react_default().createElement(cashier_notifications, {\\n          p2p_notification_count: this.p2p_notification_count\\n        }),\\n        text: function text() {\\n          return (0,translations_.localize)('Cashier');\\n        },\\n        link_to: this.has_set_currency && shared_.routes.cashier,\\n        onClick: !this.has_set_currency && this.root_store.ui.toggleSetCurrencyModal,\\n        login_only: true\\n      });\\n    }\\n  }, {\\n    key: \\\"replaceCashierMenuOnclick\\\",\\n    value: function replaceCashierMenuOnclick() {\\n      this.setHasSetCurrency();\\n      this.root_store.menu.update({\\n        id: 'dt_cashier_tab',\\n        icon: /*#__PURE__*/external_react_default().createElement(cashier_notifications, {\\n          p2p_notification_count: this.p2p_notification_count\\n        }),\\n        text: function text() {\\n          return (0,translations_.localize)('Cashier');\\n        },\\n        link_to: this.has_set_currency && shared_.routes.cashier,\\n        onClick: !this.has_set_currency ? this.root_store.ui.toggleSetCurrencyModal : false,\\n        login_only: true\\n      }, 1);\\n    }\\n  }, {\\n    key: \\\"setHasSetCurrency\\\",\\n    value: function setHasSetCurrency() {\\n      this.has_set_currency = this.root_store.client.account_list.filter(function (account) {\\n        return !account.is_virtual;\\n      }).some(function (account) {\\n        return account.title !== 'Real';\\n      }) || !this.root_store.client.has_active_real_account;\\n    }\\n  }, {\\n    key: \\\"changeSetCurrencyModalTitle\\\",\\n    value: function changeSetCurrencyModalTitle() {\\n      this.should_set_currency_modal_title_change = true;\\n    }\\n  }, {\\n    key: \\\"onMountCashierDefault\\\",\\n    value: function () {\\n      var _onMountCashierDefault = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this$all_payment_age4, _this$all_payment_age5;\\n\\n        var payment_agent_list;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                if (!this.has_set_currency) {\\n                  this.setHasSetCurrency();\\n                }\\n\\n                this.setIsCashierDefault(true);\\n                this.account_prompt_dialog.resetIsConfirmed();\\n                this.setLoading(true);\\n\\n                if (!(((_this$all_payment_age4 = this.all_payment_agent_list) === null || _this$all_payment_age4 === void 0 ? void 0 : (_this$all_payment_age5 = _this$all_payment_age4.paymentagent_list) === null || _this$all_payment_age5 === void 0 ? void 0 : _this$all_payment_age5.list) === undefined)) {\\n                  _context2.next = 9;\\n                  break;\\n                }\\n\\n                _context2.next = 7;\\n                return this.getAllPaymentAgentList();\\n\\n              case 7:\\n                payment_agent_list = _context2.sent;\\n                this.setAllPaymentAgentList(payment_agent_list);\\n\\n              case 9:\\n                this.setLoading(false);\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function onMountCashierDefault() {\\n        return _onMountCashierDefault.apply(this, arguments);\\n      }\\n\\n      return onMountCashierDefault;\\n    }()\\n  }, {\\n    key: \\\"setIsWithdrawConfirmed\\\",\\n    value: function setIsWithdrawConfirmed(is_withdraw_confirmed) {\\n      this.is_withdraw_confirmed = is_withdraw_confirmed;\\n      if (is_withdraw_confirmed) this.setWithdrawAmount(this.converter_from_amount);\\n\\n      if (!is_withdraw_confirmed && this.config[this.active_container].verification) {\\n        this.clearVerification();\\n      }\\n    }\\n  }, {\\n    key: \\\"setWithdrawAmount\\\",\\n    value: function setWithdrawAmount(amount) {\\n      this.withdraw_amount = amount;\\n    }\\n  }, {\\n    key: \\\"calculatePercentage\\\",\\n    value: function calculatePercentage() {\\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.converter_from_amount;\\n\\n      if (this.active_container === this.config.account_transfer.container) {\\n        this.percentage = +(amount / +this.config.account_transfer.selected_from.balance * 100).toFixed(0);\\n      } else {\\n        this.percentage = +(amount / +this.root_store.client.balance * 100).toFixed(0);\\n      }\\n    }\\n  }, {\\n    key: \\\"percentageSelectorSelectionStatus\\\",\\n    value: function percentageSelectorSelectionStatus(should_percentage_reset) {\\n      this.should_percentage_reset = should_percentage_reset;\\n\\n      if (should_percentage_reset) {\\n        this.percentage = 0;\\n      }\\n    }\\n  }, {\\n    key: \\\"saveWithdraw\\\",\\n    value: function () {\\n      var _saveWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(verification_code) {\\n        var _this2 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                this.setErrorMessage('');\\n                _context3.next = 3;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +this.converter_from_amount,\\n                  verification_code: verification_code\\n                }).then(function (response) {\\n                  if (response.error) {\\n                    _this2.setErrorMessage(response.error);\\n\\n                    if (verification_code) {\\n                      // clear verification code on error\\n                      _this2.clearVerification();\\n                    }\\n\\n                    _this2.resetWithrawForm();\\n                  } else {\\n                    _this2.setIsWithdrawConfirmed(true);\\n                  }\\n                });\\n\\n              case 3:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function saveWithdraw(_x2) {\\n        return _saveWithdraw.apply(this, arguments);\\n      }\\n\\n      return saveWithdraw;\\n    }()\\n  }, {\\n    key: \\\"requestWithdraw\\\",\\n    value: function () {\\n      var _requestWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(verification_code) {\\n        var _this3 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                if (this.root_store.client.is_logged_in) {\\n                  _context4.next = 2;\\n                  break;\\n                }\\n\\n                return _context4.abrupt(\\\"return\\\");\\n\\n              case 2:\\n                if (this.converter_from_amount) {\\n                  _context4.next = 5;\\n                  break;\\n                }\\n\\n                this.setConverterFromError((0,translations_.localize)('This field is required.'));\\n                return _context4.abrupt(\\\"return\\\");\\n\\n              case 5:\\n                _context4.next = 7;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +this.converter_from_amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                }).then(function (response) {\\n                  if (response.error) {\\n                    _this3.error_dialog.setErrorMessage(response.error.message);\\n                  } else {\\n                    _this3.saveWithdraw(verification_code);\\n                  }\\n                });\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function requestWithdraw(_x3) {\\n        return _requestWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestWithdraw;\\n    }()\\n  }, {\\n    key: \\\"resetWithrawForm\\\",\\n    value: function resetWithrawForm() {\\n      this.setBlockchainAddress('');\\n      this.setConverterFromAmount('');\\n      this.setConverterToAmount('');\\n      this.clearVerification();\\n    }\\n  }, {\\n    key: \\\"setIsDeposit\\\",\\n    value: function setIsDeposit(is_deposit) {\\n      this.is_deposit = is_deposit;\\n    }\\n  }, {\\n    key: \\\"setShouldShowAllAvailableCurrencies\\\",\\n    value: function setShouldShowAllAvailableCurrencies(value) {\\n      this.should_show_all_available_currencies = value;\\n    }\\n  }, {\\n    key: \\\"setBlockchainAddress\\\",\\n    value: function setBlockchainAddress(address) {\\n      this.blockchain_address = address;\\n    }\\n  }, {\\n    key: \\\"setIsCashierDefault\\\",\\n    value: function setIsCashierDefault(is_cashier_default) {\\n      this.is_cashier_default = is_cashier_default;\\n    }\\n  }, {\\n    key: \\\"setDepositTarget\\\",\\n    value: function setDepositTarget(target) {\\n      this.deposit_target = target;\\n    }\\n  }, {\\n    key: \\\"continueRoute\\\",\\n    value: function continueRoute() {\\n      this.root_store.common.routeTo(this.deposit_target);\\n    }\\n  }, {\\n    key: \\\"setAccountSwitchListener\\\",\\n    value: function setAccountSwitchListener() {\\n      // cashier inits once and tries to stay active until switching account\\n      // since cashier calls take a long time to respond or display in iframe\\n      // so we don't have any unmount function here and everything gets reset on switch instead\\n      this.disposeSwitchAccount();\\n      this.onSwitchAccount(this.accountSwitcherListener);\\n    }\\n  }, {\\n    key: \\\"setActiveTabIndex\\\",\\n    value: function setActiveTabIndex(index) {\\n      this.config.payment_agent.setActiveTabIndex(index);\\n\\n      if (index === 1) {\\n        this.sendVerificationEmail();\\n      }\\n    } // Initialise P2P attributes on app load without mounting the entire cashier\\n\\n  }, {\\n    key: \\\"init\\\",\\n    value: function init() {\\n      var _this4 = this;\\n\\n      (0,external_mobx_.when)(function () {\\n        return _this4.root_store.client.is_logged_in;\\n      }, /*#__PURE__*/cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                _context5.next = 2;\\n                return _this4.getAdvertizerError();\\n\\n              case 2:\\n                _this4.checkP2pStatus();\\n\\n                _context5.next = 5;\\n                return _this4.check10kLimit();\\n\\n              case 5:\\n                _context5.next = 7;\\n                return _this4.setPaymentAgentList();\\n\\n              case 7:\\n                _context5.next = 9;\\n                return _this4.filterPaymentAgentList();\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5);\\n      })));\\n      (0,external_mobx_.when)(function () {\\n        return _this4.is_payment_agent_visible;\\n      }, function () {\\n        return _this4.filterPaymentAgentList();\\n      });\\n      (0,external_mobx_.reaction)(function () {\\n        return [_this4.root_store.client.switched, _this4.root_store.client.is_logged_in, _this4.root_store.client.currency];\\n      }, /*#__PURE__*/cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\\n          while (1) {\\n            switch (_context6.prev = _context6.next) {\\n              case 0:\\n                _context6.next = 2;\\n                return _this4.WS.wait('get_settings');\\n\\n              case 2:\\n                if (!_this4.root_store.client.is_logged_in) {\\n                  _context6.next = 10;\\n                  break;\\n                }\\n\\n                _context6.next = 5;\\n                return _this4.getAdvertizerError();\\n\\n              case 5:\\n                _this4.account_prompt_dialog.resetLastLocation();\\n\\n                if (_this4.root_store.client.switched) {\\n                  _context6.next = 10;\\n                  break;\\n                }\\n\\n                _this4.checkP2pStatus(); // check if withdrawal limit is reached\\n                // if yes, this will trigger to show a notification\\n\\n\\n                _context6.next = 10;\\n                return _this4.check10kLimit();\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context6.stop();\\n            }\\n          }\\n        }, _callee6);\\n      })));\\n      (0,external_mobx_.reaction)(function () {\\n        return [_this4.root_store.client.currency];\\n      }, function () {\\n        _this4.setIsWithdrawConfirmed(false);\\n      });\\n    }\\n  }, {\\n    key: \\\"getAdvertizerError\\\",\\n    value: function () {\\n      var _getAdvertizerError = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\\n        var advertiser_info;\\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\\n          while (1) {\\n            switch (_context7.prev = _context7.next) {\\n              case 0:\\n                _context7.next = 2;\\n                return this.WS.authorized.p2pAdvertiserInfo();\\n\\n              case 2:\\n                advertiser_info = _context7.sent;\\n                this.setP2pAdvertiserError((0,shared_.getPropertyValue)(advertiser_info, ['error', 'code']));\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context7.stop();\\n            }\\n          }\\n        }, _callee7, this);\\n      }));\\n\\n      function getAdvertizerError() {\\n        return _getAdvertizerError.apply(this, arguments);\\n      }\\n\\n      return getAdvertizerError;\\n    }()\\n  }, {\\n    key: \\\"setP2pAdvertiserError\\\",\\n    value: function setP2pAdvertiserError(value) {\\n      this.p2p_advertiser_error = value;\\n    }\\n  }, {\\n    key: \\\"checkP2pStatus\\\",\\n    value: function checkP2pStatus() {\\n      var advertiser_error = this.p2p_advertiser_error;\\n      var is_p2p_restricted = advertiser_error === 'RestrictedCountry' || advertiser_error === 'RestrictedCurrency';\\n      this.setIsP2pVisible(!(is_p2p_restricted || this.root_store.client.is_virtual));\\n    }\\n  }, {\\n    key: \\\"onMountCommon\\\",\\n    value: function () {\\n      var _onMountCommon = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(should_remount) {\\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\\n          while (1) {\\n            switch (_context8.prev = _context8.next) {\\n              case 0:\\n                if (!this.root_store.client.is_logged_in) {\\n                  _context8.next = 10;\\n                  break;\\n                }\\n\\n                if (!this.is_populating_values) {\\n                  _context8.next = 3;\\n                  break;\\n                }\\n\\n                return _context8.abrupt(\\\"return\\\");\\n\\n              case 3:\\n                this.is_populating_values = true;\\n\\n                if (should_remount) {\\n                  this.onRemount = this.onMountCommon;\\n                } // we need to see if client's country has PA\\n                // if yes, we can show the PA tab in cashier\\n\\n\\n                if (!this.config.payment_agent.list.length) {\\n                  this.setPaymentAgentList().then(this.filterPaymentAgentList);\\n                }\\n\\n                if (!this.config.payment_agent_transfer.is_payment_agent) {\\n                  this.checkIsPaymentAgent();\\n                }\\n\\n                if (!this.config.account_transfer.accounts_list.length) {\\n                  this.sortAccountsTransfer();\\n                }\\n\\n                if (!this.onramp.is_onramp_tab_visible && window.location.pathname.endsWith(shared_.routes.cashier_onramp)) {\\n                  this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n                if (!this.is_crypto_transactions_visible && window.location.pathname.endsWith(shared_.routes.cashier_crypto_transactions)) {\\n                  this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n                  this.transaction_history.setIsCryptoTransactionsVisible(true);\\n                  this.transaction_history.onMount();\\n                }\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context8.stop();\\n            }\\n          }\\n        }, _callee8, this);\\n      }));\\n\\n      function onMountCommon(_x4) {\\n        return _onMountCommon.apply(this, arguments);\\n      }\\n\\n      return onMountCommon;\\n    }()\\n  }, {\\n    key: \\\"setIsCryptoTransactionsVisible\\\",\\n    value: function setIsCryptoTransactionsVisible(is_visible) {\\n      this.is_crypto_transactions_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"setCashierTabIndex\\\",\\n    value: function setCashierTabIndex(index) {\\n      this.cashier_route_tab_index = index;\\n    }\\n  }, {\\n    key: \\\"willMountWithdraw\\\",\\n    value: function willMountWithdraw(verification_code) {\\n      if (verification_code) {\\n        this.clearVerification();\\n      }\\n    }\\n  }, {\\n    key: \\\"onMountWithdraw\\\",\\n    value: function () {\\n      var _onMountWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(verification_code) {\\n        var strRegExp, response_cashier;\\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\\n          while (1) {\\n            switch (_context9.prev = _context9.next) {\\n              case 0:\\n                this.setLoading(true);\\n                strRegExp = /^\\\\w{8,128}$/;\\n\\n                if (!strRegExp.test(verification_code)) {\\n                  _context9.next = 8;\\n                  break;\\n                }\\n\\n                _context9.next = 5;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +this.converter_from_amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                });\\n\\n              case 5:\\n                response_cashier = _context9.sent;\\n                _context9.next = 9;\\n                break;\\n\\n              case 8:\\n                response_cashier = {\\n                  error: {\\n                    code: 'InvalidToken',\\n                    message: 'Your token has expired or is invalid.'\\n                  }\\n                };\\n\\n              case 9:\\n                if (response_cashier.error.code === 'InvalidToken') {\\n                  this.handleCashierError(response_cashier.error);\\n                  this.setLoading(false);\\n                  this.setSessionTimeout(true);\\n                  this.clearTimeoutCashierUrl();\\n\\n                  if (verification_code) {\\n                    // clear verification code on error\\n                    this.clearVerification();\\n                  }\\n                } else {\\n                  this.setLoading(false);\\n                }\\n\\n                if (this.config.withdraw.error) {\\n                  this.setErrorMessage(this.config.withdraw.error, this.onMountWithdraw);\\n                }\\n\\n              case 11:\\n              case \\\"end\\\":\\n                return _context9.stop();\\n            }\\n          }\\n        }, _callee9, this);\\n      }));\\n\\n      function onMountWithdraw(_x5) {\\n        return _onMountWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountWithdraw;\\n    }()\\n  }, {\\n    key: \\\"onMountDeposit\\\",\\n    value: function () {\\n      var _onMountDeposit = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(verification_code) {\\n        var current_container, response_cashier;\\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\\n          while (1) {\\n            switch (_context10.prev = _context10.next) {\\n              case 0:\\n                current_container = this.active_container;\\n                this.setErrorMessage('');\\n                this.setContainerHeight(0);\\n                this.setLoading(true);\\n\\n                if (this.config[this.active_container].is_session_timeout) {\\n                  _context10.next = 7;\\n                  break;\\n                }\\n\\n                this.checkIframeLoaded();\\n                return _context10.abrupt(\\\"return\\\");\\n\\n              case 7:\\n                // if session has timed out reset everything\\n                this.setIframeUrl('');\\n\\n                if (!(this.active_container === this.config.withdraw.container && !verification_code || this.root_store.client.is_virtual)) {\\n                  _context10.next = 11;\\n                  break;\\n                }\\n\\n                this.setLoading(false); // if virtual, clear everything and don't proceed further\\n                // if no verification code, we should request again\\n\\n                return _context10.abrupt(\\\"return\\\");\\n\\n              case 11:\\n                _context10.next = 13;\\n                return this.WS.authorized.cashier(this.active_container, {\\n                  verification_code: verification_code\\n                });\\n\\n              case 13:\\n                response_cashier = _context10.sent;\\n\\n                if (!(current_container !== this.active_container)) {\\n                  _context10.next = 17;\\n                  break;\\n                }\\n\\n                this.setLoading(false);\\n                return _context10.abrupt(\\\"return\\\");\\n\\n              case 17:\\n                if (!response_cashier.error) {\\n                  _context10.next = 25;\\n                  break;\\n                }\\n\\n                this.handleCashierError(response_cashier.error);\\n                this.setLoading(false);\\n                this.setSessionTimeout(true);\\n                this.clearTimeoutCashierUrl();\\n\\n                if (verification_code) {\\n                  // clear verification code on error\\n                  this.clearVerification();\\n                }\\n\\n                _context10.next = 36;\\n                break;\\n\\n              case 25:\\n                if (!(0,shared_.isCryptocurrency)(this.root_store.client.currency)) {\\n                  _context10.next = 31;\\n                  break;\\n                }\\n\\n                this.setLoading(false);\\n                this.setContainerHeight('380');\\n                this.setIframeUrl(response_cashier.cashier); // crypto cashier can only be accessed once and the session expires\\n                // so no need to set timeouts to keep the session alive\\n\\n                _context10.next = 36;\\n                break;\\n\\n              case 31:\\n                _context10.next = 33;\\n                return this.checkIframeLoaded();\\n\\n              case 33:\\n                this.setIframeUrl(response_cashier.cashier);\\n                this.setSessionTimeout(false);\\n                this.setTimeoutCashierUrl();\\n\\n              case 36:\\n              case \\\"end\\\":\\n                return _context10.stop();\\n            }\\n          }\\n        }, _callee10, this);\\n      }));\\n\\n      function onMountDeposit(_x6) {\\n        return _onMountDeposit.apply(this, arguments);\\n      }\\n\\n      return onMountDeposit;\\n    }()\\n  }, {\\n    key: \\\"setNotificationCount\\\",\\n    value: function setNotificationCount(notification_count) {\\n      this.p2p_notification_count = notification_count;\\n    }\\n  }, {\\n    key: \\\"setIsP2pVisible\\\",\\n    value: function setIsP2pVisible(is_p2p_visible) {\\n      this.is_p2p_visible = is_p2p_visible;\\n\\n      if (!is_p2p_visible && window.location.pathname.endsWith(shared_.routes.cashier_p2p)) {\\n        var _this$account_prompt_;\\n\\n        this.root_store.common.routeTo((_this$account_prompt_ = this.account_prompt_dialog.last_location) !== null && _this$account_prompt_ !== void 0 ? _this$account_prompt_ : shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"onMount\\\",\\n    value: function () {\\n      var _onMount = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(verification_code) {\\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\\n          while (1) {\\n            switch (_context11.prev = _context11.next) {\\n              case 0:\\n                this.onRemount = this.onMount;\\n                _context11.next = 3;\\n                return this.onMountCommon();\\n\\n              case 3:\\n                if (!(this.containers.indexOf(this.active_container) === -1 && !this.root_store.client.is_switching && this.active_container !== this.config.payment_agent.container)) {\\n                  _context11.next = 5;\\n                  break;\\n                }\\n\\n                throw new Error('Cashier Store onMount requires a valid container name.');\\n\\n              case 5:\\n                this.onMountDeposit(verification_code);\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context11.stop();\\n            }\\n          }\\n        }, _callee11, this);\\n      }));\\n\\n      function onMount(_x7) {\\n        return _onMount.apply(this, arguments);\\n      }\\n\\n      return onMount;\\n    }()\\n  }, {\\n    key: \\\"is_cashier_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie;\\n\\n      if (!((_this$root_store$clie = this.root_store.client.account_status) !== null && _this$root_store$clie !== void 0 && _this$root_store$clie.status)) return false;\\n      var status = this.root_store.client.account_status.status;\\n      return status.some(function (status_name) {\\n        return status_name === 'cashier_locked';\\n      });\\n    }\\n  }, {\\n    key: \\\"is_system_maintenance\\\",\\n    get: function get() {\\n      var _this$root_store$clie2;\\n\\n      if (!((_this$root_store$clie2 = this.root_store.client.account_status) !== null && _this$root_store$clie2 !== void 0 && _this$root_store$clie2.cashier_validation)) return false;\\n      var cashier_validation = this.root_store.client.account_status.cashier_validation;\\n      return cashier_validation.some(function (validation) {\\n        return validation === 'system_maintenance';\\n      });\\n    }\\n  }, {\\n    key: \\\"is_deposit_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie3 = this.root_store.client,\\n          is_authentication_needed = _this$root_store$clie3.is_authentication_needed,\\n          is_tnc_needed = _this$root_store$clie3.is_tnc_needed,\\n          is_financial_account = _this$root_store$clie3.is_financial_account,\\n          is_financial_information_incomplete = _this$root_store$clie3.is_financial_information_incomplete,\\n          is_trading_experience_incomplete = _this$root_store$clie3.is_trading_experience_incomplete,\\n          account_status = _this$root_store$clie3.account_status,\\n          is_eu = _this$root_store$clie3.is_eu,\\n          mt5_login_list = _this$root_store$clie3.mt5_login_list,\\n          is_deposit_lock = _this$root_store$clie3.is_deposit_lock;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.status)) return false;\\n      var need_authentication = this.config.deposit.error.is_ask_authentication || is_authentication_needed && is_eu;\\n      var need_financial_assessment = is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete); // CR can deposit without accepting latest tnc except those with Financial STP\\n\\n      var need_tnc = (is_eu || mt5_login_list.some(function (item) {\\n        return item.account_type === 'real' && item.sub_account_type === 'financial_stp';\\n      })) && is_tnc_needed;\\n      return is_deposit_lock || need_authentication || need_tnc || need_financial_assessment || this.config.deposit.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"is_withdrawal_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie4;\\n\\n      if (!((_this$root_store$clie4 = this.root_store.client.account_status) !== null && _this$root_store$clie4 !== void 0 && _this$root_store$clie4.status)) return false;\\n      var authentication = this.root_store.client.account_status.authentication;\\n      var need_poi = authentication.needs_verification.includes('identity');\\n      var need_authentication = this.config.withdraw.error.is_ask_authentication && need_poi;\\n      return this.root_store.client.is_withdrawal_lock || need_authentication || this.config.withdraw.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"is_transfer_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie5 = this.root_store.client,\\n          is_financial_account = _this$root_store$clie5.is_financial_account,\\n          is_financial_information_incomplete = _this$root_store$clie5.is_financial_information_incomplete,\\n          is_trading_experience_incomplete = _this$root_store$clie5.is_trading_experience_incomplete,\\n          account_status = _this$root_store$clie5.account_status;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.status)) return false;\\n      var need_financial_assessment = is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\\n      return need_financial_assessment && this.config.account_transfer.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"setMaxWithdrawAmount\\\",\\n    value: function setMaxWithdrawAmount(amount) {\\n      this.max_withdraw_amount = amount;\\n    }\\n  }, {\\n    key: \\\"check10kLimit\\\",\\n    value: function () {\\n      var _check10kLimit = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\\n        var _yield$this$root_stor, _yield$this$root_stor2;\\n\\n        var remainder, min_withdrawal, is_limit_reached;\\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\\n          while (1) {\\n            switch (_context12.prev = _context12.next) {\\n              case 0:\\n                _context12.next = 2;\\n                return this.root_store.client.getLimits();\\n\\n              case 2:\\n                _context12.t1 = _yield$this$root_stor = _context12.sent;\\n                _context12.t0 = _context12.t1 === null;\\n\\n                if (_context12.t0) {\\n                  _context12.next = 6;\\n                  break;\\n                }\\n\\n                _context12.t0 = _yield$this$root_stor === void 0;\\n\\n              case 6:\\n                if (!_context12.t0) {\\n                  _context12.next = 10;\\n                  break;\\n                }\\n\\n                _context12.t2 = void 0;\\n                _context12.next = 11;\\n                break;\\n\\n              case 10:\\n                _context12.t2 = (_yield$this$root_stor2 = _yield$this$root_stor.get_limits) === null || _yield$this$root_stor2 === void 0 ? void 0 : _yield$this$root_stor2.remainder;\\n\\n              case 11:\\n                remainder = _context12.t2;\\n                this.setMaxWithdrawAmount(remainder);\\n                min_withdrawal = (0,shared_.getMinWithdrawal)(this.root_store.client.currency);\\n                is_limit_reached = !!(typeof remainder !== 'undefined' && +remainder < min_withdrawal);\\n                this.set10kLimitation(is_limit_reached);\\n\\n              case 16:\\n              case \\\"end\\\":\\n                return _context12.stop();\\n            }\\n          }\\n        }, _callee12, this);\\n      }));\\n\\n      function check10kLimit() {\\n        return _check10kLimit.apply(this, arguments);\\n      }\\n\\n      return check10kLimit;\\n    }()\\n  }, {\\n    key: \\\"set10kLimitation\\\",\\n    value: function set10kLimitation(is_limit_reached) {\\n      this.is_10k_withdrawal_limit_reached = is_limit_reached;\\n    }\\n  }, {\\n    key: \\\"checkIframeLoaded\\\",\\n    value: function () {\\n      var _checkIframeLoaded = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\\n          while (1) {\\n            switch (_context13.prev = _context13.next) {\\n              case 0:\\n                this.removeOnIframeLoaded();\\n\\n                this.config[this.active_container].onIframeLoaded = function (e) {\\n                  if (/cashier|doughflow/.test(e.origin)) {\\n                    this.setLoading(false); // set the height of the container after content loads so that the\\n                    // loading bar stays vertically centered until the end\\n\\n                    if (this.root_store.ui.is_mobile) {\\n                      this.setContainerHeight(window.innerHeight - 100);\\n                    } else {\\n                      this.setContainerHeight(window.innerHeight - 190);\\n                    } // do not remove the listener\\n                    // on every iframe screen change we need to update the height to more/less to match the new content\\n\\n                  }\\n                }.bind(this);\\n\\n                window.addEventListener('message', this.config[this.active_container].onIframeLoaded, false);\\n\\n              case 3:\\n              case \\\"end\\\":\\n                return _context13.stop();\\n            }\\n          }\\n        }, _callee13, this);\\n      }));\\n\\n      function checkIframeLoaded() {\\n        return _checkIframeLoaded.apply(this, arguments);\\n      }\\n\\n      return checkIframeLoaded;\\n    }()\\n  }, {\\n    key: \\\"removeOnIframeLoaded\\\",\\n    value: function removeOnIframeLoaded() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n\\n      if (this.config[container].onIframeLoaded) {\\n        window.removeEventListener('message', this.config[container].onIframeLoaded, false);\\n        this.config[container].onIframeLoaded = '';\\n      }\\n    }\\n  }, {\\n    key: \\\"setIframeUrl\\\",\\n    value: function setIframeUrl(url) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n\\n      if (url) {\\n        this.config[container].iframe_url = \\\"\\\".concat(url, \\\"&theme=\\\").concat(this.root_store.ui.is_dark_mode_on ? 'dark' : 'light'); // after we set iframe url we can clear verification code\\n\\n        this.root_store.client.setVerificationCode('', this.map_action[container]);\\n      } else {\\n        this.config[container].iframe_url = url;\\n      }\\n    }\\n  }, {\\n    key: \\\"setContainerHeight\\\",\\n    value: function setContainerHeight(height) {\\n      this.config[this.active_container].iframe_height = height;\\n    }\\n  }, {\\n    key: \\\"setErrorMessage\\\",\\n    value: function setErrorMessage(error, onClickButton, is_show_full_page, is_verification_error) {\\n      // for errors that need to show a button, reset the form\\n      var error_object = cashier_store_objectSpread({\\n        onClickButton: onClickButton,\\n        code: error.code,\\n        message: error.message,\\n        is_show_full_page: is_show_full_page || /InvalidToken|WrongResponse/.test(error.code)\\n      }, (0,shared_.getPropertyValue)(error, ['details', 'fields']) && {\\n        fields: error.details.fields\\n      });\\n\\n      if (is_verification_error && this.config[this.active_container].verification) {\\n        this.config[this.active_container].verification.error = error_object;\\n      } else {\\n        this.config[this.active_container].error = error_object;\\n      }\\n    }\\n  }, {\\n    key: \\\"handleCashierError\\\",\\n    value: function handleCashierError(error) {\\n      switch (error.code) {\\n        case 'ASK_TNC_APPROVAL':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_FIX_DETAILS':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_UK_FUNDS_PROTECTION':\\n          this.config[this.active_container].error = {\\n            is_ask_uk_funds_protection: true\\n          };\\n          break;\\n\\n        case 'ASK_SELF_EXCLUSION_MAX_TURNOVER_SET':\\n          this.config[this.active_container].error = {\\n            is_self_exclusion_max_turnover_set: true\\n          };\\n          break;\\n\\n        case 'ASK_AUTHENTICATE':\\n        case 'ASK_AGE_VERIFICATION':\\n          this.config[this.active_container].error = {\\n            is_ask_authentication: true\\n          };\\n          break;\\n\\n        case 'ASK_FINANCIAL_RISK_APPROVAL':\\n          this.config[this.active_container].error = {\\n            is_ask_financial_risk_approval: true\\n          };\\n          break;\\n\\n        default:\\n          this.config[this.active_container].error = {\\n            is_ask_uk_funds_protection: false,\\n            is_self_exclusion_max_turnover_set: false,\\n            is_ask_authentication: false,\\n            is_ask_financial_risk_approval: false\\n          };\\n          this.setErrorMessage(error);\\n      }\\n    }\\n  }, {\\n    key: \\\"setErrorConfig\\\",\\n    value: function setErrorConfig(config_name, value) {\\n      this.config[this.active_container].error = cashier_store_defineProperty({}, config_name, value);\\n    }\\n  }, {\\n    key: \\\"submitFundsProtection\\\",\\n    value: function submitFundsProtection() {\\n      var _this5 = this;\\n\\n      this.WS.send({\\n        ukgc_funds_protection: 1,\\n        tnc_approval: 1\\n      }).then(function (response) {\\n        if (response.error) {\\n          _this5.setErrorConfig('message', response.error.message);\\n        } else {\\n          location.reload();\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"setLoading\\\",\\n    value: function setLoading(is_loading) {\\n      this.is_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setSessionTimeout\\\",\\n    value: function setSessionTimeout(is_session_time_out) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].is_session_timeout = is_session_time_out;\\n\\n      if (is_session_time_out) {\\n        this.removeOnIframeLoaded(container);\\n      }\\n    }\\n  }, {\\n    key: \\\"setVerificationButtonClicked\\\",\\n    value: function setVerificationButtonClicked(is_button_clicked) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.is_button_clicked = is_button_clicked;\\n    }\\n  }, {\\n    key: \\\"setVerificationEmailSent\\\",\\n    value: function setVerificationEmailSent(is_email_sent) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.is_email_sent = is_email_sent;\\n    }\\n  }, {\\n    key: \\\"setVerificationResendClicked\\\",\\n    value: function setVerificationResendClicked(is_resend_clicked) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.is_resend_clicked = is_resend_clicked;\\n    }\\n  }, {\\n    key: \\\"setVerificationResendTimeout\\\",\\n    value: function setVerificationResendTimeout(resend_timeout) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.resend_timeout = resend_timeout;\\n    }\\n  }, {\\n    key: \\\"clearTimeoutCashierUrl\\\",\\n    value: function clearTimeoutCashierUrl() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n\\n      if (this.config[container].timeout_session) {\\n        clearTimeout(this.config[container].timeout_session);\\n      }\\n    } // cashier session expires after one minute\\n    // so we should resend the request for container (deposit|withdraw) url on next mount\\n\\n  }, {\\n    key: \\\"setTimeoutCashierUrl\\\",\\n    value: function setTimeoutCashierUrl() {\\n      var _this6 = this;\\n\\n      this.clearTimeoutCashierUrl();\\n      this.config[this.active_container].timeout_session = setTimeout(function () {\\n        _this6.setSessionTimeout(true);\\n      }, 60000);\\n    }\\n  }, {\\n    key: \\\"clearTimeoutVerification\\\",\\n    value: function clearTimeoutVerification() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n\\n      if (this.config[container].verification.timeout_button) {\\n        clearTimeout(this.config[container].verification.timeout_button);\\n      }\\n    } // verification token expires after one hour\\n    // so we should show the verification request button again after that\\n\\n  }, {\\n    key: \\\"setTimeoutVerification\\\",\\n    value: function setTimeoutVerification() {\\n      var _this7 = this;\\n\\n      this.clearTimeoutVerification();\\n      this.config[this.active_container].verification.timeout_button = setTimeout(function () {\\n        _this7.clearVerification();\\n      }, 3600000);\\n    }\\n  }, {\\n    key: \\\"sendVerificationEmail\\\",\\n    value: function () {\\n      var _sendVerificationEmail = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\\n        var _this8 = this;\\n\\n        var withdrawal_type, response_verify_email;\\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\\n          while (1) {\\n            switch (_context14.prev = _context14.next) {\\n              case 0:\\n                if (!(this.config[this.active_container].verification.is_button_clicked || !this.root_store.client.email)) {\\n                  _context14.next = 2;\\n                  break;\\n                }\\n\\n                return _context14.abrupt(\\\"return\\\");\\n\\n              case 2:\\n                this.setErrorMessage('');\\n                this.setVerificationButtonClicked(true);\\n                withdrawal_type = \\\"payment\\\".concat(this.active_container === this.config.payment_agent.container ? 'agent' : '', \\\"_withdraw\\\");\\n                _context14.next = 7;\\n                return this.WS.verifyEmail(this.root_store.client.email, withdrawal_type);\\n\\n              case 7:\\n                response_verify_email = _context14.sent;\\n\\n                if (response_verify_email.error) {\\n                  this.clearVerification();\\n\\n                  if (response_verify_email.error.code === 'PaymentAgentWithdrawError') {\\n                    this.setErrorMessage(response_verify_email.error, this.resetPaymentAgent, null, true);\\n                  } else {\\n                    this.setErrorMessage(response_verify_email.error, function () {\\n                      _this8.setErrorMessage('', null, null, true);\\n                    }, null, true);\\n                  }\\n                } else {\\n                  this.setVerificationEmailSent(true);\\n                  this.setTimeoutVerification();\\n                }\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context14.stop();\\n            }\\n          }\\n        }, _callee14, this);\\n      }));\\n\\n      function sendVerificationEmail() {\\n        return _sendVerificationEmail.apply(this, arguments);\\n      }\\n\\n      return sendVerificationEmail;\\n    }()\\n  }, {\\n    key: \\\"resendVerificationEmail\\\",\\n    value: function resendVerificationEmail() {\\n      // don't allow clicking while ongoing timeout\\n      if (this.config[this.active_container].verification.resend_timeout < 60) {\\n        return;\\n      }\\n\\n      this.setVerificationButtonClicked(false);\\n      this.setCountDownResendVerification();\\n      this.sendVerificationEmail();\\n    }\\n  }, {\\n    key: \\\"setCountDownResendVerification\\\",\\n    value: function setCountDownResendVerification() {\\n      var _this9 = this;\\n\\n      this.setVerificationResendTimeout(this.config[this.active_container].verification.resend_timeout - 1);\\n      var resend_interval = setInterval(function () {\\n        if (!_this9.config[_this9.active_container] || !_this9.config[_this9.active_container].verification) {\\n          clearInterval(resend_interval);\\n          return;\\n        }\\n\\n        if (_this9.config[_this9.active_container].verification.resend_timeout === 1) {\\n          _this9.setVerificationResendTimeout(60);\\n\\n          clearInterval(resend_interval);\\n        } else {\\n          _this9.setVerificationResendTimeout(_this9.config[_this9.active_container].verification.resend_timeout - 1);\\n        }\\n      }, 1000);\\n    }\\n  }, {\\n    key: \\\"clearVerification\\\",\\n    value: function clearVerification() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n      this.clearTimeoutVerification(container);\\n      this.setVerificationButtonClicked(false, container);\\n      this.setVerificationEmailSent(false, container);\\n      this.setVerificationResendClicked(false, container);\\n      this.setVerificationResendTimeout(60, container);\\n      this.setErrorMessage('', null, null, true);\\n      this.root_store.client.setVerificationCode('', this.map_action[container]);\\n    }\\n  }, {\\n    key: \\\"setIsTimerVisible\\\",\\n    value: function setIsTimerVisible(is_timer_visible) {\\n      this.is_timer_visible = is_timer_visible;\\n    }\\n  }, {\\n    key: \\\"resetTimer\\\",\\n    value: function resetTimer() {\\n      this.setIsTimerVisible(false);\\n    }\\n  }, {\\n    key: \\\"getExchangeRate\\\",\\n    value: function () {\\n      var _getExchangeRate = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(from_currency, to_currency) {\\n        var _yield$this$WS$send, exchange_rates;\\n\\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\\n          while (1) {\\n            switch (_context15.prev = _context15.next) {\\n              case 0:\\n                _context15.next = 2;\\n                return this.WS.send({\\n                  exchange_rates: 1,\\n                  base_currency: from_currency\\n                });\\n\\n              case 2:\\n                _yield$this$WS$send = _context15.sent;\\n                exchange_rates = _yield$this$WS$send.exchange_rates;\\n                return _context15.abrupt(\\\"return\\\", exchange_rates.rates[to_currency]);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context15.stop();\\n            }\\n          }\\n        }, _callee15, this);\\n      }));\\n\\n      function getExchangeRate(_x8, _x9) {\\n        return _getExchangeRate.apply(this, arguments);\\n      }\\n\\n      return getExchangeRate;\\n    }()\\n  }, {\\n    key: \\\"setActiveTab\\\",\\n    value: function setActiveTab(container) {\\n      this.active_container = container;\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentList\\\",\\n    value: function () {\\n      var _onMountPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {\\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\\n          while (1) {\\n            switch (_context16.prev = _context16.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentList;\\n                _context16.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                this.setLoading(false);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context16.stop();\\n            }\\n          }\\n        }, _callee16, this);\\n      }));\\n\\n      function onMountPaymentAgentList() {\\n        return _onMountPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"getPaymentAgentList\\\",\\n    value: function () {\\n      var _getPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\\n          while (1) {\\n            switch (_context17.prev = _context17.next) {\\n              case 0:\\n                if (!this.config.payment_agent.list.length) {\\n                  _context17.next = 2;\\n                  break;\\n                }\\n\\n                return _context17.abrupt(\\\"return\\\", this.WS.wait('paymentagent_list'));\\n\\n              case 2:\\n                _context17.next = 4;\\n                return this.WS.wait('get_settings');\\n\\n              case 4:\\n                return _context17.abrupt(\\\"return\\\", this.WS.authorized.paymentAgentList(this.root_store.client.residence, this.root_store.client.currency));\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context17.stop();\\n            }\\n          }\\n        }, _callee17, this);\\n      }));\\n\\n      function getPaymentAgentList() {\\n        return _getPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return getPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"getAllPaymentAgentList\\\",\\n    value: function () {\\n      var _getAllPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {\\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\\n          while (1) {\\n            switch (_context18.prev = _context18.next) {\\n              case 0:\\n                _context18.next = 2;\\n                return this.WS.wait('get_settings');\\n\\n              case 2:\\n                return _context18.abrupt(\\\"return\\\", this.WS.allPaymentAgentList(this.root_store.client.residence));\\n\\n              case 3:\\n              case \\\"end\\\":\\n                return _context18.stop();\\n            }\\n          }\\n        }, _callee18, this);\\n      }));\\n\\n      function getAllPaymentAgentList() {\\n        return _getAllPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return getAllPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"setAllPaymentAgentList\\\",\\n    value: function setAllPaymentAgentList(list) {\\n      this.all_payment_agent_list = list;\\n    }\\n  }, {\\n    key: \\\"getPaymentAgentDetails\\\",\\n    value: function () {\\n      var _getPaymentAgentDetails = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {\\n        var _yield$this$WS$author, paymentagent_details;\\n\\n        return regeneratorRuntime.wrap(function _callee19$(_context19) {\\n          while (1) {\\n            switch (_context19.prev = _context19.next) {\\n              case 0:\\n                _context19.next = 2;\\n                return this.WS.authorized.paymentAgentDetails();\\n\\n              case 2:\\n                _yield$this$WS$author = _context19.sent;\\n                paymentagent_details = _yield$this$WS$author.paymentagent_details;\\n                return _context19.abrupt(\\\"return\\\", paymentagent_details);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context19.stop();\\n            }\\n          }\\n        }, _callee19, this);\\n      }));\\n\\n      function getPaymentAgentDetails() {\\n        return _getPaymentAgentDetails.apply(this, arguments);\\n      }\\n\\n      return getPaymentAgentDetails;\\n    }()\\n  }, {\\n    key: \\\"addSupportedBank\\\",\\n    value: function addSupportedBank(bank) {\\n      var supported_bank_exists = this.config.payment_agent.supported_banks.find(function (supported_bank) {\\n        return supported_bank.value === bank.toLowerCase();\\n      });\\n\\n      if (!supported_bank_exists) {\\n        this.config.payment_agent.supported_banks.push({\\n          text: bank,\\n          value: bank.toLowerCase()\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"sortSupportedBanks\\\",\\n    value: function sortSupportedBanks() {\\n      // sort supported banks alphabetically by value, the option 'All payment agents' with value 0 should be on top\\n      this.config.payment_agent.supported_banks.replace(this.config.payment_agent.supported_banks.slice().sort(function (a, b) {\\n        if (a.value < b.value) {\\n          return -1;\\n        }\\n\\n        if (a.value > b.value) {\\n          return 1;\\n        }\\n\\n        return 0;\\n      }));\\n    }\\n  }, {\\n    key: \\\"setPaymentAgentList\\\",\\n    value: function () {\\n      var _setPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(pa_list) {\\n        var _this10 = this;\\n\\n        var payment_agent_list;\\n        return regeneratorRuntime.wrap(function _callee20$(_context20) {\\n          while (1) {\\n            switch (_context20.prev = _context20.next) {\\n              case 0:\\n                _context20.t0 = pa_list;\\n\\n                if (_context20.t0) {\\n                  _context20.next = 5;\\n                  break;\\n                }\\n\\n                _context20.next = 4;\\n                return this.getPaymentAgentList();\\n\\n              case 4:\\n                _context20.t0 = _context20.sent;\\n\\n              case 5:\\n                payment_agent_list = _context20.t0;\\n\\n                if (!(!payment_agent_list || !payment_agent_list.paymentagent_list)) {\\n                  _context20.next = 8;\\n                  break;\\n                }\\n\\n                return _context20.abrupt(\\\"return\\\");\\n\\n              case 8:\\n                // TODO: Once telephone, url and supported_banks removed from paymentagent_list.list we can remove them and just use the plural ones\\n                payment_agent_list.paymentagent_list.list.forEach(function (payment_agent) {\\n                  _this10.config.payment_agent.list.push({\\n                    email: payment_agent.email,\\n                    phones: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.phone_numbers) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.telephone),\\n                    name: payment_agent.name,\\n                    supported_banks: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.supported_payment_methods) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.supported_banks),\\n                    urls: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.urls) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.url)\\n                  });\\n\\n                  if (payment_agent.supported_banks) {\\n                    var supported_banks_array = payment_agent !== null && payment_agent !== void 0 && payment_agent.supported_payment_methods ? payment_agent.supported_payment_methods.map(function (bank) {\\n                      return bank.payment_method;\\n                    }) : payment_agent.supported_banks.split(',');\\n                    supported_banks_array.forEach(function (bank) {\\n                      _this10.addSupportedBank(bank);\\n                    });\\n                  }\\n                });\\n                this.sortSupportedBanks();\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context20.stop();\\n            }\\n          }\\n        }, _callee20, this);\\n      }));\\n\\n      function setPaymentAgentList(_x10) {\\n        return _setPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return setPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"filterPaymentAgentList\\\",\\n    value: function filterPaymentAgentList(bank) {\\n      var _this11 = this;\\n\\n      if (bank) {\\n        this.config.payment_agent.filtered_list = [];\\n        this.config.payment_agent.list.forEach(function (payment_agent) {\\n          if (payment_agent.supported_banks && payment_agent.supported_banks.toLowerCase().split(',').indexOf(bank) !== -1) {\\n            _this11.config.payment_agent.filtered_list.push(payment_agent);\\n          }\\n        });\\n      } else {\\n        this.config.payment_agent.filtered_list = this.config.payment_agent.list;\\n      }\\n\\n      if (!this.is_payment_agent_visible && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n        this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"onChangePaymentMethod\\\",\\n    value: function onChangePaymentMethod(_ref11) {\\n      var target = _ref11.target;\\n      var value = target.value === '0' ? parseInt(target.value) : target.value;\\n      this.config.payment_agent.selected_bank = value;\\n      this.filterPaymentAgentList(value);\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _onMountPaymentAgentWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {\\n        var _this12 = this;\\n\\n        var payment_agent_list;\\n        return regeneratorRuntime.wrap(function _callee21$(_context21) {\\n          while (1) {\\n            switch (_context21.prev = _context21.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentWithdraw;\\n                _context21.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                this.setIsWithdraw(true);\\n                this.setIsWithdrawSuccessful(false);\\n                this.setReceipt({});\\n\\n                if (this.config.payment_agent.agents.length) {\\n                  _context21.next = 16;\\n                  break;\\n                }\\n\\n                _context21.next = 10;\\n                return this.getPaymentAgentList();\\n\\n              case 10:\\n                payment_agent_list = _context21.sent;\\n                payment_agent_list.paymentagent_list.list.forEach(function (payment_agent) {\\n                  _this12.addPaymentAgent(payment_agent);\\n                });\\n\\n                if (!payment_agent_list.paymentagent_list.list.length && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n                  this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n                this.setLoading(false);\\n                _context21.next = 17;\\n                break;\\n\\n              case 16:\\n                this.setLoading(false);\\n\\n              case 17:\\n              case \\\"end\\\":\\n                return _context21.stop();\\n            }\\n          }\\n        }, _callee21, this);\\n      }));\\n\\n      function onMountPaymentAgentWithdraw() {\\n        return _onMountPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"setIsWithdraw\\\",\\n    value: function setIsWithdraw() {\\n      var is_withdraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.config.payment_agent.is_withdraw;\\n      this.config.payment_agent.is_withdraw = is_withdraw;\\n    }\\n  }, {\\n    key: \\\"setIsTryWithdrawSuccessful\\\",\\n    value: function setIsTryWithdrawSuccessful(is_try_withdraw_successful) {\\n      this.setErrorMessage('');\\n      this.config.payment_agent.is_try_withdraw_successful = is_try_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setIsWithdrawSuccessful\\\",\\n    value: function setIsWithdrawSuccessful(is_withdraw_successful) {\\n      this.config.payment_agent.is_withdraw_successful = is_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setConfirmation\\\",\\n    value: function setConfirmation(_ref12) {\\n      var amount = _ref12.amount,\\n          currency = _ref12.currency,\\n          loginid = _ref12.loginid,\\n          payment_agent_name = _ref12.payment_agent_name;\\n      this.config.payment_agent.confirm = {\\n        amount: amount,\\n        currency: currency,\\n        loginid: loginid,\\n        payment_agent_name: payment_agent_name\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceipt\\\",\\n    value: function setReceipt(_ref13) {\\n      var amount_transferred = _ref13.amount_transferred,\\n          payment_agent_email = _ref13.payment_agent_email,\\n          payment_agent_id = _ref13.payment_agent_id,\\n          payment_agent_name = _ref13.payment_agent_name,\\n          payment_agent_phone = _ref13.payment_agent_phone,\\n          payment_agent_url = _ref13.payment_agent_url;\\n      this.config.payment_agent.receipt = {\\n        amount_transferred: amount_transferred,\\n        payment_agent_email: payment_agent_email,\\n        payment_agent_id: payment_agent_id,\\n        payment_agent_name: payment_agent_name,\\n        payment_agent_phone: payment_agent_phone,\\n        payment_agent_url: payment_agent_url\\n      };\\n    }\\n  }, {\\n    key: \\\"addPaymentAgent\\\",\\n    value: function addPaymentAgent(payment_agent) {\\n      this.config.payment_agent.agents.push({\\n        text: payment_agent.name,\\n        value: payment_agent.paymentagent_loginid,\\n        max_withdrawal: payment_agent.max_withdrawal,\\n        min_withdrawal: payment_agent.min_withdrawal,\\n        email: payment_agent.email,\\n        phone: payment_agent.telephone,\\n        url: payment_agent.url\\n      });\\n    }\\n  }, {\\n    key: \\\"requestTryPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestTryPaymentAgentWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(_ref14) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee22$(_context22) {\\n          while (1) {\\n            switch (_context22.prev = _context22.next) {\\n              case 0:\\n                loginid = _ref14.loginid, currency = _ref14.currency, amount = _ref14.amount, verification_code = _ref14.verification_code;\\n                this.setErrorMessage('');\\n                _context22.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context22.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 2) {\\n                  selected_agent = this.config.payment_agent.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setConfirmation(cashier_store_objectSpread({\\n                    amount: amount,\\n                    currency: currency,\\n                    loginid: loginid\\n                  }, selected_agent && {\\n                    payment_agent_name: selected_agent.text\\n                  }));\\n                  this.setIsTryWithdrawSuccessful(true);\\n                } else {\\n                  this.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context22.stop();\\n            }\\n          }\\n        }, _callee22, this);\\n      }));\\n\\n      function requestTryPaymentAgentWithdraw(_x11) {\\n        return _requestTryPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestTryPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"requestPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestPaymentAgentWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(_ref15) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee23$(_context23) {\\n          while (1) {\\n            switch (_context23.prev = _context23.next) {\\n              case 0:\\n                loginid = _ref15.loginid, currency = _ref15.currency, amount = _ref15.amount, verification_code = _ref15.verification_code;\\n                this.setErrorMessage('');\\n                _context23.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context23.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 1) {\\n                  selected_agent = this.config.payment_agent.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setReceipt(cashier_store_objectSpread(cashier_store_objectSpread({\\n                    amount_transferred: (0,shared_.formatMoney)(currency, amount, true)\\n                  }, selected_agent && {\\n                    payment_agent_email: selected_agent.email,\\n                    payment_agent_id: selected_agent.value,\\n                    payment_agent_name: selected_agent.text,\\n                    payment_agent_phone: selected_agent.phone,\\n                    payment_agent_url: selected_agent.url\\n                  }), !selected_agent && {\\n                    payment_agent_id: loginid\\n                  }));\\n                  this.setIsWithdrawSuccessful(true);\\n                  this.setIsTryWithdrawSuccessful(false);\\n                  this.setConfirmation({});\\n                } else {\\n                  this.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context23.stop();\\n            }\\n          }\\n        }, _callee23, this);\\n      }));\\n\\n      function requestPaymentAgentWithdraw(_x12) {\\n        return _requestPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"onMountAccountTransfer\\\",\\n    value: // possible transfers:\\n    // 1. fiat to crypto & vice versa\\n    // 2. fiat to mt & vice versa\\n    // 3. crypto to mt & vice versa\\n    function () {\\n      var _onMountAccountTransfer = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {\\n        var _this13 = this;\\n\\n        var has_updated_account_balance, _this$config$account_, transfer_between_accounts, cfd_transfer_to_login_id, obj_values;\\n\\n        return regeneratorRuntime.wrap(function _callee24$(_context24) {\\n          while (1) {\\n            switch (_context24.prev = _context24.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountAccountTransfer;\\n                _context24.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                _context24.next = 6;\\n                return this.WS.wait('website_status');\\n\\n              case 6:\\n                // check if some balance update has come in since the last mount\\n                has_updated_account_balance = this.config.account_transfer.has_no_accounts_balance && Object.keys(this.root_store.client.active_accounts).find(function (account) {\\n                  return !_this13.root_store.client.active_accounts[account].is_virtual && _this13.root_store.client.active_accounts[account].balance;\\n                });\\n\\n                if (has_updated_account_balance) {\\n                  this.setHasNoAccountsBalance(false);\\n                } // various issues happen when loading from cache\\n                // e.g. new account may have been created, transfer may have been done elsewhere, etc\\n                // so on load of this page just call it again\\n\\n\\n                if (!this.root_store.client.is_logged_in) {\\n                  _context24.next = 24;\\n                  break;\\n                }\\n\\n                _context24.next = 11;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 11:\\n                transfer_between_accounts = _context24.sent;\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context24.next = 16;\\n                  break;\\n                }\\n\\n                this.setErrorMessage(transfer_between_accounts.error, this.onMountAccountTransfer);\\n                this.setLoading(false);\\n                return _context24.abrupt(\\\"return\\\");\\n\\n              case 16:\\n                if (this.canDoAccountTransfer(transfer_between_accounts.accounts)) {\\n                  _context24.next = 18;\\n                  break;\\n                }\\n\\n                return _context24.abrupt(\\\"return\\\");\\n\\n              case 18:\\n                _context24.next = 20;\\n                return this.sortAccountsTransfer(transfer_between_accounts);\\n\\n              case 20:\\n                this.setTransferFee();\\n                this.setMinimumFee();\\n                this.setTransferLimit();\\n\\n                if (((_this$config$account_ = this.config.account_transfer.accounts_list) === null || _this$config$account_ === void 0 ? void 0 : _this$config$account_.length) > 0) {\\n                  cfd_transfer_to_login_id = sessionStorage.getItem('cfd_transfer_to_login_id');\\n                  sessionStorage.removeItem('cfd_transfer_to_login_id');\\n                  obj_values = this.config.account_transfer.accounts_list.find(function (account) {\\n                    return account.value === cfd_transfer_to_login_id;\\n                  });\\n\\n                  if (obj_values) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    }\\n\\n                    this.setSelectedTo(obj_values);\\n                  }\\n                }\\n\\n              case 24:\\n                this.setLoading(false);\\n\\n              case 25:\\n              case \\\"end\\\":\\n                return _context24.stop();\\n            }\\n          }\\n        }, _callee24, this);\\n      }));\\n\\n      function onMountAccountTransfer() {\\n        return _onMountAccountTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountAccountTransfer;\\n    }()\\n  }, {\\n    key: \\\"canDoAccountTransfer\\\",\\n    value: function canDoAccountTransfer(accounts) {\\n      var can_transfer = true; // should have at least one account with balance\\n\\n      if (!accounts.find(function (account) {\\n        return +account.balance > 0;\\n      })) {\\n        can_transfer = false;\\n        this.setHasNoAccountsBalance(true);\\n      } else {\\n        this.setHasNoAccountsBalance(false);\\n      } // should have at least two real-money accounts\\n\\n\\n      if (accounts.length <= 1) {\\n        can_transfer = false;\\n        this.setHasNoAccount(true);\\n      } else {\\n        this.setHasNoAccount(false);\\n      }\\n\\n      if (!can_transfer) {\\n        this.setLoading(false);\\n      }\\n\\n      return can_transfer;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccountsBalance\\\",\\n    value: function setHasNoAccountsBalance(has_no_accounts_balance) {\\n      this.config.account_transfer.has_no_accounts_balance = has_no_accounts_balance;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccount\\\",\\n    value: function setHasNoAccount(has_no_account) {\\n      this.config.account_transfer.has_no_account = has_no_account;\\n    }\\n  }, {\\n    key: \\\"setTransferFee\\\",\\n    value: function setTransferFee() {\\n      var transfer_fee = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.config.account_transfer.selected_from.currency, 'transfer_between_accounts', 'fees', this.config.account_transfer.selected_to.currency]);\\n      this.config.account_transfer.transfer_fee = Number(transfer_fee || 0);\\n    }\\n  }, {\\n    key: \\\"setMinimumFee\\\",\\n    value: function setMinimumFee() {\\n      var decimals = (0,shared_.getDecimalPlaces)(this.config.account_transfer.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.config.account_transfer.minimum_fee = (1 / Math.pow(10, decimals)).toFixed(decimals);\\n    }\\n  }, {\\n    key: \\\"setTransferLimit\\\",\\n    value: function setTransferLimit() {\\n      var is_mt_transfer = this.config.account_transfer.selected_from.is_mt || this.config.account_transfer.selected_to.is_mt;\\n      var is_dxtrade_transfer = this.config.account_transfer.selected_from.is_dxtrade || this.config.account_transfer.selected_to.is_dxtrade;\\n      var limits_key;\\n\\n      if (is_mt_transfer) {\\n        limits_key = 'limits_mt5';\\n      } else if (is_dxtrade_transfer) {\\n        limits_key = 'limits_dxtrade';\\n      } else {\\n        limits_key = 'limits';\\n      }\\n\\n      var transfer_limit = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.config.account_transfer.selected_from.currency, 'transfer_between_accounts', limits_key]);\\n      var balance = this.config.account_transfer.selected_from.balance;\\n      var decimal_places = (0,shared_.getDecimalPlaces)(this.config.account_transfer.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.config.account_transfer.transfer_limit = {\\n        max: !(transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.max) || +balance >= ((transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min) || 0) && +balance <= (transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max) ? balance : transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max.toFixed(decimal_places),\\n        min: transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.min ? (+(transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min)).toFixed(decimal_places) : null\\n      };\\n    }\\n  }, {\\n    key: \\\"sortAccountsTransfer\\\",\\n    value: function () {\\n      var _sortAccountsTransfer = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(response_accounts) {\\n        var _yield$this$WS$storag,\\n            _yield$this$WS$tradin,\\n            _this14 = this;\\n\\n        var transfer_between_accounts, mt5_login_list, dxtrade_accounts_list, accounts, arr_accounts;\\n        return regeneratorRuntime.wrap(function _callee25$(_context25) {\\n          while (1) {\\n            switch (_context25.prev = _context25.next) {\\n              case 0:\\n                _context25.t0 = response_accounts;\\n\\n                if (_context25.t0) {\\n                  _context25.next = 5;\\n                  break;\\n                }\\n\\n                _context25.next = 4;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 4:\\n                _context25.t0 = _context25.sent;\\n\\n              case 5:\\n                transfer_between_accounts = _context25.t0;\\n\\n                if (this.config.account_transfer.accounts_list.length) {\\n                  _context25.next = 9;\\n                  break;\\n                }\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context25.next = 9;\\n                  break;\\n                }\\n\\n                return _context25.abrupt(\\\"return\\\");\\n\\n              case 9:\\n                _context25.next = 11;\\n                return this.WS.storage.mt5LoginList();\\n\\n              case 11:\\n                _context25.t2 = _yield$this$WS$storag = _context25.sent;\\n                _context25.t1 = _context25.t2 === null;\\n\\n                if (_context25.t1) {\\n                  _context25.next = 15;\\n                  break;\\n                }\\n\\n                _context25.t1 = _yield$this$WS$storag === void 0;\\n\\n              case 15:\\n                if (!_context25.t1) {\\n                  _context25.next = 19;\\n                  break;\\n                }\\n\\n                _context25.t3 = void 0;\\n                _context25.next = 20;\\n                break;\\n\\n              case 19:\\n                _context25.t3 = _yield$this$WS$storag.mt5_login_list;\\n\\n              case 20:\\n                mt5_login_list = _context25.t3;\\n                _context25.next = 23;\\n                return this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE);\\n\\n              case 23:\\n                _context25.t5 = _yield$this$WS$tradin = _context25.sent;\\n                _context25.t4 = _context25.t5 === null;\\n\\n                if (_context25.t4) {\\n                  _context25.next = 27;\\n                  break;\\n                }\\n\\n                _context25.t4 = _yield$this$WS$tradin === void 0;\\n\\n              case 27:\\n                if (!_context25.t4) {\\n                  _context25.next = 31;\\n                  break;\\n                }\\n\\n                _context25.t6 = void 0;\\n                _context25.next = 32;\\n                break;\\n\\n              case 31:\\n                _context25.t6 = _yield$this$WS$tradin.trading_platform_accounts;\\n\\n              case 32:\\n                dxtrade_accounts_list = _context25.t6;\\n                // TODO: remove this temporary mapping when API adds market_type and sub_account_type to transfer_between_accounts\\n                accounts = transfer_between_accounts.accounts.map(function (account) {\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5 && Array.isArray(mt5_login_list) && mt5_login_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in mt5_login_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var found_account = mt5_login_list.find(function (acc) {\\n                      return acc.login === account.loginid;\\n                    });\\n                    if (found_account === undefined) return account;\\n                    return cashier_store_objectSpread(cashier_store_objectSpread(cashier_store_objectSpread({}, account), found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.MT5\\n                    });\\n                  }\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE && Array.isArray(dxtrade_accounts_list) && dxtrade_accounts_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in dxtrade_accounts_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var _found_account = dxtrade_accounts_list.find(function (acc) {\\n                      return acc.account_id === account.loginid;\\n                    });\\n\\n                    if (_found_account === undefined) return account;\\n                    return cashier_store_objectSpread(cashier_store_objectSpread(cashier_store_objectSpread({}, account), _found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.DXTRADE\\n                    });\\n                  }\\n\\n                  return account;\\n                }); // sort accounts as follows:\\n                // for MT5, synthetic, financial, financial stp\\n                // for non-MT5, fiat, crypto (alphabetically by currency)\\n                // should have more than one account\\n\\n                if (transfer_between_accounts.accounts.length > 1) {\\n                  accounts.sort(function (a, b) {\\n                    var a_is_mt = a.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var b_is_mt = b.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var a_is_crypto = !a_is_mt && (0,shared_.isCryptocurrency)(a.currency);\\n                    var b_is_crypto = !b_is_mt && (0,shared_.isCryptocurrency)(b.currency);\\n                    var a_is_fiat = !a_is_mt && !a_is_crypto;\\n                    var b_is_fiat = !b_is_mt && !b_is_crypto;\\n\\n                    if (a_is_mt && b_is_mt) {\\n                      if (a.market_type === 'gaming' || a.market_type === 'synthetic') {\\n                        return -1;\\n                      }\\n\\n                      if (a.sub_account_type === 'financial') {\\n                        return b.market_type === 'gaming' || b.market_type === 'synthetic' ? 1 : -1;\\n                      }\\n\\n                      return 1;\\n                    } else if (a_is_crypto && b_is_crypto || a_is_fiat && b_is_fiat) {\\n                      return a.currency < b.currency ? -1 : 1;\\n                    } else if (a_is_crypto && b_is_mt || a_is_fiat && b_is_crypto || a_is_fiat && b_is_mt) {\\n                      return -1;\\n                    }\\n\\n                    return a_is_mt ? -1 : 1;\\n                  });\\n                }\\n\\n                arr_accounts = [];\\n                this.setSelectedTo({}); // set selected to empty each time so we can redetermine its value on reload\\n\\n                accounts.forEach(function (account) {\\n                  var _cfd_platforms$accoun, _cfd_platforms$accoun2;\\n\\n                  var cfd_platforms = {\\n                    mt5: {\\n                      name: 'DMT5',\\n                      icon: 'IcMt5'\\n                    },\\n                    dxtrade: {\\n                      name: 'Deriv X',\\n                      icon: 'IcDxtrade'\\n                    }\\n                  };\\n                  var is_cfd = Object.keys(cfd_platforms).includes(account.account_type);\\n                  var cfd_text_display = (_cfd_platforms$accoun = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun === void 0 ? void 0 : _cfd_platforms$accoun.name;\\n                  var cfd_icon_display = \\\"\\\".concat((_cfd_platforms$accoun2 = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun2 === void 0 ? void 0 : _cfd_platforms$accoun2.icon, \\\"-\\\").concat((0,shared_.getCFDAccount)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type,\\n                    is_eu: _this14.root_store.client.is_eu\\n                  }));\\n                  var account_text_display = is_cfd ? \\\"\\\".concat(cfd_text_display, \\\" \\\").concat((0,shared_.getCFDAccountDisplay)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type,\\n                    is_eu: _this14.root_store.client.is_eu\\n                  })) : (0,shared_.getCurrencyDisplayCode)(account.currency !== 'eUSDT' ? account.currency.toUpperCase() : account.currency);\\n\\n                  var obj_values = cashier_store_objectSpread({\\n                    text: account_text_display,\\n                    value: account.loginid,\\n                    balance: account.balance,\\n                    currency: account.currency,\\n                    is_crypto: (0,shared_.isCryptocurrency)(account.currency),\\n                    is_mt: account.account_type === shared_.CFD_PLATFORMS.MT5,\\n                    is_dxtrade: account.account_type === shared_.CFD_PLATFORMS.DXTRADE\\n                  }, is_cfd && {\\n                    platform_icon: cfd_icon_display,\\n                    market_type: (0,shared_.getCFDAccount)({\\n                      market_type: account.market_type,\\n                      sub_account_type: account.sub_account_type,\\n                      platform: account.account_type,\\n                      is_eu: _this14.root_store.client.is_eu\\n                    })\\n                  }); // set current logged in client as the default transfer from account\\n\\n\\n                  if (account.loginid === _this14.root_store.client.loginid) {\\n                    // check if selected from is not allowed account\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      obj_values.error = getSelectedError(obj_values.value, true);\\n                    }\\n\\n                    _this14.setSelectedFrom(obj_values);\\n                  } else if ((0,shared_.isEmptyObject)(_this14.config.account_transfer.selected_to)) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    } // set the first available account as the default transfer to account\\n\\n\\n                    _this14.setSelectedTo(obj_values);\\n                  }\\n\\n                  arr_accounts.push(obj_values);\\n                });\\n                this.setAccounts(arr_accounts);\\n\\n              case 39:\\n              case \\\"end\\\":\\n                return _context25.stop();\\n            }\\n          }\\n        }, _callee25, this);\\n      }));\\n\\n      function sortAccountsTransfer(_x13) {\\n        return _sortAccountsTransfer.apply(this, arguments);\\n      }\\n\\n      return sortAccountsTransfer;\\n    }()\\n  }, {\\n    key: \\\"setSelectedFrom\\\",\\n    value: function setSelectedFrom(obj_values) {\\n      this.config.account_transfer.selected_from = obj_values;\\n    }\\n  }, {\\n    key: \\\"setSelectedTo\\\",\\n    value: function setSelectedTo(obj_values) {\\n      this.config.account_transfer.selected_to = obj_values;\\n    }\\n  }, {\\n    key: \\\"setAccounts\\\",\\n    value: function setAccounts(arr_accounts) {\\n      this.config.account_transfer.accounts_list = arr_accounts;\\n    }\\n  }, {\\n    key: \\\"setIsTryTransferSuccessful\\\",\\n    value: function setIsTryTransferSuccessful(is_try_transfer_successful) {\\n      this.setErrorMessage('');\\n      this.config[this.active_container].is_try_transfer_successful = is_try_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsTransferConfirm\\\",\\n    value: function setIsTransferConfirm(is_transfer_confirm) {\\n      this.config[this.active_container].is_transfer_confirm = is_transfer_confirm;\\n    }\\n  }, {\\n    key: \\\"setAccountTransferAmount\\\",\\n    value: function setAccountTransferAmount(amount) {\\n      this.config[this.active_container].account_transfer_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setIsTransferSuccessful\\\",\\n    value: function setIsTransferSuccessful(is_transfer_successful) {\\n      this.config[this.active_container].is_transfer_successful = is_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsMT5TransferInProgress\\\",\\n    value: function setIsMT5TransferInProgress(is_mt5_transfer_in_progress) {\\n      this.config[this.active_container].is_mt5_transfer_in_progress = is_mt5_transfer_in_progress;\\n    }\\n  }, {\\n    key: \\\"isMT5TransferInProgress\\\",\\n    value: function isMT5TransferInProgress() {\\n      var _this$config$this$act2;\\n\\n      return (_this$config$this$act2 = this.config[this.active_container]) === null || _this$config$this$act2 === void 0 ? void 0 : _this$config$this$act2.is_mt5_transfer_in_progress;\\n    }\\n  }, {\\n    key: \\\"setReceiptTransfer\\\",\\n    value: function setReceiptTransfer(_ref16) {\\n      var amount = _ref16.amount;\\n      this.config.account_transfer.receipt = {\\n        amount_transferred: amount\\n      };\\n    }\\n  }, {\\n    key: \\\"onChangeTransferFrom\\\",\\n    value: function onChangeTransferFrom(_ref17) {\\n      var target = _ref17.target;\\n      this.setErrorMessage('');\\n      this.config.account_transfer.selected_from.error = '';\\n      var accounts = this.config.account_transfer.accounts_list;\\n      var selected_from = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }); // if new value of selected_from is the same as the current selected_to\\n      // switch the value of selected_from and selected_to\\n\\n      if (selected_from.value === this.config.account_transfer.selected_to.value) {\\n        this.onChangeTransferTo({\\n          target: {\\n            value: this.config.account_transfer.selected_from.value\\n          }\\n        });\\n      } else if (selected_from.is_mt && this.config.account_transfer.selected_to.is_mt || selected_from.is_dxtrade && this.config.account_transfer.selected_to.is_dxtrade || selected_from.is_dxtrade && this.config.account_transfer.selected_to.is_mt || selected_from.is_mt && this.config.account_transfer.selected_to.is_dxtrade) {\\n        // not allowed to transfer from MT to MT\\n        // not allowed to transfer from Dxtrade to Dxtrade\\n        // not allowed to transfer between MT and Dxtrade\\n        var first_non_cfd = this.config.account_transfer.accounts_list.find(function (account) {\\n          return !account.is_mt && !account.is_dxtrade;\\n        });\\n        this.onChangeTransferTo({\\n          target: {\\n            value: first_non_cfd.value\\n          }\\n        });\\n      } else if (selected_from.is_crypto && this.config.account_transfer.selected_to.is_crypto) {\\n        // not allowed to transfer crypto to crypto\\n        var first_fiat = this.config.account_transfer.accounts_list.find(function (account) {\\n          return !account.is_crypto;\\n        });\\n        this.onChangeTransferTo({\\n          target: {\\n            value: first_fiat.value\\n          }\\n        });\\n      }\\n\\n      if (hasTransferNotAllowedLoginid(selected_from.value)) {\\n        selected_from.error = getSelectedError(selected_from.value, true);\\n      }\\n\\n      this.config.account_transfer.selected_from = selected_from;\\n      this.setTransferFee();\\n      this.setMinimumFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"onChangeTransferTo\\\",\\n    value: function onChangeTransferTo(_ref18) {\\n      var target = _ref18.target;\\n      this.setErrorMessage('');\\n      this.config.account_transfer.selected_to.error = '';\\n      var accounts = this.config.account_transfer.accounts_list;\\n      this.config.account_transfer.selected_to = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }) || {};\\n\\n      if (hasTransferNotAllowedLoginid(this.config.account_transfer.selected_to.value)) {\\n        this.config.account_transfer.selected_to.error = getSelectedError(this.config.account_transfer.selected_to.value);\\n      }\\n\\n      this.setTransferFee();\\n      this.setMinimumFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentTransfer\\\",\\n    value: function () {\\n      var _onMountPaymentAgentTransfer = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {\\n        var response, current_payment_agent;\\n        return regeneratorRuntime.wrap(function _callee26$(_context26) {\\n          while (1) {\\n            switch (_context26.prev = _context26.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentTransfer;\\n                _context26.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                if (this.config.payment_agent_transfer.transfer_limit.min_withdrawal) {\\n                  _context26.next = 12;\\n                  break;\\n                }\\n\\n                _context26.next = 7;\\n                return this.getPaymentAgentList();\\n\\n              case 7:\\n                response = _context26.sent;\\n                _context26.next = 10;\\n                return this.getCurrentPaymentAgent(response);\\n\\n              case 10:\\n                current_payment_agent = _context26.sent;\\n                this.setMinMaxPaymentAgentTransfer(current_payment_agent);\\n\\n              case 12:\\n                this.setLoading(false);\\n\\n              case 13:\\n              case \\\"end\\\":\\n                return _context26.stop();\\n            }\\n          }\\n        }, _callee26, this);\\n      }));\\n\\n      function onMountPaymentAgentTransfer() {\\n        return _onMountPaymentAgentTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentTransfer;\\n    }()\\n  }, {\\n    key: \\\"getCurrentPaymentAgent\\\",\\n    value: function () {\\n      var _getCurrentPaymentAgent = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(response_payment_agent) {\\n        var _this15 = this;\\n\\n        var payment_agent_listed, current_payment_agent;\\n        return regeneratorRuntime.wrap(function _callee27$(_context27) {\\n          while (1) {\\n            switch (_context27.prev = _context27.next) {\\n              case 0:\\n                payment_agent_listed = response_payment_agent.paymentagent_list.list.find(function (agent) {\\n                  return agent.paymentagent_loginid === _this15.root_store.client.loginid;\\n                });\\n                _context27.t0 = payment_agent_listed;\\n\\n                if (_context27.t0) {\\n                  _context27.next = 6;\\n                  break;\\n                }\\n\\n                _context27.next = 5;\\n                return this.getPaymentAgentDetails();\\n\\n              case 5:\\n                _context27.t0 = _context27.sent;\\n\\n              case 6:\\n                current_payment_agent = _context27.t0;\\n                return _context27.abrupt(\\\"return\\\", current_payment_agent !== null && current_payment_agent !== void 0 ? current_payment_agent : {});\\n\\n              case 8:\\n              case \\\"end\\\":\\n                return _context27.stop();\\n            }\\n          }\\n        }, _callee27, this);\\n      }));\\n\\n      function getCurrentPaymentAgent(_x14) {\\n        return _getCurrentPaymentAgent.apply(this, arguments);\\n      }\\n\\n      return getCurrentPaymentAgent;\\n    }()\\n  }, {\\n    key: \\\"checkIsPaymentAgent\\\",\\n    value: function () {\\n      var _checkIsPaymentAgent = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {\\n        var _get_settings$is_auth;\\n\\n        var get_settings;\\n        return regeneratorRuntime.wrap(function _callee28$(_context28) {\\n          while (1) {\\n            switch (_context28.prev = _context28.next) {\\n              case 0:\\n                _context28.next = 2;\\n                return this.WS.authorized.storage.getSettings();\\n\\n              case 2:\\n                get_settings = _context28.sent.get_settings;\\n                this.setIsPaymentAgent((_get_settings$is_auth = get_settings === null || get_settings === void 0 ? void 0 : get_settings.is_authenticated_payment_agent) !== null && _get_settings$is_auth !== void 0 ? _get_settings$is_auth : false);\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context28.stop();\\n            }\\n          }\\n        }, _callee28, this);\\n      }));\\n\\n      function checkIsPaymentAgent() {\\n        return _checkIsPaymentAgent.apply(this, arguments);\\n      }\\n\\n      return checkIsPaymentAgent;\\n    }()\\n  }, {\\n    key: \\\"setIsPaymentAgent\\\",\\n    value: function setIsPaymentAgent(is_payment_agent) {\\n      if (!is_payment_agent && window.location.pathname.endsWith(shared_.routes.cashier_pa_transfer)) {\\n        this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n\\n      this.config.payment_agent_transfer.is_payment_agent = !!is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"setMinMaxPaymentAgentTransfer\\\",\\n    value: function setMinMaxPaymentAgentTransfer(_ref19) {\\n      var min_withdrawal = _ref19.min_withdrawal,\\n          max_withdrawal = _ref19.max_withdrawal;\\n      this.config.payment_agent_transfer.transfer_limit = {\\n        min: min_withdrawal,\\n        max: max_withdrawal\\n      };\\n    }\\n  }, {\\n    key: \\\"setConfirmationPaymentAgentTransfer\\\",\\n    value: function setConfirmationPaymentAgentTransfer(_ref20) {\\n      var amount = _ref20.amount,\\n          client_id = _ref20.client_id,\\n          client_name = _ref20.client_name,\\n          description = _ref20.description;\\n      this.config.payment_agent_transfer.confirm = {\\n        amount: amount,\\n        client_id: client_id,\\n        client_name: client_name,\\n        description: description\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceiptPaymentAgentTransfer\\\",\\n    value: function setReceiptPaymentAgentTransfer(_ref21) {\\n      var amount_transferred = _ref21.amount_transferred,\\n          client_id = _ref21.client_id,\\n          client_name = _ref21.client_name;\\n      this.config.payment_agent_transfer.receipt = {\\n        amount_transferred: amount_transferred,\\n        client_id: client_id,\\n        client_name: client_name\\n      };\\n    }\\n  }, {\\n    key: \\\"accountSwitcherListener\\\",\\n    value: function accountSwitcherListener() {\\n      var _this16 = this;\\n\\n      [this.config.withdraw.container, this.config.payment_agent.container].forEach(function (container) {\\n        _this16.clearVerification(container);\\n      });\\n      [this.config.deposit.container, this.config.withdraw.container].forEach(function (container) {\\n        _this16.setIframeUrl('', container);\\n\\n        _this16.clearTimeoutCashierUrl(container);\\n\\n        _this16.setSessionTimeout(true, container);\\n      });\\n      this.config.payment_agent = new ConfigPaymentAgent();\\n      this.config.account_transfer = new ConfigAccountTransfer();\\n      this.config.payment_agent_transfer = new ConfigPaymentAgentTransfer();\\n      this.is_populating_values = false;\\n      this.onRemount();\\n      return Promise.resolve();\\n    }\\n  }, {\\n    key: \\\"account_platform_icon\\\",\\n    get: function get() {\\n      var _this17 = this;\\n\\n      var platform_icon = this.root_store.client.account_list.find(function (acc) {\\n        return _this17.root_store.client.loginid === acc.loginid;\\n      }).icon;\\n      return platform_icon;\\n    }\\n  }, {\\n    key: \\\"setConverterFromAmount\\\",\\n    value: function setConverterFromAmount(amount) {\\n      this.converter_from_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setConverterToAmount\\\",\\n    value: function setConverterToAmount(amount) {\\n      this.converter_to_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setConverterFromError\\\",\\n    value: function setConverterFromError(error) {\\n      this.converter_from_error = error;\\n    }\\n  }, {\\n    key: \\\"setConverterToError\\\",\\n    value: function setConverterToError(error) {\\n      this.converter_to_error = error;\\n    }\\n  }, {\\n    key: \\\"onChangeConverterFromAmount\\\",\\n    value: function () {\\n      var _onChangeConverterFromAmount = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(_ref22, from_currency, to_currency) {\\n        var target, rate, decimals, amount;\\n        return regeneratorRuntime.wrap(function _callee29$(_context29) {\\n          while (1) {\\n            switch (_context29.prev = _context29.next) {\\n              case 0:\\n                target = _ref22.target;\\n                this.resetTimer();\\n\\n                if (!target.value) {\\n                  _context29.next = 26;\\n                  break;\\n                }\\n\\n                this.setConverterFromAmount(target.value);\\n                this.validateFromAmount();\\n                this.percentageSelectorSelectionStatus(true);\\n                this.calculatePercentage();\\n\\n                if (!this.converter_from_error) {\\n                  _context29.next = 14;\\n                  break;\\n                }\\n\\n                this.setConverterToAmount('');\\n                this.setConverterToError('');\\n                this.setIsTimerVisible(false);\\n                this.setAccountTransferAmount('');\\n                _context29.next = 24;\\n                break;\\n\\n              case 14:\\n                _context29.next = 16;\\n                return this.getExchangeRate(from_currency, to_currency);\\n\\n              case 16:\\n                rate = _context29.sent;\\n                decimals = (0,shared_.getDecimalPlaces)(to_currency);\\n                amount = (rate * target.value).toFixed(decimals);\\n\\n                if (+amount || this.converter_from_amount) {\\n                  this.setConverterToAmount(amount);\\n                } else {\\n                  this.setConverterToAmount('');\\n                }\\n\\n                this.validateToAmount();\\n                this.setConverterToError('');\\n                this.setIsTimerVisible(true);\\n                this.setAccountTransferAmount(target.value);\\n\\n              case 24:\\n                _context29.next = 27;\\n                break;\\n\\n              case 26:\\n                this.resetConverter();\\n\\n              case 27:\\n              case \\\"end\\\":\\n                return _context29.stop();\\n            }\\n          }\\n        }, _callee29, this);\\n      }));\\n\\n      function onChangeConverterFromAmount(_x15, _x16, _x17) {\\n        return _onChangeConverterFromAmount.apply(this, arguments);\\n      }\\n\\n      return onChangeConverterFromAmount;\\n    }()\\n  }, {\\n    key: \\\"onChangeConverterToAmount\\\",\\n    value: function () {\\n      var _onChangeConverterToAmount = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(_ref23, from_currency, to_currency) {\\n        var target, rate, decimals, amount;\\n        return regeneratorRuntime.wrap(function _callee30$(_context30) {\\n          while (1) {\\n            switch (_context30.prev = _context30.next) {\\n              case 0:\\n                target = _ref23.target;\\n                this.resetTimer();\\n\\n                if (!target.value) {\\n                  _context30.next = 24;\\n                  break;\\n                }\\n\\n                this.setConverterToAmount(target.value);\\n                this.validateToAmount();\\n\\n                if (!this.converter_to_error) {\\n                  _context30.next = 12;\\n                  break;\\n                }\\n\\n                this.setConverterFromAmount('');\\n                this.setConverterFromError('');\\n                this.setIsTimerVisible(false);\\n                this.setAccountTransferAmount('');\\n                _context30.next = 22;\\n                break;\\n\\n              case 12:\\n                _context30.next = 14;\\n                return this.getExchangeRate(from_currency, to_currency);\\n\\n              case 14:\\n                rate = _context30.sent;\\n                decimals = (0,shared_.getDecimalPlaces)(to_currency);\\n                amount = (rate * target.value).toFixed(decimals);\\n\\n                if (+amount || this.converter_to_amount) {\\n                  this.setConverterFromAmount(amount);\\n                } else {\\n                  this.setConverterFromAmount('');\\n                }\\n\\n                this.percentageSelectorSelectionStatus(true);\\n                this.calculatePercentage();\\n                this.validateFromAmount();\\n\\n                if (this.converter_from_error) {\\n                  this.setIsTimerVisible(false);\\n                  this.setAccountTransferAmount('');\\n                } else {\\n                  this.setConverterFromError('');\\n                  this.setIsTimerVisible(true);\\n                  this.setAccountTransferAmount(amount);\\n                }\\n\\n              case 22:\\n                _context30.next = 25;\\n                break;\\n\\n              case 24:\\n                this.resetConverter();\\n\\n              case 25:\\n              case \\\"end\\\":\\n                return _context30.stop();\\n            }\\n          }\\n        }, _callee30, this);\\n      }));\\n\\n      function onChangeConverterToAmount(_x18, _x19, _x20) {\\n        return _onChangeConverterToAmount.apply(this, arguments);\\n      }\\n\\n      return onChangeConverterToAmount;\\n    }()\\n  }, {\\n    key: \\\"setTransferPercentageSelectorResult\\\",\\n    value: function setTransferPercentageSelectorResult(amount) {\\n      var selected_from_currency = this.config.account_transfer.selected_from.currency;\\n      var selected_to_currency = this.config.account_transfer.selected_to.currency;\\n\\n      if (amount > 0 || +this.config.account_transfer.selected_from.balance === 0) {\\n        this.setConverterFromAmount(amount);\\n        this.validateTransferFromAmount();\\n        this.onChangeConverterFromAmount({\\n          target: {\\n            value: amount\\n          }\\n        }, selected_from_currency, selected_to_currency);\\n      } else if (+this.config.account_transfer.selected_from.balance === 0) {\\n        this.setConverterFromAmount(amount);\\n        this.validateTransferFromAmount();\\n      } else {\\n        this.resetConverter();\\n      }\\n\\n      this.setIsTimerVisible(false);\\n      this.percentageSelectorSelectionStatus(false);\\n    }\\n  }, {\\n    key: \\\"setWithdrawPercentageSelectorResult\\\",\\n    value: function setWithdrawPercentageSelectorResult(amount) {\\n      if (amount > 0) {\\n        this.setConverterFromAmount(amount);\\n        this.validateWithdrawFromAmount();\\n        this.onChangeConverterFromAmount({\\n          target: {\\n            value: amount\\n          }\\n        }, this.root_store.client.currency, this.root_store.client.current_fiat_currency || 'USD');\\n      } else {\\n        this.resetConverter();\\n      }\\n\\n      this.setIsTimerVisible(false);\\n      this.percentageSelectorSelectionStatus(false);\\n    }\\n  }, {\\n    key: \\\"validateFromAmount\\\",\\n    value: function validateFromAmount() {\\n      if (this.active_container === this.config.account_transfer.container) {\\n        this.validateTransferFromAmount();\\n      } else {\\n        this.validateWithdrawFromAmount();\\n      }\\n    }\\n  }, {\\n    key: \\\"validateToAmount\\\",\\n    value: function validateToAmount() {\\n      if (this.active_container === this.config.account_transfer.container) {\\n        this.validateTransferToAmount();\\n      } else {\\n        this.validateWithdrawToAmount();\\n      }\\n    }\\n  }, {\\n    key: \\\"validateTransferFromAmount\\\",\\n    value: function validateTransferFromAmount() {\\n      if (!this.converter_from_amount) {\\n        this.setConverterFromError((0,translations_.localize)('This field is required.'));\\n      } else {\\n        var _validNumber = (0,shared_.validNumber)(this.converter_from_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(this.config.account_transfer.selected_from.currency),\\n          min: this.config.account_transfer.transfer_limit.min,\\n          max: this.config.account_transfer.transfer_limit.max\\n        }),\\n            is_ok = _validNumber.is_ok,\\n            message = _validNumber.message;\\n\\n        if (!is_ok) {\\n          this.setConverterFromError(message);\\n        } else if (+this.config.account_transfer.selected_from.balance < +this.converter_from_amount) {\\n          this.setConverterFromError((0,translations_.localize)('Insufficient funds'));\\n        } else {\\n          this.setConverterFromError('');\\n        }\\n      }\\n    }\\n  }, {\\n    key: \\\"validateTransferToAmount\\\",\\n    value: function validateTransferToAmount() {\\n      if (this.converter_to_amount) {\\n        var currency = this.config.account_transfer.selected_to.currency;\\n\\n        var _validNumber2 = (0,shared_.validNumber)(this.converter_to_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(currency)\\n        }),\\n            is_ok = _validNumber2.is_ok,\\n            message = _validNumber2.message;\\n\\n        if (!is_ok) {\\n          this.setConverterToError(message);\\n        } else {\\n          this.setConverterToError('');\\n        }\\n      }\\n    }\\n  }, {\\n    key: \\\"validateWithdrawFromAmount\\\",\\n    value: function validateWithdrawFromAmount() {\\n      var error_message = '';\\n      var _this$root_store$clie6 = this.root_store.client,\\n          balance = _this$root_store$clie6.balance,\\n          currency = _this$root_store$clie6.currency,\\n          website_status = _this$root_store$clie6.website_status;\\n      var min_withdraw_amount = website_status.crypto_config[currency].minimum_withdrawal;\\n      var max_withdraw_amount = +this.max_withdraw_amount > +balance ? +balance : +this.max_withdraw_amount;\\n\\n      if (this.converter_from_amount) {\\n        var _validNumber3 = (0,shared_.validNumber)(this.converter_from_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(currency)\\n        }),\\n            is_ok = _validNumber3.is_ok,\\n            message = _validNumber3.message;\\n\\n        if (!is_ok) error_message = message;\\n        if (+balance < +this.converter_from_amount) error_message = (0,translations_.localize)('Insufficient funds');\\n\\n        if (+this.converter_from_amount < +min_withdraw_amount || +this.converter_from_amount > +max_withdraw_amount) {\\n          error_message = /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n            i18n_default_text: \\\"The allowed withdraw amount is {{min_withdraw_amount}} to {{max_withdraw_amount}} {{currency}}\\\",\\n            values: {\\n              min_withdraw_amount: min_withdraw_amount,\\n              max_withdraw_amount: max_withdraw_amount,\\n              currency: currency\\n            }\\n          });\\n        }\\n      }\\n\\n      this.setConverterFromError(error_message);\\n    }\\n  }, {\\n    key: \\\"validateWithdrawToAmount\\\",\\n    value: function validateWithdrawToAmount() {\\n      var error_message = '';\\n      var current_fiat_currency = this.root_store.client.current_fiat_currency;\\n\\n      if (this.converter_to_amount) {\\n        var _validNumber4 = (0,shared_.validNumber)(this.converter_to_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(current_fiat_currency)\\n        }),\\n            is_ok = _validNumber4.is_ok,\\n            message = _validNumber4.message;\\n\\n        if (!is_ok) error_message = message;\\n      }\\n\\n      this.setConverterToError(error_message);\\n    }\\n  }, {\\n    key: \\\"resetConverter\\\",\\n    value: function resetConverter() {\\n      this.setConverterFromAmount('');\\n      this.setConverterToAmount('');\\n      this.setConverterFromError('');\\n      this.setConverterToError('');\\n      this.setIsTimerVisible(false);\\n      this.percentageSelectorSelectionStatus(true);\\n    }\\n  }]);\\n\\n  return CashierStore;\\n}(BaseStore), (_descriptor57 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor58 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_p2p_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor59 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"p2p_notification_count\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor60 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"cashier_route_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor61 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_10k_withdrawal_limit_reached\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return undefined;\\n  }\\n}), _descriptor62 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_deposit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor63 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"should_show_all_available_currencies\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor64 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_cashier_default\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), _descriptor65 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"deposit_target\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor66 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"crypto_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor67 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"fiat_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor68 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"insufficient_fund_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor69 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"all_payment_agent_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor70 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"should_set_currency_modal_title_change\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor71 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"p2p_advertiser_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return undefined;\\n  }\\n}), _descriptor72 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"has_set_currency\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor73 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"withdraw_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor74 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"converter_from_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor75 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"converter_to_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor76 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"converter_from_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor77 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"converter_to_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor78 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_timer_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor79 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_crypto_transactions_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor80 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"blockchain_address\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor81 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"should_percentage_reset\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor82 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"percentage\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor83 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_withdraw_confirmed\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor84 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"show_p2p_in_cashier_default\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor85 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"max_withdraw_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor86 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"config\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {\\n      account_transfer: new ConfigAccountTransfer(),\\n      deposit: cashier_store_objectSpread(cashier_store_objectSpread({}, (0,external_mobx_.toJS)(new Config({\\n        container: 'deposit'\\n      }))), {}, {\\n        error: new ConfigError()\\n      }),\\n      payment_agent: new ConfigPaymentAgent(),\\n      payment_agent_transfer: new ConfigPaymentAgentTransfer(),\\n      withdraw: new ConfigWithdraw()\\n    };\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_crypto\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_crypto\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_payment_agent_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_payment_agent_visible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_payment_agent_visible_in_onboarding\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_payment_agent_visible_in_onboarding\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_payment_agent_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_payment_agent_transfer_visible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_account_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_account_transfer_visible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_p2p_enabled\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_p2p_enabled\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"showP2pInCashierDefault\\\", [cashier_store_dec5], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"showP2pInCashierDefault\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"attachCashierToMenu\\\", [cashier_store_dec6], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"attachCashierToMenu\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"replaceCashierMenuOnclick\\\", [cashier_store_dec7], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"replaceCashierMenuOnclick\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setHasSetCurrency\\\", [cashier_store_dec8], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setHasSetCurrency\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"changeSetCurrencyModalTitle\\\", [cashier_store_dec9], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"changeSetCurrencyModalTitle\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountCashierDefault\\\", [cashier_store_dec10], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountCashierDefault\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsWithdrawConfirmed\\\", [cashier_store_dec11], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsWithdrawConfirmed\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setWithdrawAmount\\\", [cashier_store_dec12], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setWithdrawAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"calculatePercentage\\\", [cashier_store_dec13], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"calculatePercentage\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"percentageSelectorSelectionStatus\\\", [cashier_store_dec14], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"percentageSelectorSelectionStatus\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestWithdraw\\\", [cashier_store_dec15], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"requestWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetWithrawForm\\\", [cashier_store_dec16], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"resetWithrawForm\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsDeposit\\\", [cashier_store_dec17], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsDeposit\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setShouldShowAllAvailableCurrencies\\\", [cashier_store_dec18], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setShouldShowAllAvailableCurrencies\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setBlockchainAddress\\\", [cashier_store_dec19], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setBlockchainAddress\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsCashierDefault\\\", [cashier_store_dec20], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsCashierDefault\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setDepositTarget\\\", [cashier_store_dec21], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setDepositTarget\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"continueRoute\\\", [cashier_store_dec22], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"continueRoute\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setAccountSwitchListener\\\", [_dec23], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setAccountSwitchListener\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setActiveTabIndex\\\", [_dec24], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setActiveTabIndex\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"init\\\", [_dec25], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"init\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"getAdvertizerError\\\", [_dec26], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"getAdvertizerError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setP2pAdvertiserError\\\", [_dec27], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setP2pAdvertiserError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"checkP2pStatus\\\", [_dec28], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"checkP2pStatus\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountCommon\\\", [_dec29], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountCommon\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsCryptoTransactionsVisible\\\", [_dec30], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsCryptoTransactionsVisible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setCashierTabIndex\\\", [_dec31], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setCashierTabIndex\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"willMountWithdraw\\\", [_dec32], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"willMountWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountWithdraw\\\", [_dec33], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountDeposit\\\", [_dec34], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountDeposit\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setNotificationCount\\\", [_dec35], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setNotificationCount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsP2pVisible\\\", [_dec36], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsP2pVisible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMount\\\", [_dec37], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_cashier_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_cashier_locked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_system_maintenance\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_system_maintenance\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_deposit_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_deposit_locked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_withdrawal_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_withdrawal_locked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_transfer_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_transfer_locked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setMaxWithdrawAmount\\\", [_dec38], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setMaxWithdrawAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"check10kLimit\\\", [_dec39], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"check10kLimit\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"set10kLimitation\\\", [_dec40], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"set10kLimitation\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"checkIframeLoaded\\\", [_dec41], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"checkIframeLoaded\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIframeUrl\\\", [_dec42], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIframeUrl\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setContainerHeight\\\", [_dec43], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setContainerHeight\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setErrorMessage\\\", [_dec44], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setErrorMessage\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"handleCashierError\\\", [_dec45], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"handleCashierError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setErrorConfig\\\", [_dec46], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setErrorConfig\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"submitFundsProtection\\\", [_dec47], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"submitFundsProtection\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setLoading\\\", [_dec48], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setLoading\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setSessionTimeout\\\", [_dec49], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setSessionTimeout\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setVerificationButtonClicked\\\", [_dec50], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setVerificationButtonClicked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setVerificationEmailSent\\\", [_dec51], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setVerificationEmailSent\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setVerificationResendClicked\\\", [_dec52], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setVerificationResendClicked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setVerificationResendTimeout\\\", [_dec53], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setVerificationResendTimeout\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTimeoutCashierUrl\\\", [_dec54], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTimeoutCashierUrl\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTimeoutVerification\\\", [_dec55], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTimeoutVerification\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"sendVerificationEmail\\\", [_dec56], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"sendVerificationEmail\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resendVerificationEmail\\\", [_dec57], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"resendVerificationEmail\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTimerVisible\\\", [_dec58], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTimerVisible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetTimer\\\", [_dec59], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"resetTimer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"getExchangeRate\\\", [_dec60], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"getExchangeRate\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setActiveTab\\\", [_dec61], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setActiveTab\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountPaymentAgentList\\\", [_dec62], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"getPaymentAgentList\\\", [_dec63], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"getPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setAllPaymentAgentList\\\", [_dec64], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setAllPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"getPaymentAgentDetails\\\", [_dec65], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"getPaymentAgentDetails\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"addSupportedBank\\\", [_dec66], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"addSupportedBank\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"sortSupportedBanks\\\", [_dec67], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"sortSupportedBanks\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setPaymentAgentList\\\", [_dec68], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"filterPaymentAgentList\\\", [_dec69], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"filterPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangePaymentMethod\\\", [_dec70], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangePaymentMethod\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountPaymentAgentWithdraw\\\", [_dec71], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountPaymentAgentWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsWithdraw\\\", [_dec72], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTryWithdrawSuccessful\\\", [_dec73], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTryWithdrawSuccessful\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsWithdrawSuccessful\\\", [_dec74], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsWithdrawSuccessful\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConfirmation\\\", [_dec75], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConfirmation\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setReceipt\\\", [_dec76], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setReceipt\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"addPaymentAgent\\\", [_dec77], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"addPaymentAgent\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestTryPaymentAgentWithdraw\\\", [_dec78], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"requestTryPaymentAgentWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestPaymentAgentWithdraw\\\", [_dec79], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"requestPaymentAgentWithdraw\\\"), _class15.prototype), _descriptor87 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetPaymentAgent\\\", [_dec80], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this18 = this;\\n\\n    return function () {\\n      _this18.setErrorMessage('');\\n\\n      _this18.setIsWithdraw(false);\\n\\n      _this18.clearVerification();\\n\\n      _this18.setActiveTabIndex(0);\\n    };\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountAccountTransfer\\\", [_dec81], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountAccountTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setHasNoAccountsBalance\\\", [_dec82], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setHasNoAccountsBalance\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setHasNoAccount\\\", [_dec83], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setHasNoAccount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTransferFee\\\", [_dec84], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTransferFee\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setMinimumFee\\\", [_dec85], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setMinimumFee\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTransferLimit\\\", [_dec86], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTransferLimit\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"sortAccountsTransfer\\\", [_dec87], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"sortAccountsTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setSelectedFrom\\\", [_dec88], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setSelectedFrom\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setSelectedTo\\\", [_dec89], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setSelectedTo\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setAccounts\\\", [_dec90], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setAccounts\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTryTransferSuccessful\\\", [_dec91], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTryTransferSuccessful\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTransferConfirm\\\", [_dec92], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTransferConfirm\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setAccountTransferAmount\\\", [_dec93], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setAccountTransferAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTransferSuccessful\\\", [_dec94], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTransferSuccessful\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsMT5TransferInProgress\\\", [_dec95], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsMT5TransferInProgress\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"isMT5TransferInProgress\\\", [_dec96], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"isMT5TransferInProgress\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setReceiptTransfer\\\", [_dec97], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setReceiptTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangeTransferFrom\\\", [_dec98], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangeTransferFrom\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangeTransferTo\\\", [_dec99], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangeTransferTo\\\"), _class15.prototype), _descriptor88 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetAccountTransfer\\\", [_dec100], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this19 = this;\\n\\n    return /*#__PURE__*/cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {\\n      return regeneratorRuntime.wrap(function _callee31$(_context31) {\\n        while (1) {\\n          switch (_context31.prev = _context31.next) {\\n            case 0:\\n              _this19.setIsTransferConfirm(false);\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context31.stop();\\n          }\\n        }\\n      }, _callee31);\\n    }));\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountPaymentAgentTransfer\\\", [_dec101], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountPaymentAgentTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsPaymentAgent\\\", [_dec102], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsPaymentAgent\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setMinMaxPaymentAgentTransfer\\\", [_dec103], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setMinMaxPaymentAgentTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConfirmationPaymentAgentTransfer\\\", [_dec104], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConfirmationPaymentAgentTransfer\\\"), _class15.prototype), _descriptor89 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestTryPaymentAgentTransfer\\\", [_dec105], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this20 = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref26 = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(_ref25) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee32$(_context32) {\\n          while (1) {\\n            switch (_context32.prev = _context32.next) {\\n              case 0:\\n                amount = _ref25.amount, currency = _ref25.currency, description = _ref25.description, transfer_to = _ref25.transfer_to;\\n\\n                _this20.setErrorMessage('');\\n\\n                _context32.next = 4;\\n                return _this20.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context32.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 2) {\\n                  // show confirmation screen\\n                  _this20.setConfirmationPaymentAgentTransfer({\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name,\\n                    amount: amount,\\n                    description: description\\n                  });\\n\\n                  _this20.setIsTryTransferSuccessful(true);\\n                } else {\\n                  _this20.setErrorMessage(payment_agent_transfer.error, _this20.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context32.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context32.stop();\\n            }\\n          }\\n        }, _callee32);\\n      }));\\n\\n      return function (_x21) {\\n        return _ref26.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setReceiptPaymentAgentTransfer\\\", [_dec106], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setReceiptPaymentAgentTransfer\\\"), _class15.prototype), _descriptor90 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestPaymentAgentTransfer\\\", [_dec107], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this21 = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref28 = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(_ref27) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee33$(_context33) {\\n          while (1) {\\n            switch (_context33.prev = _context33.next) {\\n              case 0:\\n                amount = _ref27.amount, currency = _ref27.currency, description = _ref27.description, transfer_to = _ref27.transfer_to;\\n\\n                _this21.setErrorMessage('');\\n\\n                _context33.next = 4;\\n                return _this21.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context33.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 1) {\\n                  _this21.setReceiptPaymentAgentTransfer({\\n                    amount_transferred: amount,\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name\\n                  });\\n\\n                  _this21.setIsTransferSuccessful(true);\\n\\n                  _this21.setIsTryTransferSuccessful(false);\\n\\n                  _this21.setConfirmationPaymentAgentTransfer({});\\n                } else {\\n                  _this21.setErrorMessage(payment_agent_transfer.error, _this21.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context33.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context33.stop();\\n            }\\n          }\\n        }, _callee33);\\n      }));\\n\\n      return function (_x22) {\\n        return _ref28.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), _descriptor91 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetPaymentAgentTransfer\\\", [_dec108], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this22 = this;\\n\\n    return function () {\\n      _this22.setIsTransferSuccessful(false);\\n\\n      _this22.setErrorMessage('');\\n    };\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"account_platform_icon\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"account_platform_icon\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConverterFromAmount\\\", [_dec109], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConverterFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConverterToAmount\\\", [_dec110], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConverterToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConverterFromError\\\", [_dec111], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConverterFromError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConverterToError\\\", [_dec112], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConverterToError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangeConverterFromAmount\\\", [_dec113], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangeConverterFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangeConverterToAmount\\\", [_dec114], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangeConverterToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTransferPercentageSelectorResult\\\", [_dec115], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTransferPercentageSelectorResult\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setWithdrawPercentageSelectorResult\\\", [_dec116], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setWithdrawPercentageSelectorResult\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateFromAmount\\\", [_dec117], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateToAmount\\\", [_dec118], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateTransferFromAmount\\\", [_dec119], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateTransferFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateTransferToAmount\\\", [_dec120], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateTransferToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateWithdrawFromAmount\\\", [_dec121], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateWithdrawFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateWithdrawToAmount\\\", [_dec122], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateWithdrawToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetConverter\\\", [_dec123], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"resetConverter\\\"), _class15.prototype)), _class15));\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9TdG9yZXMvQ2FzaGllci9jYXNoaWVyLXN0b3JlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFiQTtBQWVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbERBO0FBQUE7O0FBcURBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBSUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsQ0E7QUFBQTs7QUFxQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBVkE7QUFZQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF2Q0E7QUFBQTs7QUEwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTs7OztBQ3RJQTs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTs7QUFpQ0E7QUFBQTtBQUFBOzs7QUFHQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7OztBQ3RHQTtBQUNBO0FBQUE7O0FBQ0E7QUFDQTs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7Ozs7O0FBR0E7Ozs7Ozs7O0FDdkNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQUE7O0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFDQTtBQUNBO0FBQUE7QUFBQTs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBRUE7QUFDQTs7Ozs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FFL0dBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBbUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFLQTs7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFDQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7O0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBSEE7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFDQTtBQUNBOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7O0FBQ0E7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBQ0E7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBOztBQUZBO0FBQUE7QUFBQTtBQUFBOztBQUlBO0FBQ0E7O0FBQ0E7QUFDQTtBQVBBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBaEJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBb0JBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7O0FBRkE7QUFBQTtBQUFBO0FBQUE7O0FBSUE7QUFDQTs7QUFDQTtBQUNBO0FBUEE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFoQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFvQkE7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUZBO0FBRUE7O0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBemdCQTtBQUNBO0FBQ0E7QUFGQTs7Ozs7QUFNQTs7QUFFQTs7Ozs7QUFDQTs7QUF1QkE7Ozs7O0FBQUE7O0FBZ0lBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFlQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7O0FBQ0E7QUFBQTtBQUFBOztBQURBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBO0FBRUE7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUpBO0FBV0E7Ozs7QUFFQTtBQUVBO0FBRUE7QUFLQTs7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFMQTtBQVFBO0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFEQTtBQUVBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFLQTs7QUFMQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQVVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBTEE7QUFPQTs7QUFyQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRkE7QUFBQTtBQUFBO0FBQUE7O0FBNEJBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7Ozs7QUF4U0E7Ozs7O0FBQ0E7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7Ozs7Ozs7QUFDQTs7Ozs7OztBQUNBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQWlCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbENBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFVQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBOzs7O0FBQ0E7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFQQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7QUFTQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTs7QUFIQTtBQUFBO0FBQUE7QUFBQTs7QUFNQTtBQU5BO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBU0E7O0FBVEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7O0FBYUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFQQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7QUFVQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7O0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQVRBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBWUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7OztBQW5JQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNmQTtBQUNBO0FBRUE7QUFDQTtBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUNBO0FBQ0E7Ozs7QUFPQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7Ozs7QUFFQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBOztBQU5BO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7O0FBV0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBSkE7QUFBQTs7QUFBQTtBQU9BO0FBQ0E7QUFDQTs7QUFUQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQVlBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQXpEQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1hBO0FBRUE7Ozs7Ozs7Ozs7O0FBSUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7OztBQVpBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOzs7Ozs7Ozs7O0FDSkE7QUFDQTtBQUNBOztBQUVBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUhBOztBQU9BO0FBQ0E7QUFEQTtBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBS0E7O0FBRUE7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBS0E7O0FBRUE7QUFTQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTs7QUFDQTtBQUNBOzs7OztBQUxBOztBQUNBOzs7OztBQUFBOzs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7O0FBR0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBO0FBRUE7QUFDQTs7OztBQWxCQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOzs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7QUFFQTtBQUFBO0FBQUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7Ozs7QUE1QkE7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7OztBQWtCQTs7Ozs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQVJBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOzs7QUFPQTs7O0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBRUE7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7OztBQUdBOzs7OztBQUNBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTs7QUFBQTs7QUFDQTtBQUFBO0FBQUE7O0FBREE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7QUE4a0RBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUtBOztBQUNBOztBQUVBO0FBR0E7QUFFQTtBQWJBO0FBQUE7O0FBQUE7QUFjQTtBQU9BOztBQXJCQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBMEJBOztBQUNBO0FBQ0E7QUFDQTs7QUE3QkE7QUErQkE7O0FBL0JBO0FBQUE7O0FBQUE7QUFpQ0E7QUFBQTtBQUFBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTs7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBRUE7OztBQUVBO0FBQ0E7QUFHQTtBQUFBO0FBQUE7O0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBbEVBO0FBb0VBOztBQXBFQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUE5a0RBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUVBO0FBRUE7QUFDQTtBQUFBO0FBRUE7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBRUE7O0FBeEJBO0FBeUJBOzs7O0FBc0RBO0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTs7O0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVVBOzs7QUFFQTtBQUVBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7O0FBRUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFFQTs7QUFSQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBVUE7QUFDQTs7QUFYQTtBQWFBOztBQWJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBZ0JBO0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUVBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFqQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7O0FBb0JBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU9BO0FBUEE7O0FBQUE7QUFBQTtBQUFBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUF0QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUF5QkE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUdBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBRUE7O0FBRkE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBUUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFBQTtBQUtBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFNQTs7QUFOQTtBQUFBO0FBQUE7QUFBQTs7QUFRQTtBQUVBOzs7QUFWQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBaUJBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTs7OztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFFQTtBQUNBOztBQUhBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBTUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBUUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7OztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQXRDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQTBDQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7O0FBSEE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7O0FBUEE7QUFPQTtBQVBBO0FBQUE7O0FBQUE7QUFjQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBZEE7QUFpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBL0JBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7OztBQWtDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7QUFOQTtBQUFBO0FBQUE7QUFBQTs7QUFTQTtBQVRBOztBQUFBO0FBYUE7QUFDQTs7QUFkQTtBQUFBO0FBQUE7QUFBQTs7QUFtQkE7QUFFQTs7QUFyQkE7O0FBQUE7QUFBQTtBQUFBO0FBeUJBO0FBQUE7O0FBekJBO0FBeUJBOztBQXpCQTtBQUFBO0FBQUE7QUFBQTs7QUE2QkE7QUE3QkE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFpQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBeENBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUEwQ0E7QUFDQTtBQUNBO0FBRUE7O0FBOUNBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBaURBO0FBQ0E7QUFDQTs7QUFuREE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUF1REE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBOztBQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBOzs7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBRkE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBWUE7O0FBWkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUFlQTtBQUNBOztBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7OztBQUVBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFXQTtBQUVBO0FBRUE7O0FBR0E7QUFHQTtBQUFBO0FBSUE7QUFPQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBS0E7OztBQUVBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU9BO0FBRUE7QUFHQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7Ozs7QUFFQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFOQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQVNBO0FBRUE7QUFDQTs7OztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTs7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTs7QUFDQTs7QUFqQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUFvQkE7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFEQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7O0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7O0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBbkNBO0FBcUNBOzs7QUFFQTtBQUVBO0FBR0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7Ozs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7OztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUVBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBTUE7QUFDQTtBQUNBO0FBUkE7QUFBQTs7QUFBQTtBQVlBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUE5QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUFpQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7OztBQUVBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUZBOztBQUZBO0FBQUE7QUFFQTtBQUZBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBU0E7QUFFQTtBQUNBOzs7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFIQTtBQUFBOztBQUFBO0FBTUE7O0FBTkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7O0FBU0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7OztBQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUFLQTtBQUVBO0FBQ0E7Ozs7QUFFQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBRUE7QUFGQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQU1BO0FBRUE7QUFDQTtBQUFBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFFQTs7OztBQUVBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUVBOztBQUZBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBOztBQVFBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQTFCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQTZCQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFFQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBSEE7QUFBQTs7QUFBQTtBQU1BO0FBQ0E7QUFDQTs7QUFSQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFJQTtBQUNBOztBQUVBO0FBdEJBO0FBQUE7O0FBQUE7QUF3QkE7O0FBeEJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBNEJBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7OztBQUVBO0FBUUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBOzs7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUZBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7O0FBSEE7QUFHQTs7QUFPQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFJQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBckJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7OztBQXdCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7O0FBSEE7QUFHQTs7QUFNQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQVFBO0FBREE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBN0JBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBd0NBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBSEE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFPQTtBQUNBO0FBR0E7QUFBQTs7QUFJQTtBQUNBO0FBQ0E7QUFHQTtBQUNBOzs7QUFyQkE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQXVCQTs7QUF2QkE7QUFBQTtBQUFBO0FBQUE7O0FBMEJBO0FBQ0E7QUEzQkE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFvQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFyREE7QUF1REE7O0FBdkRBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBMERBO0FBQ0E7O0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQU1BO0FBQ0E7OztBQUVBO0FBRUE7O0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUVBO0FBSUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFLQTtBQUNBOztBQUVBO0FBQ0E7QUFJQTtBQUxBO0FBT0E7Ozs7QUFFQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBRUE7O0FBRkE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBU0E7QUFUQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBV0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUNBOztBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBOztBQUVBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBRUE7QUFBQTs7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFGQTs7O0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQXJJQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQXdJQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUdBOztBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7O0FBQ0E7QUFDQTtBQUdBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBK0VBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFIQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQU1BO0FBTkE7QUFBQTs7QUFBQTtBQU9BO0FBQ0E7O0FBUkE7QUFVQTs7QUFWQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7QUFhQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFGQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFJQTtBQUpBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7OztBQVFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFDQTtBQUNBOztBQUZBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTs7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BOzs7QUE0QkE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7OztBQWlDQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7OztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FBRkE7QUFBQTtBQUFBO0FBQUE7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7O0FBUEE7QUFBQTtBQUFBO0FBQUE7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFaQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQWNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQXpCQTtBQUFBO0FBQUE7O0FBQUE7QUE0QkE7O0FBNUJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7OztBQWdDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOztBQUZBO0FBQUE7QUFBQTtBQUFBOztBQUlBO0FBQ0E7O0FBTEE7QUFBQTtBQUFBO0FBQUE7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFWQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQVlBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQTlCQTtBQUFBO0FBQUE7O0FBQUE7QUFpQ0E7O0FBakNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBcUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBSUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUFBO0FBQUE7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFBQTtBQUFBOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFBQTtBQUFBOztBQUlBO0FBRUE7O0FBRUE7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUZBO0FBU0E7QUFDQTs7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBQUE7O0FBSUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBbGlFQTs7Ozs7QUE0QkE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBRUE7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFSQTs7QUFzQkE7Ozs7Ozs7QUErbUNBO0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBb2RBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQXlEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFEQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBOztBQUZBO0FBRUE7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTs7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7QUFwQkE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQW1DQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFEQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTs7QUFGQTtBQUVBOztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTs7QUFLQTs7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFuQkE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBeUJBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFxQkEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL0NvbmZpZy9vbi1yYW1wLXByb3ZpZGVycy5qcz82MTkzIiwid2VicGFjazovL0BkZXJpdi9jYXNoaWVyLy4vX2NvbW1vbi91dGlsaXR5LmpzP2I0YjAiLCJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi9VdGlscy9WYWxpZGF0b3IvZXJyb3JzLmpzP2ZjNGYiLCJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi9VdGlscy9WYWxpZGF0b3IvdmFsaWRhdG9yLmpzP2U3ZmIiLCJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi9VdGlscy9WYWxpZGF0b3IvaW5kZXguanM/OTdjOCIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL1N0b3Jlcy9iYXNlLXN0b3JlLmpzP2M0YTEiLCJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi9TdG9yZXMvQ2FzaGllci9vbi1yYW1wLXN0b3JlLmpzPzA0NDAiLCJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi9TdG9yZXMvQ2FzaGllci90cmFuc2FjdGlvbi1oaXN0b3J5LXN0b3JlLmpzPzAwMWEiLCJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi9TdG9yZXMvYWNjb3VudC1wcm9tcHQtZGlhbG9nLXN0b3JlLmpzPzdjYzQiLCJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi9TdG9yZXMvZXJyb3ItZGlhbG9nLXN0b3JlLmpzPzNmNGEiLCJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi9Db250YWluZXJzL2Nhc2hpZXItbm90aWZpY2F0aW9ucy5qc3g/ZmIyNCIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL1N0b3Jlcy9DYXNoaWVyL2Nhc2hpZXItc3RvcmUuanM/OTZjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gJ0BkZXJpdi90cmFuc2xhdGlvbnMnO1xuXG5jb25zdCBjcmVhdGVCYW54YVByb3ZpZGVyID0gc3RvcmUgPT4gKHtcbiAgICBpY29uOiB7IGRhcms6ICdJY0Nhc2hpZXJCYW54YURhcmsnLCBsaWdodDogJ0ljQ2FzaGllckJhbnhhTGlnaHQnIH0sXG4gICAgbmFtZTogJ0JhbnhhJyxcbiAgICBnZXREZXNjcmlwdGlvbjogKCkgPT5cbiAgICAgICAgbG9jYWxpemUoXG4gICAgICAgICAgICAnQSBmYXN0IGFuZCBzZWN1cmUgZmlhdC10by1jcnlwdG8gcGF5bWVudCBzZXJ2aWNlLiBEZXBvc2l0IGNyeXB0b2N1cnJlbmNpZXMgZnJvbSBhbnl3aGVyZSBpbiB0aGUgd29ybGQgdXNpbmcgeW91ciBjcmVkaXQvZGViaXQgY2FyZHMgYW5kIGJhbmsgdHJhbnNmZXJzLidcbiAgICAgICAgKSxcbiAgICBnZXRBbGxvd2VkUmVzaWRlbmNpZXM6ICgpID0+IFsnKiddLFxuICAgIGdldFBheW1lbnRJY29uczogKCkgPT4gW1xuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJWaXNhRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyVmlzYUxpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJNYXN0ZXJjYXJkRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyTWFzdGVyY2FyZExpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJCcGF5RGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyQnBheUxpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJTZXBhRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyU2VwYUxpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJCbHVlc2h5ZnREYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJCbHVlc2h5ZnRMaWdodCcgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVyRmxleGVwaW5EYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJGbGV4ZXBpbkxpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJQYXlJZERhcmsnLCBsaWdodDogJ0ljQ2FzaGllclBheUlkTGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclBvbGlEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJQb2xpTGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllckFwcGxlUGF5JywgbGlnaHQ6ICdJY0Nhc2hpZXJBcHBsZVBheScgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVySW50ZXJhY0V0cmFuc2ZlcicsIGxpZ2h0OiAnSWNDYXNoaWVySW50ZXJhY0V0cmFuc2ZlcicgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVySWRlYWwnLCBsaWdodDogJ0ljQ2FzaGllcklkZWFsJyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJQb3N0QmlsbFBheURhcmsnLCBsaWdodDogJ0ljQ2FzaGllclBvc3RCaWxsUGF5TGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclNvZm9ydCcsIGxpZ2h0OiAnSWNDYXNoaWVyU29mb3J0JyB9LFxuICAgIF0sXG4gICAgZ2V0U2NyaXB0RGVwZW5kZW5jaWVzOiAoKSA9PiBbXSwgLy8gTm9uZS5cbiAgICBnZXREZWZhdWx0RnJvbUN1cnJlbmN5OiAoKSA9PiAnJyxcbiAgICBnZXRGcm9tQ3VycmVuY2llczogKCkgPT4gWycqJ10sXG4gICAgZ2V0VG9DdXJyZW5jaWVzOiAoKSA9PiBbJyonXSxcbiAgICBnZXRXaWRnZXRIdG1sOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBzdG9yZS5XUy5zZXJ2aWNlVG9rZW4oe1xuICAgICAgICAgICAgICAgIHNlcnZpY2VfdG9rZW46IDEsXG4gICAgICAgICAgICAgICAgc2VydmljZTogJ2JhbnhhJyxcbiAgICAgICAgICAgICAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICAgICAgICB9KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdXJsIH0gPSByZXNwb25zZS5zZXJ2aWNlX3Rva2VuLmJhbnhhO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXNvbHZpbmcgZW1wdHkgd2lsbC9zaG91bGQgcmVkaXJlY3QgdXNlci5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG9uTW91bnRXaWRnZXRDb250YWluZXI6ICgpID0+IHt9LFxuICAgIHNob3VsZF9zaG93X2RlcG9zaXRfYWRkcmVzczogZmFsc2UsXG59KTtcblxuY29uc3QgY3JlYXRlQ2hhbmdlbGx5UHJvdmlkZXIgPSBzdG9yZSA9PiAoe1xuICAgIGljb246IHsgZGFyazogJ0ljQ2FzaGllckNoYW5nZWxseURhcmsnLCBsaWdodDogJ0ljQ2FzaGllckNoYW5nZWxseUxpZ2h0JyB9LFxuICAgIG5hbWU6ICdDaGFuZ2VsbHknLFxuICAgIGdldERlc2NyaXB0aW9uOiAoKSA9PlxuICAgICAgICBsb2NhbGl6ZShcbiAgICAgICAgICAgICdZb3VyIHNpbXBsZSBhY2Nlc3MgdG8gY3J5cHRvLiBGYXN0IGFuZCBzZWN1cmUgd2F5IHRvIGV4Y2hhbmdlIGFuZCBwdXJjaGFzZSBjcnlwdG9jdXJyZW5jaWVzLiAyNC83IGxpdmUgY2hhdCBzdXBwb3J0LidcbiAgICAgICAgKSxcbiAgICBnZXRBbGxvd2VkUmVzaWRlbmNpZXM6ICgpID0+IFsnKiddLFxuICAgIGdldFBheW1lbnRJY29uczogKCkgPT4gW1xuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJWaXNhRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyVmlzYUxpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJNYXN0ZXJjYXJkRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyTWFzdGVyY2FyZExpZ2h0JyB9LFxuICAgIF0sXG4gICAgZ2V0U2NyaXB0RGVwZW5kZW5jaWVzOiAoKSA9PiBbXSxcbiAgICBnZXREZWZhdWx0RnJvbUN1cnJlbmN5OiAoKSA9PiAndXNkJyxcbiAgICBnZXRGcm9tQ3VycmVuY2llczogKCkgPT4gWyd1c2QnLCAnZXVyJywgJ2dicCddLFxuICAgIGdldFRvQ3VycmVuY2llczogKCkgPT4gWydiY2gnLCAnYnRjJywgJ2V0YycsICdldGgnLCAnbHRjJywgJ3VzdCddLFxuICAgIGdldFdpZGdldEh0bWwoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoJ2h0dHBzOi8vd2lkZ2V0LmNoYW5nZWxseS5jb20vP3Y9MyZ0aGVtZT1kZWZhdWx0Jyk7XG4gICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnZnJvbURlZmF1bHQnLCB0aGlzLmdldERlZmF1bHRGcm9tQ3VycmVuY3koKSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW5jeSA9IHN0b3JlLnJvb3Rfc3RvcmUuY2xpZW50LmN1cnJlbmN5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRUb0N1cnJlbmNpZXMoKS5pbmNsdWRlcyhjdXJyZW5jeSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b19jdXJyZW5jeSA9IGN1cnJlbmN5ID09PSAndXN0JyA/ICd1c2R0JyA6IGN1cnJlbmN5O1xuICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCd0bycsIHRvX2N1cnJlbmN5KTtcbiAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgndG9EZWZhdWx0JywgdG9fY3VycmVuY3kpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnYW1vdW50JywgMSk7XG4gICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnbWVyY2hhbnRfaWQnLCAnaWlxM2pkdDJwNDR5cmZieCcpO1xuICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBvbk1vdW50V2lkZ2V0Q29udGFpbmVyOiAoKSA9PiB7fSxcbiAgICBzaG91bGRfc2hvd19kZXBvc2l0X2FkZHJlc3M6IHRydWUsXG59KTtcblxuY29uc3QgY3JlYXRlWGFuUG9vbFByb3ZpZGVyID0gc3RvcmUgPT4gKHtcbiAgICBpY29uOiB7IGRhcms6ICdJY0Nhc2hpZXJYYW5wb29sRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyWGFucG9vbExpZ2h0JyB9LFxuICAgIG5hbWU6ICdYYW5Qb29sJyxcbiAgICBnZXREZXNjcmlwdGlvbjogKCkgPT5cbiAgICAgICAgbG9jYWxpemUoXG4gICAgICAgICAgICAnQnV5IGNyeXB0b2N1cnJlbmNpZXMgaW4gYW4gaW5zdGFudC4gRW5qb3kgZWFzeSwgcXVpY2ssIGFuZCBzZWN1cmUgZXhjaGFuZ2VzIHVzaW5nIHlvdXIgbG9jYWwgcGF5bWVudCBtZXRob2RzLidcbiAgICAgICAgKSxcbiAgICBnZXRBbGxvd2VkUmVzaWRlbmNpZXM6ICgpID0+IFsnKiddLFxuICAgIGdldFBheW1lbnRJY29uczogKCkgPT4gW1xuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJGcHNEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJGcHNMaWdodCcgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVyQWxpUGF5RGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyQWxpUGF5TGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllckdvUGF5RGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyR29QYXlMaWdodCcgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVyTWFuZGlyaVBheScsIGxpZ2h0OiAnSWNDYXNoaWVyTWFuZGlyaVBheScgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVySW5zdGFQYXlMaWdodCcsIGxpZ2h0OiAnSWNDYXNoaWVySW5zdGFQYXlEYXJrJyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJDZWJ1YW5hTGh1aWxsaWVyRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyQ2VidWFuYUxodWlsbGllckxpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJQYXlOb3dEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJQYXlOb3dMaWdodCcgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVyVXBpRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyVXBpTGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclByb21wdFBheURhcmsnLCBsaWdodDogJ0ljQ2FzaGllclByb21wdFBheUxpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJWaWV0dGxlUGF5JywgbGlnaHQ6ICdJY0Nhc2hpZXJWaWV0dGxlUGF5JyB9LFxuICAgIF0sXG4gICAgZ2V0U2NyaXB0RGVwZW5kZW5jaWVzOiAoKSA9PiBbXSxcbiAgICBnZXRUb0N1cnJlbmNpZXM6ICgpID0+IFsnYnRjJywgJ2V0aCcsICd1c3QnLCAnemlsJywgJ25lbSddLFxuICAgIGdldFdpZGdldEh0bWwoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgY3VycmVuY3kgfSA9IHN0b3JlLnJvb3Rfc3RvcmUuY2xpZW50O1xuXG4gICAgICAgICAgICBsZXQgdXJsID0gJ2h0dHBzOi8vY2hlY2tvdXQueGFucG9vbC5jb20vJztcblxuICAgICAgICAgICAgdXJsICs9IGA/YXBpS2V5PWRiNGVjNjM4ZGZmOWE2OGFiZGExZWY2Yjc2MzhjMjIwYDtcbiAgICAgICAgICAgIHVybCArPSBgJnJlZGlyZWN0VXJsPSR7d2luZG93LmxvY2F0aW9uLmhyZWZ9YDtcbiAgICAgICAgICAgIHVybCArPSBgJndhbGxldD0ke3N0b3JlLmRlcG9zaXRfYWRkcmVzc31gO1xuICAgICAgICAgICAgdXJsICs9IGAmY3J5cHRvQ3VycmVuY3k9JHtjdXJyZW5jeSA9PT0gJ1VTVCcgPyAnVVNEVCcgOiBjdXJyZW5jeX1gO1xuICAgICAgICAgICAgdXJsICs9IGAmdHJhbnNhY3Rpb25UeXBlPWJ1eWA7XG5cbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgb25Nb3VudFdpZGdldENvbnRhaW5lcjogKCkgPT4ge30sXG4gICAgc2hvdWxkX3Nob3dfZGVwb3NpdF9hZGRyZXNzOiBmYWxzZSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY3JlYXRlQmFueGFQcm92aWRlcixcbiAgICBjcmVhdGVDaGFuZ2VsbHlQcm92aWRlcixcbiAgICBjcmVhdGVYYW5Qb29sUHJvdmlkZXIsXG59O1xuIiwiaW1wb3J0IHsgZ2V0Q3VycmVuY3lEaXNwbGF5Q29kZSB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuXG5jb25zdCB0ZW1wbGF0ZSA9IChzdHJpbmcsIGNvbnRlbnQpID0+IHtcbiAgICBsZXQgdG9fcmVwbGFjZSA9IGNvbnRlbnQ7XG4gICAgaWYgKGNvbnRlbnQgJiYgIUFycmF5LmlzQXJyYXkoY29udGVudCkpIHtcbiAgICAgICAgdG9fcmVwbGFjZSA9IFtjb250ZW50XTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXFtfKFxcZCspXS9nLCAocywgaW5kZXgpID0+IHRvX3JlcGxhY2VbK2luZGV4IC0gMV0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgRE9NIGVsZW1lbnQgYW5kIGFkZHMgYW55IGF0dHJpYnV0ZXMgdG8gaXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRhZ19uYW1lOiB0aGUgdGFnIHRvIGNyZWF0ZSwgZS5nLiAnZGl2JywgJ2EnLCBldGNcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzOiBhbGwgdGhlIGF0dHJpYnV0ZXMgdG8gYXNzaWduLCBlLmcuIHsgaWQ6ICcuLi4nLCBjbGFzczogJy4uLicsIGh0bWw6ICcuLi4nLCAuLi4gfVxuICogQHJldHVybiB0aGUgY3JlYXRlZCBET00gZWxlbWVudFxuICovXG5jb25zdCBjcmVhdGVFbGVtZW50ID0gKHRhZ19uYW1lLCBhdHRyaWJ1dGVzID0ge30pID0+IHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnX25hbWUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goYXR0ciA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1thdHRyXTtcbiAgICAgICAgaWYgKGF0dHIgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChhdHRyID09PSAnaHRtbCcpIHtcbiAgICAgICAgICAgIGVsLmh0bWwodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGF0dHIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBlbDtcbn07XG5cbmxldCBzdGF0aWNfaGFzaDtcbmNvbnN0IGdldFN0YXRpY0hhc2ggPSAoKSA9PiB7XG4gICAgc3RhdGljX2hhc2ggPVxuICAgICAgICBzdGF0aWNfaGFzaCB8fCAoZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0W3NyYyo9XCJtYWluXCJdJykuZ2V0QXR0cmlidXRlKCdzcmMnKSB8fCAnJykuc3BsaXQoJy4nKVsxXTtcbiAgICByZXR1cm4gc3RhdGljX2hhc2g7XG59O1xuXG5jbGFzcyBQcm9taXNlQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgY29weVRvQ2xpcGJvYXJkID0gdGV4dCA9PiB7XG4gICAgY29uc3QgdGV4dEZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICB0ZXh0RmllbGQuaW5uZXJUZXh0ID0gdGV4dDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRleHRGaWVsZCk7XG4gICAgdGV4dEZpZWxkLnNlbGVjdCgpO1xuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgdGV4dEZpZWxkLnJlbW92ZSgpO1xufTtcbi8vIGV1IGNvdW50cmllcyB0byBzdXBwb3J0XG5jb25zdCBldV9jb3VudHJpZXMgPSBbXG4gICAgJ2l0JyxcbiAgICAnZGUnLFxuICAgICdmcicsXG4gICAgJ2x1JyxcbiAgICAnZ3InLFxuICAgICdtZicsXG4gICAgJ2VzJyxcbiAgICAnc2snLFxuICAgICdsdCcsXG4gICAgJ25sJyxcbiAgICAnYXQnLFxuICAgICdiZycsXG4gICAgJ3NpJyxcbiAgICAnY3knLFxuICAgICdiZScsXG4gICAgJ3JvJyxcbiAgICAnaHInLFxuICAgICdwdCcsXG4gICAgJ3BsJyxcbiAgICAnbHYnLFxuICAgICdlZScsXG4gICAgJ2N6JyxcbiAgICAnZmknLFxuICAgICdodScsXG4gICAgJ2RrJyxcbiAgICAnc2UnLFxuICAgICdpZScsXG4gICAgJ2ltJyxcbiAgICAnZ2InLFxuICAgICdtdCcsXG5dO1xuLy8gY2hlY2sgaWYgY2xpZW50IGlzIGZyb20gRVVcbmNvbnN0IGlzRXVDb3VudHJ5ID0gY291bnRyeSA9PiBldV9jb3VudHJpZXMuaW5jbHVkZXMoY291bnRyeSk7XG5cbi8vIGNoZWNrIGlmIG1sdCBvciBkeHRyYWRlIGZvciBhY2NvdW50IHRleHRcbmNvbnN0IGdldEFjY291bnRUZXh0ID0gYWNjb3VudCA9PiB7XG4gICAgbGV0IGFjY291bnRfdGV4dCA9ICcnO1xuICAgIGlmIChhY2NvdW50LmlzX2R4dHJhZGUgfHwgYWNjb3VudC5pc19tdCkge1xuICAgICAgICBhY2NvdW50X3RleHQgPSBhY2NvdW50LnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWNjb3VudF90ZXh0ID0gZ2V0Q3VycmVuY3lEaXNwbGF5Q29kZShhY2NvdW50LnRleHQpO1xuICAgIH1cblxuICAgIHJldHVybiBhY2NvdW50X3RleHQ7XG59O1xuXG5leHBvcnQgeyBjb3B5VG9DbGlwYm9hcmQsIGNyZWF0ZUVsZW1lbnQsIGdldEFjY291bnRUZXh0LCBnZXRTdGF0aWNIYXNoLCBpc0V1Q291bnRyeSwgUHJvbWlzZUNsYXNzLCB0ZW1wbGF0ZSB9O1xuIiwiY2xhc3MgRXJyb3JzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSB7fTtcbiAgICB9XG5cbiAgICBhZGQoYXR0cmlidXRlLCBtZXNzYWdlKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXMoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcnNbYXR0cmlidXRlXSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZXJyb3JzW2F0dHJpYnV0ZV0uaW5kZXhPZihtZXNzYWdlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzW2F0dHJpYnV0ZV0ucHVzaChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFsbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JzO1xuICAgIH1cblxuICAgIGZpcnN0KGF0dHJpYnV0ZSkge1xuICAgICAgICBpZiAodGhpcy5oYXMoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JzW2F0dHJpYnV0ZV1bMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2V0KGF0dHJpYnV0ZSkge1xuICAgICAgICBpZiAodGhpcy5oYXMoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JzW2F0dHJpYnV0ZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgaGFzKGF0dHJpYnV0ZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZXJyb3JzLCBhdHRyaWJ1dGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXJyb3JzO1xuIiwiaW1wb3J0IHsgZ2V0UHJlQnVpbGREVlJzIH0gZnJvbSAnQGRlcml2L3NoYXJlZCc7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJ19jb21tb24vdXRpbGl0eSc7XG5pbXBvcnQgRXJyb3IgZnJvbSAnLi9lcnJvcnMnO1xuXG5jbGFzcyBWYWxpZGF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKGlucHV0LCBydWxlcywgc3RvcmUgPSBudWxsKSB7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgICAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gbmV3IEVycm9yKCk7XG5cbiAgICAgICAgdGhpcy5lcnJvcl9jb3VudCA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGZhaWx1cmUgYW5kIGVycm9yIG1lc3NhZ2UgZm9yIGdpdmVuIHJ1bGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcnVsZVxuICAgICAqL1xuICAgIGFkZEZhaWx1cmUoYXR0cmlidXRlLCBydWxlLCBlcnJvcl9tZXNzYWdlKSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gZXJyb3JfbWVzc2FnZSB8fCBydWxlLm9wdGlvbnMubWVzc2FnZSB8fCBnZXRQcmVCdWlsZERWUnMoKVtydWxlLm5hbWVdLm1lc3NhZ2UoKTtcbiAgICAgICAgaWYgKHJ1bGUubmFtZSA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0ZW1wbGF0ZShtZXNzYWdlLCBbXG4gICAgICAgICAgICAgICAgcnVsZS5vcHRpb25zLm1pbiA9PT0gcnVsZS5vcHRpb25zLm1heCA/IHJ1bGUub3B0aW9ucy5taW4gOiBgJHtydWxlLm9wdGlvbnMubWlufS0ke3J1bGUub3B0aW9ucy5tYXh9YCxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9IGVsc2UgaWYgKHJ1bGUubmFtZSA9PT0gJ21pbicpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0ZW1wbGF0ZShtZXNzYWdlLCBbcnVsZS5vcHRpb25zLm1pbl0pO1xuICAgICAgICB9IGVsc2UgaWYgKHJ1bGUubmFtZSA9PT0gJ25vdF9lcXVhbCcpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0ZW1wbGF0ZShtZXNzYWdlLCBbcnVsZS5vcHRpb25zLm5hbWUxLCBydWxlLm9wdGlvbnMubmFtZTJdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVycm9ycy5hZGQoYXR0cmlidXRlLCBtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5lcnJvcl9jb3VudCsrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1bnMgdmFsaWRhdG9yXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGl0IHBhc3NlczsgdHJ1ZSA9IHBhc3NlcywgZmFsc2UgPSBmYWlsc1xuICAgICAqL1xuICAgIGNoZWNrKCkge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmlucHV0KS5mb3JFYWNoKGF0dHJpYnV0ZSA9PiB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnJ1bGVzLCBhdHRyaWJ1dGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJ1bGVzW2F0dHJpYnV0ZV0uZm9yRWFjaChydWxlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBydWxlT2JqZWN0ID0gVmFsaWRhdG9yLmdldFJ1bGVPYmplY3QocnVsZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXJ1bGVPYmplY3QudmFsaWRhdG9yICYmIHR5cGVvZiBydWxlT2JqZWN0LnZhbGlkYXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJ1bGVPYmplY3Qub3B0aW9ucy5jb25kaXRpb24gJiYgIXJ1bGVPYmplY3Qub3B0aW9ucy5jb25kaXRpb24odGhpcy5zdG9yZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlucHV0W2F0dHJpYnV0ZV0gPT09ICcnICYmIHJ1bGVPYmplY3QubmFtZSAhPT0gJ3JlcScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBpc192YWxpZCwgZXJyb3JfbWVzc2FnZTtcbiAgICAgICAgICAgICAgICBpZiAocnVsZU9iamVjdC5uYW1lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGlzX29rLCBtZXNzYWdlIH0gPSBydWxlT2JqZWN0LnZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRbYXR0cmlidXRlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVPYmplY3Qub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlzX3ZhbGlkID0gaXNfb2s7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yX21lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX3ZhbGlkID0gcnVsZU9iamVjdC52YWxpZGF0b3IodGhpcy5pbnB1dFthdHRyaWJ1dGVdLCBydWxlT2JqZWN0Lm9wdGlvbnMsIHRoaXMuc3RvcmUsIHRoaXMuaW5wdXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghaXNfdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRGYWlsdXJlKGF0dHJpYnV0ZSwgcnVsZU9iamVjdCwgZXJyb3JfbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gIXRoaXMuZXJyb3JfY291bnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIGlmIHZhbGlkYXRpb24gcGFzc2VzXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzUGFzc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGVjaygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBydWxlIGFycmF5IHRvIGFuIG9iamVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIHthcnJheX0gcnVsZVxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UnVsZU9iamVjdChydWxlKSB7XG4gICAgICAgIGNvbnN0IGlzX3J1bGVfc3RyaW5nID0gdHlwZW9mIHJ1bGUgPT09ICdzdHJpbmcnO1xuICAgICAgICBjb25zdCBydWxlX29iamVjdCA9IHtcbiAgICAgICAgICAgIG5hbWU6IGlzX3J1bGVfc3RyaW5nID8gcnVsZSA6IHJ1bGVbMF0sXG4gICAgICAgICAgICBvcHRpb25zOiBpc19ydWxlX3N0cmluZyA/IHt9IDogcnVsZVsxXSB8fCB7fSxcbiAgICAgICAgfTtcblxuICAgICAgICBydWxlX29iamVjdC52YWxpZGF0b3IgPSBydWxlX29iamVjdC5uYW1lID09PSAnY3VzdG9tJyA/IHJ1bGVbMV0uZnVuYyA6IGdldFByZUJ1aWxkRFZScygpW3J1bGVfb2JqZWN0Lm5hbWVdLmZ1bmM7XG5cbiAgICAgICAgcmV0dXJuIHJ1bGVfb2JqZWN0O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmFsaWRhdG9yO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi92YWxpZGF0b3InO1xuIiwiaW1wb3J0IHsgYWN0aW9uLCBpbnRlcmNlcHQsIG9ic2VydmFibGUsIHJlYWN0aW9uLCB0b0pTLCB3aGVuIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBpc1Byb2R1Y3Rpb24sIGlzRW1wdHlPYmplY3QgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcblxuaW1wb3J0IFZhbGlkYXRvciBmcm9tICdVdGlscy9WYWxpZGF0b3InO1xuXG4vKipcbiAqIEJhc2VTdG9yZSBjbGFzcyBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgYWxsIGRlZmluZWQgc3RvcmVzIGluIHRoZSBhcHBsaWNhdGlvbi4gSXQgaGFuZGxlcyBzb21lIHN0dWZmIHN1Y2ggYXM6XG4gKiAgMS4gQ3JlYXRpbmcgc25hcHNob3Qgb2JqZWN0IGZyb20gdGhlIHN0b3JlLlxuICogIDIuIFNhdmluZyB0aGUgc3RvcmUncyBzbmFwc2hvdCBpbiBsb2NhbC9zZXNzaW9uIHN0b3JhZ2UgYW5kIGtlZXBpbmcgdGhlbSBpbiBzeW5jLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlU3RvcmUge1xuICAgIC8qKlxuICAgICAqIEFuIGVudW0gb2JqZWN0IHRvIGRlZmluZSBMT0NBTF9TVE9SQUdFIGFuZCBTRVNTSU9OX1NUT1JBR0VcbiAgICAgKi9cbiAgICBzdGF0aWMgU1RPUkFHRVMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgTE9DQUxfU1RPUkFHRTogU3ltYm9sKCdMT0NBTF9TVE9SQUdFJyksXG4gICAgICAgIFNFU1NJT05fU1RPUkFHRTogU3ltYm9sKCdTRVNTSU9OX1NUT1JBR0UnKSxcbiAgICB9KTtcblxuICAgIEBvYnNlcnZhYmxlXG4gICAgdmFsaWRhdGlvbl9lcnJvcnMgPSB7fTtcblxuICAgIEBvYnNlcnZhYmxlXG4gICAgdmFsaWRhdGlvbl9ydWxlcyA9IHt9O1xuXG4gICAgcHJlU3dpdGNoQWNjb3VudERpc3Bvc2VyID0gbnVsbDtcbiAgICBwcmVfc3dpdGNoX2FjY291bnRfbGlzdGVuZXIgPSBudWxsO1xuXG4gICAgc3dpdGNoQWNjb3VudERpc3Bvc2VyID0gbnVsbDtcbiAgICBzd2l0Y2hfYWNjb3VudF9saXN0ZW5lciA9IG51bGw7XG5cbiAgICBsb2dvdXREaXNwb3NlciA9IG51bGw7XG4gICAgbG9nb3V0X2xpc3RlbmVyID0gbnVsbDtcblxuICAgIGNsaWVudEluaXREaXNwb3NlciA9IG51bGw7XG4gICAgY2xpZW50X2luaXRfbGlzdGVuZXIgPSBudWxsO1xuXG4gICAgbmV0d29ya1N0YXR1c0NoYW5nZURpc3Bvc2VyID0gbnVsbDtcbiAgICBuZXR3b3JrX3N0YXR1c19jaGFuZ2VfbGlzdGVuZXIgPSBudWxsO1xuXG4gICAgdGhlbWVDaGFuZ2VEaXNwb3NlciA9IG51bGw7XG4gICAgdGhlbWVfY2hhbmdlX2xpc3RlbmVyID0gbnVsbDtcblxuICAgIHJlYWxBY2NvdW50U2lnbnVwRW5kZWREaXNwb3NlciA9IG51bGw7XG4gICAgcmVhbF9hY2NvdW50X3NpZ251cF9lbmRlZF9saXN0ZW5lciA9IG51bGw7XG5cbiAgICBAb2JzZXJ2YWJsZSBwYXJ0aWFsX2ZldGNoX3RpbWUgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3Igb2YgdGhlIGJhc2UgY2xhc3MgdGhhdCBnZXRzIHByb3BlcnRpZXMnIG5hbWUgb2YgY2hpbGQgd2hpY2ggc2hvdWxkIGJlIHNhdmVkIGluIHN0b3JhZ2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgKiAgICAgQHByb3BlcnR5IHtPYmplY3R9ICAgcm9vdF9zdG9yZSAtIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSByb290IHN0b3JlIG9mIHRoZSBhcHAuXG4gICAgICogICAgIEBwcm9wZXJ0eSB7U3RyaW5nW119IGxvY2FsX3N0b3JhZ2VfcHJvcGVydGllcyAtIEEgbGlzdCBvZiBwcm9wZXJ0aWVzJyBuYW1lcyB0aGF0IHNob3VsZCBiZSBrZXB0IGluIGxvY2FsU3RvcmFnZS5cbiAgICAgKiAgICAgQHByb3BlcnR5IHtTdHJpbmdbXX0gc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMgLSBBIGxpc3Qgb2YgcHJvcGVydGllcycgbmFtZXMgdGhhdCBzaG91bGQgYmUga2VwdCBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAgKiAgICAgQHByb3BlcnR5IHtPYmplY3R9ICAgdmFsaWRhdGlvbl9ydWxlcyAtIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSB2YWxpZGF0aW9uIHJ1bGVzIGZvciBlYWNoIHByb3BlcnR5IG9mIHRoZSBzdG9yZS5cbiAgICAgKiAgICAgQHByb3BlcnR5IHtTdHJpbmd9ICAgc3RvcmVfbmFtZSAtIEV4cGxpY2l0IHN0b3JlIG5hbWUgZm9yIGJyb3dzZXIgYXBwbGljYXRpb24gc3RvcmFnZSAodG8gYnlwYXNzIG1pbmlmaWNhdGlvbilcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgeyByb290X3N0b3JlLCBsb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMsIHNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzLCB2YWxpZGF0aW9uX3J1bGVzLCBzdG9yZV9uYW1lIH0gPVxuICAgICAgICAgICAgb3B0aW9ucztcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Jvb3Rfc3RvcmUnLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdsb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMnLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllcycsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGhhc19sb2NhbF9vcl9zZXNzaW9uX3N0b3JhZ2UgPVxuICAgICAgICAgICAgKGxvY2FsX3N0b3JhZ2VfcHJvcGVydGllcyAmJiBsb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMubGVuZ3RoKSB8fFxuICAgICAgICAgICAgKHNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzICYmIHNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKGhhc19sb2NhbF9vcl9zZXNzaW9uX3N0b3JhZ2UpIHtcbiAgICAgICAgICAgIGlmICghc3RvcmVfbmFtZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc3RvcmVfbmFtZSBpcyByZXF1aXJlZCBmb3IgbG9jYWwvc2Vzc2lvbiBzdG9yYWdlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RvcmVfbmFtZScsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc3RvcmVfbmFtZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucm9vdF9zdG9yZSA9IHJvb3Rfc3RvcmU7XG4gICAgICAgIHRoaXMubG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzID0gbG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzIHx8IFtdO1xuICAgICAgICB0aGlzLnNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzID0gc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMgfHwgW107XG4gICAgICAgIHRoaXMuc2V0VmFsaWRhdGlvblJ1bGVzKHZhbGlkYXRpb25fcnVsZXMpO1xuXG4gICAgICAgIHRoaXMuc2V0dXBSZWFjdGlvbkZvckxvY2FsU3RvcmFnZSgpO1xuICAgICAgICB0aGlzLnNldHVwUmVhY3Rpb25Gb3JTZXNzaW9uU3RvcmFnZSgpO1xuICAgICAgICB0aGlzLnJldHJpZXZlRnJvbVN0b3JhZ2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIHNuYXBzaG90IG9mIHRoZSBjdXJyZW50IHN0b3JlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBwcm9wZXJ0aWVzIC0gQSBsaXN0IG9mIHByb3BlcnRpZXMnIG5hbWVzIHRoYXQgc2hvdWxkIGJlIGluIHRoZSBzbmFwc2hvdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gUmV0dXJucyBhIGNsb25lZCBvYmplY3Qgb2YgdGhlIHN0b3JlLlxuICAgICAqL1xuICAgIGdldFNuYXBzaG90KHByb3BlcnRpZXMpIHtcbiAgICAgICAgbGV0IHNuYXBzaG90ID0gdG9KUyh0aGlzKTtcblxuICAgICAgICBpZiAoIWlzRW1wdHlPYmplY3QodGhpcy5yb290X3N0b3JlKSkge1xuICAgICAgICAgICAgc25hcHNob3Qucm9vdF9zdG9yZSA9IHRoaXMucm9vdF9zdG9yZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzbmFwc2hvdCA9IHByb3BlcnRpZXMucmVkdWNlKChyZXN1bHQsIHApID0+IE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7IFtwXTogc25hcHNob3RbcF0gfSksIHt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIGEgcmVhY3Rpb24gb24gcHJvcGVydGllcyB3aGljaCBhcmUgbWVudGlvbmVkIGluIGBsb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXNgXG4gICAgICogIGFuZCBpbnZva2VzIGBzYXZlVG9TdG9yYWdlYCB3aGVuIHRoZXJlIGFyZSBhbnkgY2hhbmdlcyBvbiB0aGVtLlxuICAgICAqXG4gICAgICovXG4gICAgc2V0dXBSZWFjdGlvbkZvckxvY2FsU3RvcmFnZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVhY3Rpb24oXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5sb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMubWFwKGkgPT4gdGhpc1tpXSksXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5zYXZlVG9TdG9yYWdlKHRoaXMubG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzLCBCYXNlU3RvcmUuU1RPUkFHRVMuTE9DQUxfU1RPUkFHRSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIGEgcmVhY3Rpb24gb24gcHJvcGVydGllcyB3aGljaCBhcmUgbWVudGlvbmVkIGluIGBzZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllc2BcbiAgICAgKiAgYW5kIGludm9rZXMgYHNhdmVUb1N0b3JhZ2VgIHdoZW4gdGhlcmUgYXJlIGFueSBjaGFuZ2VzIG9uIHRoZW0uXG4gICAgICpcbiAgICAgKi9cbiAgICBzZXR1cFJlYWN0aW9uRm9yU2Vzc2lvblN0b3JhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVhY3Rpb24oXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5zZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllcy5tYXAoaSA9PiB0aGlzW2ldKSxcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLnNhdmVUb1N0b3JhZ2UodGhpcy5zZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllcywgQmFzZVN0b3JlLlNUT1JBR0VTLlNFU1NJT05fU1RPUkFHRSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHByb3BlcnRpZXMgdGhhdCBhcmUgbm90IHBhc3NlZCBmcm9tIHRoZSBzbmFwc2hvdCBvZiB0aGUgc3RvcmUgYW5kIHNhdmVzIGl0IHRvIHRoZSBwYXNzZWQgc3RvcmFnZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmdbXX0gcHJvcGVydGllcyAtIEEgbGlzdCBvZiB0aGUgc3RvcmUncyBwcm9wZXJ0aWVzJyBuYW1lcyB3aGljaCBzaG91bGQgYmUgc2F2ZWQgaW4gdGhlIHN0b3JhZ2UuXG4gICAgICogQHBhcmFtIHtTeW1ib2x9ICAgc3RvcmFnZSAgICAtIEEgc3ltYm9sIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIHN0b3JhZ2Ugd2hpY2ggdGhlIHNuYXBzaG90IHNob3VsZCBiZSBzdG9yZWQgaW4gaXQuXG4gICAgICpcbiAgICAgKi9cbiAgICBzYXZlVG9TdG9yYWdlKHByb3BlcnRpZXMsIHN0b3JhZ2UpIHtcbiAgICAgICAgY29uc3Qgc25hcHNob3QgPSBKU09OLnN0cmluZ2lmeSh0aGlzLmdldFNuYXBzaG90KHByb3BlcnRpZXMpLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc3RvcmFnZSA9PT0gQmFzZVN0b3JlLlNUT1JBR0VTLkxPQ0FMX1NUT1JBR0UpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuc3RvcmVfbmFtZSwgc25hcHNob3QpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0b3JhZ2UgPT09IEJhc2VTdG9yZS5TVE9SQUdFUy5TRVNTSU9OX1NUT1JBR0UpIHtcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0odGhpcy5zdG9yZV9uYW1lLCBzbmFwc2hvdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgc2F2ZWQgc25hcHNob3Qgb2YgdGhlIHN0b3JlIGFuZCBhc3NpZ25zIHRvIHRoZSBjdXJyZW50IGluc3RhbmNlLlxuICAgICAqXG4gICAgICovXG4gICAgQGFjdGlvblxuICAgIHJldHJpZXZlRnJvbVN0b3JhZ2UoKSB7XG4gICAgICAgIGNvbnN0IGxvY2FsX3N0b3JhZ2Vfc25hcHNob3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuc3RvcmVfbmFtZSwge30pKTtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbl9zdG9yYWdlX3NuYXBzaG90ID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHRoaXMuc3RvcmVfbmFtZSwge30pKTtcblxuICAgICAgICBjb25zdCBzbmFwc2hvdCA9IHsgLi4ubG9jYWxfc3RvcmFnZV9zbmFwc2hvdCwgLi4uc2Vzc2lvbl9zdG9yYWdlX3NuYXBzaG90IH07XG5cbiAgICAgICAgT2JqZWN0LmtleXMoc25hcHNob3QpLmZvckVhY2goayA9PiAodGhpc1trXSA9IHNuYXBzaG90W2tdKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB2YWxpZGF0aW9uIGVycm9yIG1lc3NhZ2VzIGZvciBhbiBvYnNlcnZhYmxlIHByb3BlcnR5IG9mIHRoZSBzdG9yZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZSAtIFRoZSBvYnNlcnZhYmxlIHByb3BlcnR5J3MgbmFtZVxuICAgICAqIEBwYXJhbSBbe1N0cmluZ31dIG1lc3NhZ2VzIC0gQW4gYXJyYXkgb2Ygc3RyaW5ncyB0aGF0IGNvbnRhaW5zIHZhbGlkYXRpb24gZXJyb3IgbWVzc2FnZXMgZm9yIHRoZSBwYXJ0aWN1bGFyIHByb3BlcnR5LlxuICAgICAqXG4gICAgICovXG4gICAgQGFjdGlvblxuICAgIHNldFZhbGlkYXRpb25FcnJvck1lc3NhZ2VzKHByb3BlcnR5TmFtZSwgbWVzc2FnZXMpIHtcbiAgICAgICAgY29uc3QgaXNfZGlmZmVyZW50ID0gKCkgPT5cbiAgICAgICAgICAgICEhdGhpcy52YWxpZGF0aW9uX2Vycm9yc1twcm9wZXJ0eU5hbWVdXG4gICAgICAgICAgICAgICAgLmZpbHRlcih4ID0+ICFtZXNzYWdlcy5pbmNsdWRlcyh4KSlcbiAgICAgICAgICAgICAgICAuY29uY2F0KG1lc3NhZ2VzLmZpbHRlcih4ID0+ICF0aGlzLnZhbGlkYXRpb25fZXJyb3JzW3Byb3BlcnR5TmFtZV0uaW5jbHVkZXMoeCkpKS5sZW5ndGg7XG4gICAgICAgIGlmICghdGhpcy52YWxpZGF0aW9uX2Vycm9yc1twcm9wZXJ0eU5hbWVdIHx8IGlzX2RpZmZlcmVudCgpKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRpb25fZXJyb3JzW3Byb3BlcnR5TmFtZV0gPSBtZXNzYWdlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdmFsaWRhdGlvbiBydWxlc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJ1bGVzXG4gICAgICpcbiAgICAgKi9cbiAgICBAYWN0aW9uXG4gICAgc2V0VmFsaWRhdGlvblJ1bGVzKHJ1bGVzID0ge30pIHtcbiAgICAgICAgT2JqZWN0LmtleXMocnVsZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkUnVsZShrZXksIHJ1bGVzW2tleV0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHJ1bGVzIHRvIHRoZSBwYXJ0aWN1bGFyIHByb3BlcnR5XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcnVsZXNcbiAgICAgKlxuICAgICAqL1xuICAgIEBhY3Rpb25cbiAgICBhZGRSdWxlKHByb3BlcnR5LCBydWxlcykge1xuICAgICAgICB0aGlzLnZhbGlkYXRpb25fcnVsZXNbcHJvcGVydHldID0gcnVsZXM7XG5cbiAgICAgICAgaW50ZXJjZXB0KHRoaXMsIHByb3BlcnR5LCBjaGFuZ2UgPT4ge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVByb3BlcnR5KHByb3BlcnR5LCBjaGFuZ2UubmV3VmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIGEgcGFydGljdWxhciBwcm9wZXJ0eSBvZiB0aGUgc3RvcmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSBpbiB0aGUgc3RvcmVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdmFsdWUgICAgLSBUaGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5LCBpdCBjYW4gYmUgdW5kZWZpbmVkLlxuICAgICAqXG4gICAgICovXG4gICAgQGFjdGlvblxuICAgIHZhbGlkYXRlUHJvcGVydHkocHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLnZhbGlkYXRpb25fcnVsZXNbcHJvcGVydHldLnRyaWdnZXI7XG4gICAgICAgIGNvbnN0IGlucHV0cyA9IHsgW3Byb3BlcnR5XTogdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDogdGhpc1twcm9wZXJ0eV0gfTtcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvbl9ydWxlcyA9IHsgW3Byb3BlcnR5XTogdGhpcy52YWxpZGF0aW9uX3J1bGVzW3Byb3BlcnR5XS5ydWxlcyB8fCBbXSB9O1xuXG4gICAgICAgIGlmICghIXRyaWdnZXIgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGhpcywgdHJpZ2dlcikpIHtcbiAgICAgICAgICAgIGlucHV0c1t0cmlnZ2VyXSA9IHRoaXNbdHJpZ2dlcl07XG4gICAgICAgICAgICB2YWxpZGF0aW9uX3J1bGVzW3RyaWdnZXJdID0gdGhpcy52YWxpZGF0aW9uX3J1bGVzW3RyaWdnZXJdLnJ1bGVzIHx8IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihpbnB1dHMsIHZhbGlkYXRpb25fcnVsZXMsIHRoaXMpO1xuXG4gICAgICAgIHZhbGlkYXRvci5pc1Bhc3NlZCgpO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGlucHV0cykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWxpZGF0aW9uRXJyb3JNZXNzYWdlcyhrZXksIHZhbGlkYXRvci5lcnJvcnMuZ2V0KGtleSkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgYWxsIHByb3BlcnRpZXMgd2hpY2ggdmFsaWRhdGlvbiBydWxlIGhhcyBiZWVuIHNldCBmb3IuXG4gICAgICpcbiAgICAgKi9cbiAgICBAYWN0aW9uXG4gICAgdmFsaWRhdGVBbGxQcm9wZXJ0aWVzKCkge1xuICAgICAgICBjb25zdCB2YWxpZGF0aW9uX3J1bGVzID0gT2JqZWN0LmtleXModGhpcy52YWxpZGF0aW9uX3J1bGVzKTtcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvbl9lcnJvcnMgPSBPYmplY3Qua2V5cyh0aGlzLnZhbGlkYXRpb25fZXJyb3JzKTtcblxuICAgICAgICB2YWxpZGF0aW9uX3J1bGVzLmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlUHJvcGVydHkocCwgdGhpc1twXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJlbW92ZSBrZXlzIHRoYXQgYXJlIHByZXNlbnQgaW4gZXJyb3IsIGJ1dCBub3QgaW4gcnVsZXM6XG4gICAgICAgIHZhbGlkYXRpb25fZXJyb3JzLmZvckVhY2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0aW9uX3J1bGVzLmluY2x1ZGVzKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnZhbGlkYXRpb25fZXJyb3JzW2Vycm9yXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uU3dpdGNoQWNjb3VudChsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoX2FjY291bnRfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcblxuICAgICAgICAgICAgdGhpcy5zd2l0Y2hBY2NvdW50RGlzcG9zZXIgPSB3aGVuKFxuICAgICAgICAgICAgICAgICgpID0+IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuc3dpdGNoX2Jyb2FkY2FzdCxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnN3aXRjaF9hY2NvdW50X2xpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5zd2l0Y2hFbmRTaWduYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblN3aXRjaEFjY291bnQodGhpcy5zd2l0Y2hfYWNjb3VudF9saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3dpdGNoaW5nIGFjY291bnQgbGlzdGVuZXJzIGFyZSByZXF1aXJlZCB0byByZXR1cm4gYSBwcm9taXNlLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gbGlzdGVuZXIgY3VycmVudGx5IGFjdGl2ZS4gc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBlcnJvciByYWlzZWQgZnJvbSB0cmVhdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBudWxsIG9iamVjdCBhcyBhIGZ1bmN0aW9uLiBBbHRob3VnaCwgaW4gZGV2ZWxvcG1lbnQgbW9kZSwgd2UgdGhyb3cgYSBjb25zb2xlIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Byb2R1Y3Rpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uUHJlU3dpdGNoQWNjb3VudChsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMucHJlX3N3aXRjaF9hY2NvdW50X2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICAgICAgICB0aGlzLnByZVN3aXRjaEFjY291bnREaXNwb3NlciA9IHdoZW4oXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5yb290X3N0b3JlLmNsaWVudC5wcmVfc3dpdGNoX2Jyb2FkY2FzdCxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnByZV9zd2l0Y2hfYWNjb3VudF9saXN0ZW5lcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbiAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuc2V0UHJlU3dpdGNoQWNjb3VudChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25QcmVTd2l0Y2hBY2NvdW50KHRoaXMucHJlX3N3aXRjaF9hY2NvdW50X2xpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcmUtc3dpdGNoIGFjY291bnQgbGlzdGVuZXJzIGFyZSByZXF1aXJlZCB0byByZXR1cm4gYSBwcm9taXNlLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gbGlzdGVuZXIgY3VycmVudGx5IGFjdGl2ZS4gc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBlcnJvciByYWlzZWQgZnJvbSB0cmVhdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBudWxsIG9iamVjdCBhcyBhIGZ1bmN0aW9uLiBBbHRob3VnaCwgaW4gZGV2ZWxvcG1lbnQgbW9kZSwgd2UgdGhyb3cgYSBjb25zb2xlIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Byb2R1Y3Rpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uTG9nb3V0KGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMubG9nb3V0RGlzcG9zZXIgPSB3aGVuKFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5yb290X3N0b3JlLmNsaWVudC5oYXNfbG9nZ2VkX291dCxcbiAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmxvZ291dF9saXN0ZW5lcigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuc2V0TG9nb3V0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTG9nb3V0KHRoaXMubG9nb3V0X2xpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dvdXQgbGlzdGVuZXJzIGFyZSByZXF1aXJlZCB0byByZXR1cm4gYSBwcm9taXNlLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gbGlzdGVuZXIgY3VycmVudGx5IGFjdGl2ZS4gc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBlcnJvciByYWlzZWQgZnJvbSB0cmVhdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBhIG51bGwgb2JqZWN0IGFzIGEgZnVuY3Rpb24uIEFsdGhvdWdoLCBpbiBkZXZlbG9wbWVudCBtb2RlLCB3ZSB0aHJvdyBhIGNvbnNvbGUgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQcm9kdWN0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMubG9nb3V0X2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uQ2xpZW50SW5pdChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmNsaWVudEluaXREaXNwb3NlciA9IHdoZW4oXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmluaXRpYWxpemVkX2Jyb2FkY2FzdCxcbiAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmNsaWVudF9pbml0X2xpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4gJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5zZXRJbml0aWFsaXplZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNsaWVudEluaXQodGhpcy5jbGllbnRfaW5pdF9saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2xpZW50IGluaXQgbGlzdGVuZXJzIGFyZSByZXF1aXJlZCB0byByZXR1cm4gYSBwcm9taXNlLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gbGlzdGVuZXIgY3VycmVudGx5IGFjdGl2ZS4gc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBlcnJvciByYWlzZWQgZnJvbSB0cmVhdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBhIG51bGwgb2JqZWN0IGFzIGEgZnVuY3Rpb24uIEFsdGhvdWdoLCBpbiBkZXZlbG9wbWVudCBtb2RlLCB3ZSB0aHJvdyBhIGNvbnNvbGUgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQcm9kdWN0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY2xpZW50X2luaXRfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25OZXR3b3JrU3RhdHVzQ2hhbmdlKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMubmV0d29ya1N0YXR1c0NoYW5nZURpc3Bvc2VyID0gcmVhY3Rpb24oXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnJvb3Rfc3RvcmUuY29tbW9uLmlzX25ldHdvcmtfb25saW5lLFxuICAgICAgICAgICAgaXNfb25saW5lID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5ldHdvcmtfc3RhdHVzX2NoYW5nZV9saXN0ZW5lcihpc19vbmxpbmUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIGxpc3RlbmVyIGN1cnJlbnRseSBhY3RpdmUuIHNvIHdlIGNhbiBqdXN0IGlnbm9yZSB0aGUgZXJyb3IgcmFpc2VkIGZyb20gdHJlYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBudWxsIG9iamVjdCBhcyBhIGZ1bmN0aW9uLiBBbHRob3VnaCwgaW4gZGV2ZWxvcG1lbnQgbW9kZSwgd2UgdGhyb3cgYSBjb25zb2xlIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvZHVjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubmV0d29ya19zdGF0dXNfY2hhbmdlX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uVGhlbWVDaGFuZ2UobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy50aGVtZUNoYW5nZURpc3Bvc2VyID0gcmVhY3Rpb24oXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnJvb3Rfc3RvcmUudWkuaXNfZGFya19tb2RlX29uLFxuICAgICAgICAgICAgaXNfZGFya19tb2RlX29uID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRoZW1lX2NoYW5nZV9saXN0ZW5lcihpc19kYXJrX21vZGVfb24pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIGxpc3RlbmVyIGN1cnJlbnRseSBhY3RpdmUuIHNvIHdlIGNhbiBqdXN0IGlnbm9yZSB0aGUgZXJyb3IgcmFpc2VkIGZyb20gdHJlYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBudWxsIG9iamVjdCBhcyBhIGZ1bmN0aW9uLiBBbHRob3VnaCwgaW4gZGV2ZWxvcG1lbnQgbW9kZSwgd2UgdGhyb3cgYSBjb25zb2xlIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvZHVjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMudGhlbWVfY2hhbmdlX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uUmVhbEFjY291bnRTaWdudXBFbmQobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5yZWFsQWNjb3VudFNpZ251cEVuZGVkRGlzcG9zZXIgPSB3aGVuKFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5yb290X3N0b3JlLnVpLmhhc19yZWFsX2FjY291bnRfc2lnbnVwX2VuZGVkLFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVhbF9hY2NvdW50X3NpZ251cF9lbmRlZF9saXN0ZW5lcigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS51aS5zZXRSZWFsQWNjb3VudFNpZ251cEVuZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblJlYWxBY2NvdW50U2lnbnVwRW5kKHRoaXMucmVhbF9hY2NvdW50X3NpZ251cF9lbmRlZF9saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVhbCBhY2NvdW50IHNpZ251cCBsaXN0ZW5lcnMgYXJlIHJlcXVpcmVkIHRvIHJldHVybiBhIHByb21pc2UuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBsaXN0ZW5lciBjdXJyZW50bHkgYWN0aXZlLiBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGVycm9yIHJhaXNlZCBmcm9tIHRyZWF0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgbnVsbCBvYmplY3QgYXMgYSBmdW5jdGlvbi4gQWx0aG91Z2gsIGluIGRldmVsb3BtZW50IG1vZGUsIHdlIHRocm93IGEgY29uc29sZSBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Byb2R1Y3Rpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnJlYWxfYWNjb3VudF9zaWdudXBfZW5kZWRfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgZGlzcG9zZVByZVN3aXRjaEFjY291bnQoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcmVTd2l0Y2hBY2NvdW50RGlzcG9zZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMucHJlU3dpdGNoQWNjb3VudERpc3Bvc2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmVfc3dpdGNoX2FjY291bnRfbGlzdGVuZXIgPSBudWxsO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBkaXNwb3NlU3dpdGNoQWNjb3VudCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnN3aXRjaEFjY291bnREaXNwb3NlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5zd2l0Y2hBY2NvdW50RGlzcG9zZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN3aXRjaF9hY2NvdW50X2xpc3RlbmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgZGlzcG9zZUxvZ291dCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxvZ291dERpc3Bvc2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ291dERpc3Bvc2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2dvdXRfbGlzdGVuZXIgPSBudWxsO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBkaXNwb3NlQ2xpZW50SW5pdCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNsaWVudEluaXREaXNwb3NlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5jbGllbnRJbml0RGlzcG9zZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsaWVudF9pbml0X2xpc3RlbmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgZGlzcG9zZU5ldHdvcmtTdGF0dXNDaGFuZ2UoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5uZXR3b3JrU3RhdHVzQ2hhbmdlRGlzcG9zZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMubmV0d29ya1N0YXR1c0NoYW5nZURpc3Bvc2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXR3b3JrX3N0YXR1c19jaGFuZ2VfbGlzdGVuZXIgPSBudWxsO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBkaXNwb3NlVGhlbWVDaGFuZ2UoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50aGVtZUNoYW5nZURpc3Bvc2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnRoZW1lQ2hhbmdlRGlzcG9zZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRoZW1lX2NoYW5nZV9saXN0ZW5lciA9IG51bGw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGRpc3Bvc2VSZWFsQWNjb3VudFNpZ251cEVuZCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnJlYWxBY2NvdW50U2lnbnVwRW5kZWREaXNwb3NlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5yZWFsQWNjb3VudFNpZ251cEVuZGVkRGlzcG9zZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlYWxfYWNjb3VudF9zaWdudXBfZW5kZWRfbGlzdGVuZXIgPSBudWxsO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBvblVubW91bnQoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZVByZVN3aXRjaEFjY291bnQoKTtcbiAgICAgICAgdGhpcy5kaXNwb3NlU3dpdGNoQWNjb3VudCgpO1xuICAgICAgICB0aGlzLmRpc3Bvc2VMb2dvdXQoKTtcbiAgICAgICAgdGhpcy5kaXNwb3NlQ2xpZW50SW5pdCgpO1xuICAgICAgICB0aGlzLmRpc3Bvc2VOZXR3b3JrU3RhdHVzQ2hhbmdlKCk7XG4gICAgICAgIHRoaXMuZGlzcG9zZVRoZW1lQ2hhbmdlKCk7XG4gICAgICAgIHRoaXMuZGlzcG9zZVJlYWxBY2NvdW50U2lnbnVwRW5kKCk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzc2VydEhhc1ZhbGlkQ2FjaGUobG9naW5pZCwgLi4ucmVhY3Rpb25zKSB7XG4gICAgICAgIC8vIGFjY291bnQgd2FzIGNoYW5nZWQgd2hlbiB0aGlzIHdhcyB1bm1vdW50ZWQuXG4gICAgICAgIGlmICh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmxvZ2luaWQgIT09IGxvZ2luaWQpIHtcbiAgICAgICAgICAgIHJlYWN0aW9ucy5mb3JFYWNoKGFjdCA9PiBhY3QoKSk7XG4gICAgICAgICAgICB0aGlzLnBhcnRpYWxfZmV0Y2hfdGltZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgYWN0aW9uLCBjb21wdXRlZCwgb2JzZXJ2YWJsZSwgcmVhY3Rpb24gfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnQGRlcml2L3RyYW5zbGF0aW9ucyc7XG5pbXBvcnQgeyBnZXRLZWJhYkNhc2UsIGlzQ3J5cHRvY3VycmVuY3ksIHJvdXRlcywgd2Vic2l0ZVVybCB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuaW1wb3J0IE9ucmFtcFByb3ZpZGVycyBmcm9tICdDb25maWcvb24tcmFtcC1wcm92aWRlcnMnO1xuaW1wb3J0IEJhc2VTdG9yZSBmcm9tICcuLi9iYXNlLXN0b3JlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT25SYW1wU3RvcmUgZXh0ZW5kcyBCYXNlU3RvcmUge1xuICAgIEBvYnNlcnZhYmxlIGFwaV9lcnJvciA9IG51bGw7XG4gICAgQG9ic2VydmFibGUgZGVwb3NpdF9hZGRyZXNzID0gbnVsbDtcbiAgICBAb2JzZXJ2YWJsZSBpc19kZXBvc2l0X2FkZHJlc3NfbG9hZGluZyA9IHRydWU7XG4gICAgQG9ic2VydmFibGUgaXNfZGVwb3NpdF9hZGRyZXNzX3BvcG92ZXJfb3BlbiA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX29ucmFtcF9tb2RhbF9vcGVuID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfcmVxdWVzdGluZ193aWRnZXRfaHRtbCA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlLnNoYWxsb3cgb25yYW1wX3Byb3ZpZGVycyA9IFtdO1xuICAgIEBvYnNlcnZhYmxlLnJlZiBzZWxlY3RlZF9wcm92aWRlciA9IG51bGw7XG4gICAgQG9ic2VydmFibGUgc2hvdWxkX3Nob3dfd2lkZ2V0ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgd2lkZ2V0X2Vycm9yID0gbnVsbDtcbiAgICBAb2JzZXJ2YWJsZSB3aWRnZXRfaHRtbCA9IG51bGw7XG5cbiAgICBkZXBvc2l0X2FkZHJlc3NfcmVmID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHsgV1MsIHJvb3Rfc3RvcmUgfSkge1xuICAgICAgICBzdXBlcih7IHJvb3Rfc3RvcmUgfSk7XG4gICAgICAgIHRoaXMuV1MgPSBXUztcblxuICAgICAgICB0aGlzLm9uQ2xpZW50SW5pdChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldE9ucmFtcFByb3ZpZGVycyhbXG4gICAgICAgICAgICAgICAgT25yYW1wUHJvdmlkZXJzLmNyZWF0ZUNoYW5nZWxseVByb3ZpZGVyKHRoaXMpLFxuICAgICAgICAgICAgICAgIE9ucmFtcFByb3ZpZGVycy5jcmVhdGVYYW5Qb29sUHJvdmlkZXIodGhpcyksXG4gICAgICAgICAgICAgICAgT25yYW1wUHJvdmlkZXJzLmNyZWF0ZUJhbnhhUHJvdmlkZXIodGhpcyksXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IGlzX29ucmFtcF90YWJfdmlzaWJsZSgpIHtcbiAgICAgICAgY29uc3QgeyBjbGllbnQgfSA9IHRoaXMucm9vdF9zdG9yZTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2xpZW50LmlzX3ZpcnR1YWwgPT09IGZhbHNlICYmXG4gICAgICAgICAgICBpc0NyeXB0b2N1cnJlbmN5KGNsaWVudC5jdXJyZW5jeSkgJiZcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyZWRfb25yYW1wX3Byb3ZpZGVycy5sZW5ndGggPiAwXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IGZpbHRlcmVkX29ucmFtcF9wcm92aWRlcnMoKSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50IH0gPSB0aGlzLnJvb3Rfc3RvcmU7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMub25yYW1wX3Byb3ZpZGVyc1xuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSBwcm92aWRlciBzdXBwb3J0cyB0aGlzIHVzZXIncyBhY2NvdW50IGN1cnJlbmN5LlxuICAgICAgICAgICAgICAgIC5maWx0ZXIocHJvdmlkZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b19jdXJyZW5jaWVzID0gcHJvdmlkZXIuZ2V0VG9DdXJyZW5jaWVzKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b19jdXJyZW5jaWVzLmluY2x1ZGVzKCcqJykgfHwgdG9fY3VycmVuY2llcy5pbmNsdWRlcyhjbGllbnQuY3VycmVuY3kudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgcHJvdmlkZXIgc3VwcG9ydHMgdGhpcyB1c2VyJ3MgcmVzaWRlbmN5LlxuICAgICAgICAgICAgICAgIC5maWx0ZXIocHJvdmlkZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxvd2VkX3Jlc2lkZW5jaWVzID0gcHJvdmlkZXIuZ2V0QWxsb3dlZFJlc2lkZW5jaWVzKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhbGxvd2VkX3Jlc2lkZW5jaWVzLmluY2x1ZGVzKCcqJykgfHwgYWxsb3dlZF9yZXNpZGVuY2llcy5pbmNsdWRlcyhjbGllbnQucmVzaWRlbmNlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBvbnJhbXBfcG9wdXBfbW9kYWxfdGl0bGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZF9zaG93X3dpZGdldCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsaXplKCdQYXltZW50IGNoYW5uZWwnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkX3Byb3ZpZGVyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGRfc2hvd19kaWFsb2cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxpemUoJ091ciBzZXJ2ZXIgY2Fubm90IHJldHJpZXZlIGFuIGFkZHJlc3MuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJyAnOyAvLyBFbXB0eSBzdHJpbmcgdG8gcmVuZGVyIGhlYWRlciArIGNsb3NlIGljb24uXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgc2hvdWxkX3Nob3dfZGlhbG9nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlfZXJyb3I7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uTW91bnRPbnJhbXAoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZVRoaXJkUGFydHlKc1JlYWN0aW9uID0gcmVhY3Rpb24oXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnNlbGVjdGVkX3Byb3ZpZGVyLFxuICAgICAgICAgICAgYXN5bmMgcHJvdmlkZXIgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IHByb3ZpZGVyLmdldFNjcmlwdERlcGVuZGVuY2llcygpO1xuICAgICAgICAgICAgICAgIGlmIChkZXBlbmRlbmNpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7IGRlZmF1bHQ6IGxvYWRqcyB9ID0gYXdhaXQgaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6IFwibG9hZGpzXCIgKi8gJ2xvYWRqcycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdF9uYW1lID0gYCR7Z2V0S2ViYWJDYXNlKHByb3ZpZGVyLm5hbWUpfS1vbnJhbXBgO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFsb2FkanMuaXNEZWZpbmVkKHNjcmlwdF9uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBsb2FkanMoZGVwZW5kZW5jaWVzLCBzY3JpcHRfbmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgRGVwZW5kZW5jaWVzIGZvciBvbnJhbXAgcHJvdmlkZXIgJHtwcm92aWRlci5uYW1lfSBjb3VsZCBub3QgYmUgbG9hZGVkLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRQcm92aWRlcihudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBXaGVuIFwic2hvdWxkX3Nob3dfd2lkZ2V0XCIsIGF0dGVtcHQgdG8gZmV0Y2ggXCJzZWxlY3RlZF9wcm92aWRlclwiJ3MgXCJ3aWRnZXRfaHRtbFwiLlxuICAgICAgICB0aGlzLmRpc3Bvc2VHZXRXaWRnZXRIdG1sUmVhY3Rpb24gPSByZWFjdGlvbihcbiAgICAgICAgICAgICgpID0+IHRoaXMuc2hvdWxkX3Nob3dfd2lkZ2V0LFxuICAgICAgICAgICAgc2hvdWxkX3Nob3dfd2lkZ2V0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkX3Nob3dfd2lkZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzX3JlcXVlc3Rpbmdfd2lkZ2V0X2h0bWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNSZXF1ZXN0aW5nV2lkZ2V0SHRtbCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9wcm92aWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFdpZGdldEh0bWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4od2lkZ2V0X2h0bWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWRnZXRfaHRtbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWd1bGFyIHByb3ZpZGVycyAoaWZyYW1lL0pTIGVtYmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFdpZGdldEh0bWwod2lkZ2V0X2h0bWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFuIGVtcHR5IHJlc29sdmUgKHdpZGdldF9odG1sKSBpZGVudGlmaWVzIGEgcmVkaXJlY3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2hvdWxkU2hvd1dpZGdldChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRXaWRnZXRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4gdGhpcy5zZXRJc1JlcXVlc3RpbmdXaWRnZXRIdG1sKGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBvblVubW91bnRPbnJhbXAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kaXNwb3NlVGhpcmRQYXJ0eUpzUmVhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVRoaXJkUGFydHlKc1JlYWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmRpc3Bvc2VHZXRXaWRnZXRIdG1sUmVhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZUdldFdpZGdldEh0bWxSZWFjdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uQ2xpY2tDb3B5RGVwb3NpdEFkZHJlc3MoKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRoaXMuZGVwb3NpdF9hZGRyZXNzX3JlZik7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0aW9ucyA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgc2VsZWN0aW9ucy5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgc2VsZWN0aW9ucy5hZGRSYW5nZShyYW5nZSk7XG5cbiAgICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGhpcy5kZXBvc2l0X2FkZHJlc3MpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRJc0RlcG9zaXRBZGRyZXNzUG9wb3Zlck9wZW4odHJ1ZSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0SXNEZXBvc2l0QWRkcmVzc1BvcG92ZXJPcGVuKGZhbHNlKSwgNTAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uQ2xpY2tEaXNjbGFpbWVyQ29udGludWUoKSB7XG4gICAgICAgIHRoaXMuc2V0U2hvdWxkU2hvd1dpZGdldCh0cnVlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25DbGlja0dvVG9EZXBvc2l0UGFnZSgpIHtcbiAgICAgICAgdGhpcy5wb2xsQXBpRm9yRGVwb3NpdEFkZHJlc3MoZmFsc2UpO1xuICAgICAgICB3aW5kb3cub3Blbih3ZWJzaXRlVXJsKCkgKyByb3V0ZXMuY2FzaGllcl9kZXBvc2l0LnN1YnN0cmluZygxKSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHBvbGxBcGlGb3JEZXBvc2l0QWRkcmVzcyhzaG91bGRfYWxsb3dfZW1wdHlfYWRkcmVzcykge1xuICAgICAgICAvLyBzaG91bGRfYWxsb3dfZW1wdHlfYWRkcmVzczogQVBJIHJldHVybnMgZW1wdHkgZGVwb3NpdCBhZGRyZXNzIGZvciBsZWdhY3kgYWNjb3VudHNcbiAgICAgICAgLy8gdGhhdCBoYXZlIG5ldmVyIGdlbmVyYXRlZCBhIGRlcG9zaXQgYWRkcmVzcy4gU2V0dGluZyB0aGlzIHRvIFwidHJ1ZVwiIHdpbGwgYWxsb3dcbiAgICAgICAgLy8gdGhlIHVzZXIgdG8gYmUgcmVkaXJlY3RlZCB0byB0aGUgRGVwb3NpdCBwYWdlICh3aGVyZSBhbiBhZGRyZXNzIHdpbGwgYmUgZ2VuZXJhdGVkKS5cbiAgICAgICAgLy8gU2V0dGluZyB0aGlzIHRvIFwiZmFsc2VcIiB3aWxsIHN0YXJ0IHBvbGxpbmcgdGhlIEFQSSBmb3IgdGhpcyBkZXBvc2l0IGFkZHJlc3MuXG5cbiAgICAgICAgdGhpcy5zZXRJc0RlcG9zaXRBZGRyZXNzTG9hZGluZyh0cnVlKTtcbiAgICAgICAgdGhpcy5zZXRBcGlFcnJvcihudWxsKTtcblxuICAgICAgICBjb25zdCBkZXBvc2l0X2FkZHJlc3NfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiBnZXREZXBvc2l0QWRkcmVzc0Zyb21BcGksIDMwMDApO1xuICAgICAgICBjb25zdCBnZXREZXBvc2l0QWRkcmVzc0Zyb21BcGkgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLldTLmF1dGhvcml6ZWRcbiAgICAgICAgICAgICAgICAuY2FzaGllcignZGVwb3NpdCcsIHsgcHJvdmlkZXI6ICdjcnlwdG8nLCB0eXBlOiAnYXBpJyB9KVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNob3VsZF9jbGVhcl9pbnRlcnZhbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBcGlFcnJvcihyZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRfY2xlYXJfaW50ZXJ2YWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBhZGRyZXNzIH0gPSByZXNwb25zZS5jYXNoaWVyLmRlcG9zaXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzIHx8IHNob3VsZF9hbGxvd19lbXB0eV9hZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREZXBvc2l0QWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRfY2xlYXJfaW50ZXJ2YWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZF9jbGVhcl9pbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChkZXBvc2l0X2FkZHJlc3NfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJc0RlcG9zaXRBZGRyZXNzTG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBnZXREZXBvc2l0QWRkcmVzc0Zyb21BcGkoKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGRlcG9zaXRfYWRkcmVzc19pbnRlcnZhbCk7XG4gICAgICAgICAgICB0aGlzLnNldElzRGVwb3NpdEFkZHJlc3NMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgfSwgMzAwMDApO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICByZXNldFBvcHVwKCkge1xuICAgICAgICB0aGlzLnNldEFwaUVycm9yKG51bGwpO1xuICAgICAgICB0aGlzLnNldERlcG9zaXRBZGRyZXNzKG51bGwpO1xuICAgICAgICB0aGlzLnNldERlcG9zaXRBZGRyZXNzUmVmKG51bGwpO1xuICAgICAgICB0aGlzLnNldElzRGVwb3NpdEFkZHJlc3NMb2FkaW5nKHRydWUpO1xuICAgICAgICB0aGlzLnNldFNlbGVjdGVkUHJvdmlkZXIobnVsbCk7XG4gICAgICAgIHRoaXMuc2V0U2hvdWxkU2hvd1dpZGdldChmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0V2lkZ2V0RXJyb3IobnVsbCk7XG4gICAgICAgIHRoaXMuc2V0V2lkZ2V0SHRtbChudWxsKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QXBpRXJyb3IoYXBpX2Vycm9yKSB7XG4gICAgICAgIHRoaXMuYXBpX2Vycm9yID0gYXBpX2Vycm9yO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRDb3B5SWNvblJlZihyZWYpIHtcbiAgICAgICAgdGhpcy5jb3B5X2ljb25fcmVmID0gcmVmO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXREZXBvc2l0QWRkcmVzcyhkZXBvc2l0X2FkZHJlc3MpIHtcbiAgICAgICAgdGhpcy5kZXBvc2l0X2FkZHJlc3MgPSBkZXBvc2l0X2FkZHJlc3M7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldERlcG9zaXRBZGRyZXNzUmVmKHJlZikge1xuICAgICAgICB0aGlzLmRlcG9zaXRfYWRkcmVzc19yZWYgPSByZWY7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzRGVwb3NpdEFkZHJlc3NMb2FkaW5nKGlzX2xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5pc19kZXBvc2l0X2FkZHJlc3NfbG9hZGluZyA9IGlzX2xvYWRpbmc7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzRGVwb3NpdEFkZHJlc3NQb3BvdmVyT3Blbihpc19vcGVuKSB7XG4gICAgICAgIHRoaXMuaXNfZGVwb3NpdF9hZGRyZXNzX3BvcG92ZXJfb3BlbiA9IGlzX29wZW47XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzT25SYW1wTW9kYWxPcGVuKGlzX29wZW4pIHtcbiAgICAgICAgdGhpcy5pc19vbnJhbXBfbW9kYWxfb3BlbiA9IGlzX29wZW47XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzUmVxdWVzdGluZ1dpZGdldEh0bWwoaXNfcmVxdWVzdGluZ193aWRnZXRfaHRtbCkge1xuICAgICAgICB0aGlzLmlzX3JlcXVlc3Rpbmdfd2lkZ2V0X2h0bWwgPSBpc19yZXF1ZXN0aW5nX3dpZGdldF9odG1sO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRTZWxlY3RlZFByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgICAgIGlmIChwcm92aWRlcikge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9wcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICAgICAgdGhpcy5zZXRJc09uUmFtcE1vZGFsT3Blbih0cnVlKTtcbiAgICAgICAgICAgIHRoaXMucG9sbEFwaUZvckRlcG9zaXRBZGRyZXNzKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRJc09uUmFtcE1vZGFsT3BlbihmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX3Byb3ZpZGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRTaG91bGRTaG93V2lkZ2V0KHNob3VsZF9zaG93KSB7XG4gICAgICAgIHRoaXMuc2hvdWxkX3Nob3dfd2lkZ2V0ID0gc2hvdWxkX3Nob3c7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldE9ucmFtcFByb3ZpZGVycyhvbnJhbXBfcHJvdmlkZXJzKSB7XG4gICAgICAgIHRoaXMub25yYW1wX3Byb3ZpZGVycyA9IG9ucmFtcF9wcm92aWRlcnMuc2xpY2UoKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0V2lkZ2V0RXJyb3Iod2lkZ2V0X2Vycm9yKSB7XG4gICAgICAgIHRoaXMud2lkZ2V0X2Vycm9yID0gd2lkZ2V0X2Vycm9yO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRXaWRnZXRIdG1sKHdpZGdldF9odG1sKSB7XG4gICAgICAgIHRoaXMud2lkZ2V0X2h0bWwgPSB3aWRnZXRfaHRtbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IGlzQ3J5cHRvY3VycmVuY3kgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNhY3Rpb25IaXN0b3J5U3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKHsgV1MsIHJvb3Rfc3RvcmUgfSkge1xuICAgICAgICB0aGlzLnJvb3Rfc3RvcmUgPSByb290X3N0b3JlO1xuICAgICAgICB0aGlzLldTID0gV1M7XG4gICAgfVxuICAgIEBvYnNlcnZhYmxlIGNyeXB0b190cmFuc2FjdGlvbnMgPSBbXTtcbiAgICBAb2JzZXJ2YWJsZSBpc19jcnlwdG9fdHJhbnNhY3Rpb25zX2NhbmNlbF9tb2RhbF92aXNpYmxlID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfY3J5cHRvX3RyYW5zYWN0aW9uc19zdGF0dXNfbW9kYWxfdmlzaWJsZSA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX2NyeXB0b190cmFuc2FjdGlvbnNfdmlzaWJsZSA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX2xvYWRpbmcgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBzZWxlY3RlZF9jcnlwdG9fdHJhbnNhY3Rpb25faWQgPSAnJztcbiAgICBAb2JzZXJ2YWJsZSBzZWxlY3RlZF9jcnlwdG9fc3RhdHVzID0gJyc7XG4gICAgQG9ic2VydmFibGUgc2VsZWN0ZWRfY3J5cHRvX3N0YXR1c19kZXNjcmlwdGlvbiA9ICcnO1xuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHVwZGF0ZUNyeXB0b1RyYW5zYWN0aW9ucyh0cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgdHJhbnNhY3Rpb25zLmZvckVhY2godHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNyeXB0b190cmFuc2FjdGlvbnMuZmluZEluZGV4KGNyeXB0byA9PiBjcnlwdG8uaWQgPT09IHRyYW5zYWN0aW9uLmlkKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyeXB0b190cmFuc2FjdGlvbnMucHVzaCh0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5jcnlwdG9fdHJhbnNhY3Rpb25zW2luZGV4XSwgdHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zb3J0Q3J5cHRvVHJhbnNhY3Rpb25zKCk7XG4gICAgfVxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRDcnlwdG9UcmFuc2FjdGlvbnNIaXN0b3J5KHRyYW5zYWN0aW9ucykge1xuICAgICAgICB0aGlzLmNyeXB0b190cmFuc2FjdGlvbnMgPSB0cmFuc2FjdGlvbnM7XG4gICAgICAgIHRoaXMuc29ydENyeXB0b1RyYW5zYWN0aW9ucygpO1xuICAgIH1cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc29ydENyeXB0b1RyYW5zYWN0aW9ucygpIHtcbiAgICAgICAgdGhpcy5jcnlwdG9fdHJhbnNhY3Rpb25zID0gdGhpcy5jcnlwdG9fdHJhbnNhY3Rpb25zLnNvcnQoKGEsIGIpID0+IGIuc3VibWl0X2RhdGUgLSBhLnN1Ym1pdF9kYXRlKTtcbiAgICB9XG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIGdldENyeXB0b1RyYW5zYWN0aW9ucygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5XUy5zdWJzY3JpYmVDYXNoaWVyUGF5bWVudHMocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY3J5cHRvIH0gPSByZXNwb25zZS5jYXNoaWVyX3BheW1lbnRzO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ3J5cHRvVHJhbnNhY3Rpb25zKGNyeXB0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Nb3VudCgpIHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW5jeSwgc3dpdGNoZWQgfSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQ7XG4gICAgICAgIGNvbnN0IGlzX2NyeXB0byA9ICEhY3VycmVuY3kgJiYgaXNDcnlwdG9jdXJyZW5jeShjdXJyZW5jeSk7XG5cbiAgICAgICAgaWYgKGlzX2NyeXB0byAmJiAhc3dpdGNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudW5zdWJzY3JpYmVDcnlwdG9UcmFuc2FjdGlvbnMoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0Q3J5cHRvVHJhbnNhY3Rpb25zKCk7XG4gICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIHVuc3Vic2NyaWJlQ3J5cHRvVHJhbnNhY3Rpb25zKCkge1xuICAgICAgICBhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQuY2FzaGllclBheW1lbnRzKHsgcHJvdmlkZXI6ICdjcnlwdG8nLCB0cmFuc2FjdGlvbl90eXBlOiAnYWxsJyB9KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNyeXB0byB9ID0gcmVzcG9uc2UuY2FzaGllcl9wYXltZW50cztcbiAgICAgICAgICAgICAgICB0aGlzLnNldENyeXB0b1RyYW5zYWN0aW9uc0hpc3RvcnkoY3J5cHRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIGNhbmNlbENyeXB0b1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uX2lkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuV1MuY2FuY2VsQ3J5cHRvVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25faWQpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRDcnlwdG9UcmFuc2FjdGlvbklkKCcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldElzQ3J5cHRvVHJhbnNhY3Rpb25zQ2FuY2VsTW9kYWxWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZS5lcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRTZWxlY3RlZENyeXB0b1RyYW5zYWN0aW9uSWQoaWQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jcnlwdG9fdHJhbnNhY3Rpb25faWQgPSBpZDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNDYW5jZWxNb2RhbFZpc2libGUoaXNfdmlzaWJsZSkge1xuICAgICAgICB0aGlzLmlzX2NyeXB0b190cmFuc2FjdGlvbnNfY2FuY2VsX21vZGFsX3Zpc2libGUgPSBpc192aXNpYmxlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzaG93Q3J5cHRvVHJhbnNhY3Rpb25zQ2FuY2VsTW9kYWwoaWQpIHtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZENyeXB0b1RyYW5zYWN0aW9uSWQoaWQpO1xuICAgICAgICB0aGlzLnNldElzQ3J5cHRvVHJhbnNhY3Rpb25zQ2FuY2VsTW9kYWxWaXNpYmxlKHRydWUpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBoaWRlQ3J5cHRvVHJhbnNhY3Rpb25zQ2FuY2VsTW9kYWwoKSB7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRDcnlwdG9UcmFuc2FjdGlvbklkKCcnKTtcbiAgICAgICAgdGhpcy5zZXRJc0NyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFNlbGVjdGVkQ3J5cHRvU3RhdHVzKHN0YXR1cykge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NyeXB0b19zdGF0dXMgPSBzdGF0dXM7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFNlbGVjdGVkQ3J5cHRvU3RhdHVzRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jcnlwdG9fc3RhdHVzX2Rlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzQ3J5cHRvVHJhbnNhY3Rpb25zU3RhdHVzTW9kYWxWaXNpYmxlKGlzX3Zpc2libGUpIHtcbiAgICAgICAgdGhpcy5pc19jcnlwdG9fdHJhbnNhY3Rpb25zX3N0YXR1c19tb2RhbF92aXNpYmxlID0gaXNfdmlzaWJsZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2hvd0NyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsKGRlc2NyaXB0aW9uLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXNEZXNjcmlwdGlvbihkZXNjcmlwdGlvbik7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXMobmFtZSk7XG4gICAgICAgIHRoaXMuc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNTdGF0dXNNb2RhbFZpc2libGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGhpZGVDcnlwdG9UcmFuc2FjdGlvbnNTdGF0dXNNb2RhbCgpIHtcbiAgICAgICAgdGhpcy5zZXRJc0NyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldExvYWRpbmcoaXNfbG9hZGluZykge1xuICAgICAgICB0aGlzLmlzX2xvYWRpbmcgPSBpc19sb2FkaW5nO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc1Zpc2libGUoaXNfdmlzaWJsZSkge1xuICAgICAgICB0aGlzLmlzX2NyeXB0b190cmFuc2FjdGlvbnNfdmlzaWJsZSA9IGlzX3Zpc2libGU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgb2JzZXJ2YWJsZSwgYWN0aW9uIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBpc0NyeXB0b2N1cnJlbmN5IH0gZnJvbSAnQGRlcml2L3NoYXJlZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY291bnRQcm9tcHREaWFsb2dTdG9yZSB7XG4gICAgY29uc3RydWN0b3Iocm9vdF9zdG9yZSkge1xuICAgICAgICB0aGlzLnJvb3Rfc3RvcmUgPSByb290X3N0b3JlO1xuICAgIH1cblxuICAgIEBvYnNlcnZhYmxlIHNob3VsZF9zaG93ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfY29uZmlybWVkID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgbGFzdF9sb2NhdGlvbiA9IG51bGw7XG4gICAgQG9ic2VydmFibGUgY3VycmVudF9sb2NhdGlvbiA9IG51bGw7XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2hvdWxkTmF2aWdhdGVBZnRlclByb21wdChuZXh0X2xvY2F0aW9uLCBjdXJyZW50X2xvY2F0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5pc19jb25maXJtZWQpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdF9sb2NhdGlvbiA9IG5leHRfbG9jYXRpb247XG4gICAgICAgICAgICB0aGlzLnNob3VsZF9zaG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9sb2NhdGlvbiA9IGN1cnJlbnRfbG9jYXRpb247XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgcmVzZXRMYXN0TG9jYXRpb24oKSB7XG4gICAgICAgIHRoaXMubGFzdF9sb2NhdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlc2V0SXNDb25maXJtZWQoKSB7XG4gICAgICAgIHRoaXMuaXNfY29uZmlybWVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIG9uQ29uZmlybSgpIHtcbiAgICAgICAgdGhpcy5zaG91bGRfc2hvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzX2NvbmZpcm1lZCA9IHRydWU7XG5cbiAgICAgICAgY29uc3QgaGFzX2ZpYXRfYWNjb3VudCA9IHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuYWNjb3VudHNfbGlzdC5zb21lKFxuICAgICAgICAgICAgeCA9PiAheC5pc19jcnlwdG9cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGlzQ3J5cHRvY3VycmVuY3kodGhpcy5yb290X3N0b3JlLmNsaWVudD8uY3VycmVuY3kpICYmIGhhc19maWF0X2FjY291bnQpIGF3YWl0IHRoaXMuZG9Td2l0Y2goKTtcbiAgICB9XG5cbiAgICBhc3luYyBkb1N3aXRjaCgpIHtcbiAgICAgICAgY29uc3Qgbm9uX2NyeXB0b19hY2NvdW50cyA9IHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuYWNjb3VudHNfbGlzdC5maWx0ZXIoXG4gICAgICAgICAgICB4ID0+ICF4LmlzX2NyeXB0b1xuICAgICAgICApO1xuICAgICAgICBjb25zdCBsb2dpbmlkID0gbm9uX2NyeXB0b19hY2NvdW50cy5tYXAoeCA9PiB4LnZhbHVlKVswXTtcbiAgICAgICAgYXdhaXQgdGhpcy5yb290X3N0b3JlLmNsaWVudC5zd2l0Y2hBY2NvdW50KGxvZ2luaWQpO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbG9jYXRpb24gPT09ICdkZXBvc2l0Jykge1xuICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLm1vZHVsZXMuY2FzaGllci5zZXRJc0RlcG9zaXQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25DYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkX3Nob3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgY29udGludWVSb3V0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNfY29uZmlybWVkICYmIHRoaXMubGFzdF9sb2NhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNvbW1vbi5yb3V0ZVRvKHRoaXMubGFzdF9sb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBvYnNlcnZhYmxlLCBhY3Rpb24gfSBmcm9tICdtb2J4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXJyb3JEaWFsb2dTdG9yZSB7XG4gICAgQG9ic2VydmFibGUgZXJyb3JfbWVzc2FnZSA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIHNob3VsZF9zaG93ID0gZmFsc2U7XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0U2hvdWxkU2hvdyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNob3VsZF9zaG93ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldEVycm9yTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuZXJyb3JfbWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMuc2V0U2hvdWxkU2hvdyh0cnVlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEljb24sIENvdW50ZXIgfSBmcm9tICdAZGVyaXYvY29tcG9uZW50cyc7XG5cbmNvbnN0IENhc2hpZXJOb3RpZmljYXRpb25zID0gKHsgcDJwX25vdGlmaWNhdGlvbl9jb3VudCB9KSA9PiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8SWNvbiBpY29uPSdJY0Nhc2hpZXInIGNsYXNzTmFtZT0naGVhZGVyX19pY29uJyAvPlxuICAgICAgICB7ISFwMnBfbm90aWZpY2F0aW9uX2NvdW50ICYmIDxDb3VudGVyIGNsYXNzTmFtZT0nY2FzaGllcl9fY291bnRlcicgY291bnQ9e3AycF9ub3RpZmljYXRpb25fY291bnR9IC8+fVxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4pO1xuXG5DYXNoaWVyTm90aWZpY2F0aW9ucy5wcm9wVHlwZXMgPSB7XG4gICAgcDJwX25vdGlmaWNhdGlvbl9jb3VudDogUHJvcFR5cGVzLm51bWJlcixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENhc2hpZXJOb3RpZmljYXRpb25zO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWNsYXNzZXMtcGVyLWZpbGUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBhY3Rpb24sIGNvbXB1dGVkLCBvYnNlcnZhYmxlLCB0b0pTLCByZWFjdGlvbiwgd2hlbiB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHtcbiAgICBmb3JtYXRNb25leSxcbiAgICBpc0VtcHR5T2JqZWN0LFxuICAgIGlzQ3J5cHRvY3VycmVuY3ksXG4gICAgZ2V0Q3VycmVuY2llcyxcbiAgICBnZXRDdXJyZW5jeURpc3BsYXlDb2RlLFxuICAgIGdldERlY2ltYWxQbGFjZXMsXG4gICAgZ2V0TWluV2l0aGRyYXdhbCxcbiAgICBnZXRDRkRBY2NvdW50RGlzcGxheSxcbiAgICBnZXRDRkRBY2NvdW50LFxuICAgIGdldFByb3BlcnR5VmFsdWUsXG4gICAgcm91dGVzLFxuICAgIHZhbGlkTnVtYmVyLFxuICAgIENGRF9QTEFURk9STVMsXG59IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuaW1wb3J0IHsgbG9jYWxpemUsIExvY2FsaXplIH0gZnJvbSAnQGRlcml2L3RyYW5zbGF0aW9ucyc7XG5pbXBvcnQgT25SYW1wU3RvcmUgZnJvbSAnLi9vbi1yYW1wLXN0b3JlJztcbmltcG9ydCBUcmFuc2FjdGlvbkhpc3RvcnlTdG9yZSBmcm9tICcuL3RyYW5zYWN0aW9uLWhpc3Rvcnktc3RvcmUnO1xuaW1wb3J0IEFjY291bnRQcm9tcHREaWFsb2cgZnJvbSAnLi4vYWNjb3VudC1wcm9tcHQtZGlhbG9nLXN0b3JlJztcbmltcG9ydCBFcnJvckRpYWxvZyBmcm9tICcuLi9lcnJvci1kaWFsb2ctc3RvcmUnO1xuaW1wb3J0IEJhc2VTdG9yZSBmcm9tICcuLi9iYXNlLXN0b3JlJztcbmltcG9ydCBDYXNoaWVyTm90aWZpY2F0aW9ucyBmcm9tICcuLi8uLi9Db250YWluZXJzL2Nhc2hpZXItbm90aWZpY2F0aW9ucy5qc3gnO1xuXG5jb25zdCBoYXNUcmFuc2Zlck5vdEFsbG93ZWRMb2dpbmlkID0gbG9naW5pZCA9PiBsb2dpbmlkLnN0YXJ0c1dpdGgoJ01YJyk7XG5cbmNvbnN0IGdldFNlbGVjdGVkRXJyb3IgPSAoc2VsZWN0ZWRfdmFsdWUsIGlzX2Zyb21fYWNjb3VudCkgPT4ge1xuICAgIGlmIChpc19mcm9tX2FjY291bnQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxMb2NhbGl6ZVxuICAgICAgICAgICAgICAgIGkxOG5fZGVmYXVsdF90ZXh0PSdUcmFuc2ZlciBmcm9tIHt7c2VsZWN0ZWRfdmFsdWV9fSBpcyBub3QgYWxsb3dlZCwgUGxlYXNlIGNob29zZSBhbm90aGVyIGFjY291bnQgZnJvbSBkcm9wZG93bidcbiAgICAgICAgICAgICAgICB2YWx1ZXM9e3sgc2VsZWN0ZWRfdmFsdWUgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPExvY2FsaXplXG4gICAgICAgICAgICBpMThuX2RlZmF1bHRfdGV4dD0nVHJhbnNmZXIgdG8ge3tzZWxlY3RlZF92YWx1ZX19IGlzIG5vdCBhbGxvd2VkLCBQbGVhc2UgY2hvb3NlIGFub3RoZXIgYWNjb3VudCBmcm9tIGRyb3Bkb3duJ1xuICAgICAgICAgICAgdmFsdWVzPXt7IHNlbGVjdGVkX3ZhbHVlIH19XG4gICAgICAgIC8+XG4gICAgKTtcbn07XG5cbmNsYXNzIENvbmZpZyB7XG4gICAgY29udGFpbmVyID0gJyc7XG4gICAgaXNfc2Vzc2lvbl90aW1lb3V0ID0gdHJ1ZTtcbiAgICBvbklmcmFtZUxvYWRlZCA9ICcnO1xuICAgIHRpbWVvdXRfc2Vzc2lvbiA9ICcnO1xuXG4gICAgQG9ic2VydmFibGUgaWZyYW1lX2hlaWdodCA9IDA7XG4gICAgQG9ic2VydmFibGUgaWZyYW1lX3VybCA9ICcnO1xuXG4gICAgY29uc3RydWN0b3IoeyBjb250YWluZXIgfSkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9XG59XG5cbmNsYXNzIENvbmZpZ0Vycm9yIHtcbiAgICBAb2JzZXJ2YWJsZSBtZXNzYWdlID0gJyc7XG4gICAgQG9ic2VydmFibGUgY29kZSA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGZpZWxkcyA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGlzX3Nob3dfZnVsbF9wYWdlID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgb25DbGlja0J1dHRvbiA9IG51bGw7XG4gICAgQG9ic2VydmFibGUgaXNfYXNrX3VrX2Z1bmRzX3Byb3RlY3Rpb24gPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19zZWxmX2V4Y2x1c2lvbl9tYXhfdHVybm92ZXJfc2V0ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfYXNrX2F1dGhlbnRpY2F0aW9uID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfYXNrX2ZpbmFuY2lhbF9yaXNrX2FwcHJvdmFsID0gZmFsc2U7XG59XG5cbmNsYXNzIENvbmZpZ1BheW1lbnRBZ2VudCB7XG4gICAgbGlzdCA9IFtdO1xuXG4gICAgQG9ic2VydmFibGUgYWdlbnRzID0gW107XG4gICAgQG9ic2VydmFibGUgY29udGFpbmVyID0gJ3BheW1lbnRfYWdlbnQnO1xuICAgIEBvYnNlcnZhYmxlIGVycm9yID0gbmV3IENvbmZpZ0Vycm9yKCk7XG4gICAgQG9ic2VydmFibGUgZmlsdGVyZWRfbGlzdCA9IFtdO1xuICAgIEBvYnNlcnZhYmxlIGlzX25hbWVfc2VsZWN0ZWQgPSB0cnVlO1xuICAgIEBvYnNlcnZhYmxlIGlzX3dpdGhkcmF3ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfdHJ5X3dpdGhkcmF3X3N1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc193aXRoZHJhd19zdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgY29uZmlybSA9IHt9O1xuICAgIEBvYnNlcnZhYmxlIHJlY2VpcHQgPSB7fTtcbiAgICBAb2JzZXJ2YWJsZSBzZWxlY3RlZF9iYW5rID0gMDtcbiAgICBAb2JzZXJ2YWJsZSBzdXBwb3J0ZWRfYmFua3MgPSBbXTtcbiAgICBAb2JzZXJ2YWJsZSB2ZXJpZmljYXRpb24gPSBuZXcgQ29uZmlnVmVyaWZpY2F0aW9uKCk7XG4gICAgQG9ic2VydmFibGUgYWN0aXZlX3RhYl9pbmRleCA9IDA7XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QWN0aXZlVGFiSW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVfdGFiX2luZGV4ID0gaW5kZXg7XG4gICAgfVxufVxuXG5jbGFzcyBDb25maWdQYXltZW50QWdlbnRUcmFuc2ZlciB7XG4gICAgQG9ic2VydmFibGUgY29udGFpbmVyID0gJ3BheW1lbnRfYWdlbnRfdHJhbnNmZXInO1xuICAgIEBvYnNlcnZhYmxlIGVycm9yID0gbmV3IENvbmZpZ0Vycm9yKCk7XG4gICAgQG9ic2VydmFibGUgaXNfcGF5bWVudF9hZ2VudCA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX3RyeV90cmFuc2Zlcl9zdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfdHJhbnNmZXJfc3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGNvbmZpcm0gPSB7fTtcbiAgICBAb2JzZXJ2YWJsZSByZWNlaXB0ID0ge307XG4gICAgQG9ic2VydmFibGUgdHJhbnNmZXJfbGltaXQgPSB7fTtcbn1cblxuY2xhc3MgQ29uZmlnQWNjb3VudFRyYW5zZmVyIHtcbiAgICBAb2JzZXJ2YWJsZSBhY2NvdW50c19saXN0ID0gW107XG4gICAgQG9ic2VydmFibGUgY29udGFpbmVyID0gJ2FjY291bnRfdHJhbnNmZXInO1xuICAgIEBvYnNlcnZhYmxlIGVycm9yID0gbmV3IENvbmZpZ0Vycm9yKCk7XG4gICAgQG9ic2VydmFibGUgaGFzX25vX2FjY291bnQgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBoYXNfbm9fYWNjb3VudHNfYmFsYW5jZSA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX3RyYW5zZmVyX2NvbmZpcm0gPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19tdDVfdHJhbnNmZXJfaW5fcHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBtaW5pbXVtX2ZlZSA9IG51bGw7XG4gICAgQG9ic2VydmFibGUgcmVjZWlwdCA9IHt9O1xuICAgIEBvYnNlcnZhYmxlIHNlbGVjdGVkX2Zyb20gPSB7fTtcbiAgICBAb2JzZXJ2YWJsZSBzZWxlY3RlZF90byA9IHt9O1xuICAgIEBvYnNlcnZhYmxlIGFjY291bnRfdHJhbnNmZXJfYW1vdW50ID0gJyc7XG4gICAgQG9ic2VydmFibGUgdHJhbnNmZXJfZmVlID0gbnVsbDtcbiAgICBAb2JzZXJ2YWJsZSB0cmFuc2Zlcl9saW1pdCA9IHt9O1xuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldEJhbGFuY2VCeUxvZ2luSWQobG9naW5pZCwgYmFsYW5jZSkge1xuICAgICAgICB0aGlzLmFjY291bnRzX2xpc3QuZmluZChhY2MgPT4gbG9naW5pZCA9PT0gYWNjLnZhbHVlKS5iYWxhbmNlID0gYmFsYW5jZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QmFsYW5jZVNlbGVjdGVkRnJvbShiYWxhbmNlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZnJvbS5iYWxhbmNlID0gYmFsYW5jZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QmFsYW5jZVNlbGVjdGVkVG8oYmFsYW5jZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX3RvLmJhbGFuY2UgPSBiYWxhbmNlO1xuICAgIH1cbn1cblxuY2xhc3MgQ29uZmlnV2l0aGRyYXcge1xuICAgIEBvYnNlcnZhYmxlIGNvbnRhaW5lciA9ICd3aXRoZHJhdyc7XG4gICAgQG9ic2VydmFibGUgaWZyYW1lX2hlaWdodCA9IDA7XG4gICAgQG9ic2VydmFibGUgaWZyYW1lX3VybCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGVycm9yID0gbmV3IENvbmZpZ0Vycm9yKCk7XG4gICAgQG9ic2VydmFibGUgdmVyaWZpY2F0aW9uID0gbmV3IENvbmZpZ1ZlcmlmaWNhdGlvbigpO1xuXG4gICAgaXNfc2Vzc2lvbl90aW1lb3V0ID0gdHJ1ZTtcbiAgICBvbklmcmFtZUxvYWRlZCA9ICcnO1xuICAgIHRpbWVvdXRfc2Vzc2lvbiA9ICcnO1xufVxuXG5jbGFzcyBDb25maWdWZXJpZmljYXRpb24ge1xuICAgIGlzX2J1dHRvbl9jbGlja2VkID0gZmFsc2U7XG4gICAgdGltZW91dF9idXR0b24gPSAnJztcblxuICAgIEBvYnNlcnZhYmxlIGVycm9yID0gbmV3IENvbmZpZ0Vycm9yKCk7XG4gICAgQG9ic2VydmFibGUgaXNfZW1haWxfc2VudCA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX3Jlc2VuZF9jbGlja2VkID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgcmVzZW5kX3RpbWVvdXQgPSA2MDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FzaGllclN0b3JlIGV4dGVuZHMgQmFzZVN0b3JlIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHJvb3Rfc3RvcmUsIFdTIH0pIHtcbiAgICAgICAgc3VwZXIoeyByb290X3N0b3JlIH0pO1xuICAgICAgICB0aGlzLldTID0gV1M7XG5cbiAgICAgICAgd2hlbihcbiAgICAgICAgICAgICgpID0+IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfbG9nZ2VkX2luLFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoQ2FzaGllclRvTWVudSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghdGhpcy5oYXNfc2V0X2N1cnJlbmN5KSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZVNldEN1cnJlbmN5TW9kYWxUaXRsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbnJhbXAgPSBuZXcgT25SYW1wU3RvcmUoe1xuICAgICAgICAgICAgcm9vdF9zdG9yZTogdGhpcy5yb290X3N0b3JlLFxuICAgICAgICAgICAgV1M6IHRoaXMuV1MsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWNjb3VudF9wcm9tcHRfZGlhbG9nID0gbmV3IEFjY291bnRQcm9tcHREaWFsb2codGhpcy5yb290X3N0b3JlKTtcbiAgICAgICAgdGhpcy5lcnJvcl9kaWFsb2cgPSBuZXcgRXJyb3JEaWFsb2coKTtcbiAgICAgICAgdGhpcy50cmFuc2FjdGlvbl9oaXN0b3J5ID0gbmV3IFRyYW5zYWN0aW9uSGlzdG9yeVN0b3JlKHsgcm9vdF9zdG9yZTogdGhpcy5yb290X3N0b3JlLCBXUzogdGhpcy5XUyB9KTtcblxuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBAb2JzZXJ2YWJsZSBpc19sb2FkaW5nID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfcDJwX3Zpc2libGUgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBwMnBfbm90aWZpY2F0aW9uX2NvdW50ID0gMDtcbiAgICBAb2JzZXJ2YWJsZSBjYXNoaWVyX3JvdXRlX3RhYl9pbmRleCA9IDA7XG4gICAgQG9ic2VydmFibGUgaXNfMTBrX3dpdGhkcmF3YWxfbGltaXRfcmVhY2hlZCA9IHVuZGVmaW5lZDtcbiAgICBAb2JzZXJ2YWJsZSBpc19kZXBvc2l0ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgc2hvdWxkX3Nob3dfYWxsX2F2YWlsYWJsZV9jdXJyZW5jaWVzID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfY2FzaGllcl9kZWZhdWx0ID0gdHJ1ZTtcbiAgICBAb2JzZXJ2YWJsZSBkZXBvc2l0X3RhcmdldCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGNyeXB0b19hbW91bnQgPSAnJztcbiAgICBAb2JzZXJ2YWJsZSBmaWF0X2Ftb3VudCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGluc3VmZmljaWVudF9mdW5kX2Vycm9yID0gJyc7XG4gICAgQG9ic2VydmFibGUgYWxsX3BheW1lbnRfYWdlbnRfbGlzdCA9IFtdO1xuICAgIEBvYnNlcnZhYmxlIHNob3VsZF9zZXRfY3VycmVuY3lfbW9kYWxfdGl0bGVfY2hhbmdlID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgcDJwX2FkdmVydGlzZXJfZXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgQG9ic2VydmFibGUgaGFzX3NldF9jdXJyZW5jeSA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIHdpdGhkcmF3X2Ftb3VudCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGNvbnZlcnRlcl9mcm9tX2Ftb3VudCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGNvbnZlcnRlcl90b19hbW91bnQgPSAnJztcbiAgICBAb2JzZXJ2YWJsZSBjb252ZXJ0ZXJfZnJvbV9lcnJvciA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGNvbnZlcnRlcl90b19lcnJvciA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGlzX3RpbWVyX3Zpc2libGUgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19jcnlwdG9fdHJhbnNhY3Rpb25zX3Zpc2libGUgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBibG9ja2NoYWluX2FkZHJlc3MgPSAnJztcbiAgICBAb2JzZXJ2YWJsZSBzaG91bGRfcGVyY2VudGFnZV9yZXNldCA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIHBlcmNlbnRhZ2UgPSAwO1xuICAgIEBvYnNlcnZhYmxlIGlzX3dpdGhkcmF3X2NvbmZpcm1lZCA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIHNob3dfcDJwX2luX2Nhc2hpZXJfZGVmYXVsdCA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIG1heF93aXRoZHJhd19hbW91bnQgPSAwO1xuXG4gICAgQG9ic2VydmFibGUgY29uZmlnID0ge1xuICAgICAgICBhY2NvdW50X3RyYW5zZmVyOiBuZXcgQ29uZmlnQWNjb3VudFRyYW5zZmVyKCksXG4gICAgICAgIGRlcG9zaXQ6IHtcbiAgICAgICAgICAgIC4uLnRvSlMobmV3IENvbmZpZyh7IGNvbnRhaW5lcjogJ2RlcG9zaXQnIH0pKSxcbiAgICAgICAgICAgIGVycm9yOiBuZXcgQ29uZmlnRXJyb3IoKSxcbiAgICAgICAgfSxcbiAgICAgICAgcGF5bWVudF9hZ2VudDogbmV3IENvbmZpZ1BheW1lbnRBZ2VudCgpLFxuICAgICAgICBwYXltZW50X2FnZW50X3RyYW5zZmVyOiBuZXcgQ29uZmlnUGF5bWVudEFnZW50VHJhbnNmZXIoKSxcbiAgICAgICAgd2l0aGRyYXc6IG5ldyBDb25maWdXaXRoZHJhdygpLFxuICAgIH07XG5cbiAgICBhY3RpdmVfY29udGFpbmVyID0gdGhpcy5jb25maWcuZGVwb3NpdC5jb250YWluZXI7XG4gICAgb25SZW1vdW50ID0gKCkgPT4ge307XG4gICAgaXNfcG9wdWxhdGluZ192YWx1ZXMgPSBmYWxzZTtcblxuICAgIGNvbnRhaW5lcnMgPSBbdGhpcy5jb25maWcuZGVwb3NpdC5jb250YWluZXIsIHRoaXMuY29uZmlnLndpdGhkcmF3LmNvbnRhaW5lcl07XG5cbiAgICBtYXBfYWN0aW9uID0ge1xuICAgICAgICBbdGhpcy5jb25maWcud2l0aGRyYXcuY29udGFpbmVyXTogJ3BheW1lbnRfd2l0aGRyYXcnLFxuICAgICAgICBbdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5jb250YWluZXJdOiAncGF5bWVudF9hZ2VudF93aXRoZHJhdycsXG4gICAgfTtcblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBpc19jcnlwdG8oKSB7XG4gICAgICAgIGNvbnN0IHsgY3VycmVuY3kgfSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQ7XG4gICAgICAgIHJldHVybiAhIWN1cnJlbmN5ICYmIGlzQ3J5cHRvY3VycmVuY3koY3VycmVuY3kpO1xuICAgIH1cblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBpc19wYXltZW50X2FnZW50X3Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiAhISh0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmZpbHRlcmVkX2xpc3QubGVuZ3RoIHx8IHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuYWdlbnRzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IGlzX3BheW1lbnRfYWdlbnRfdmlzaWJsZV9pbl9vbmJvYXJkaW5nKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmFsbF9wYXltZW50X2FnZW50X2xpc3Q/LnBheW1lbnRhZ2VudF9saXN0Py5saXN0Py5sZW5ndGg7XG4gICAgfVxuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IGlzX3BheW1lbnRfYWdlbnRfdHJhbnNmZXJfdmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnRfdHJhbnNmZXIuaXNfcGF5bWVudF9hZ2VudDtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgaXNfYWNjb3VudF90cmFuc2Zlcl92aXNpYmxlKCkge1xuICAgICAgICAvLyBjYXNoaWVyIFRyYW5zZmVyIGFjY291bnQgdGFiIGlzIGhpZGRlbiBmb3IgaW9tIGNsaWVudHNcbiAgICAgICAgLy8gY2hlY2sgZm9yIHJlc2lkZW5jZSB0byBoaWRlIHRoZSB0YWIgYmVmb3JlIGNyZWF0aW5nIGEgcmVhbCBtb25leSBhY2NvdW50XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnJlc2lkZW5jZSAhPT0gJ2ltJztcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgaXNfcDJwX2VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzX3AycF92aXNpYmxlICYmICF0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2V1O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzaG93UDJwSW5DYXNoaWVyRGVmYXVsdCgpIHtcbiAgICAgICAgY29uc3QgaXNfcDJwX3Jlc3RyaWN0ZWQgPSB0aGlzLnAycF9hZHZlcnRpc2VyX2Vycm9yID09PSAnUmVzdHJpY3RlZENvdW50cnknO1xuICAgICAgICBjb25zdCBoYXNfdXNkX2N1cnJlbmN5ID0gdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY2NvdW50X2xpc3Quc29tZShhY2NvdW50ID0+IGFjY291bnQudGl0bGUgPT09ICdVU0QnKTtcbiAgICAgICAgY29uc3QgaGFzX3VzZXJfZmlhdF9jdXJyZW5jeSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuYWNjb3VudF9saXN0LnNvbWUoXG4gICAgICAgICAgICBhY2NvdW50ID0+ICFpc0NyeXB0b2N1cnJlbmN5KGFjY291bnQudGl0bGUpICYmIGFjY291bnQudGl0bGUgIT09ICdSZWFsJ1xuICAgICAgICApO1xuXG4gICAgICAgIGlmIChpc19wMnBfcmVzdHJpY3RlZCB8fCB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX3ZpcnR1YWwgfHwgKGhhc191c2VyX2ZpYXRfY3VycmVuY3kgJiYgIWhhc191c2RfY3VycmVuY3kpKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dfcDJwX2luX2Nhc2hpZXJfZGVmYXVsdCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93X3AycF9pbl9jYXNoaWVyX2RlZmF1bHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGF0dGFjaENhc2hpZXJUb01lbnUoKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNfc2V0X2N1cnJlbmN5KSB7XG4gICAgICAgICAgICB0aGlzLnNldEhhc1NldEN1cnJlbmN5KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJvb3Rfc3RvcmUubWVudS5hdHRhY2goe1xuICAgICAgICAgICAgaWQ6ICdkdF9jYXNoaWVyX3RhYicsXG4gICAgICAgICAgICBpY29uOiA8Q2FzaGllck5vdGlmaWNhdGlvbnMgcDJwX25vdGlmaWNhdGlvbl9jb3VudD17dGhpcy5wMnBfbm90aWZpY2F0aW9uX2NvdW50fSAvPixcbiAgICAgICAgICAgIHRleHQ6ICgpID0+IGxvY2FsaXplKCdDYXNoaWVyJyksXG4gICAgICAgICAgICBsaW5rX3RvOiB0aGlzLmhhc19zZXRfY3VycmVuY3kgJiYgcm91dGVzLmNhc2hpZXIsXG4gICAgICAgICAgICBvbkNsaWNrOiAhdGhpcy5oYXNfc2V0X2N1cnJlbmN5ICYmIHRoaXMucm9vdF9zdG9yZS51aS50b2dnbGVTZXRDdXJyZW5jeU1vZGFsLFxuICAgICAgICAgICAgbG9naW5fb25seTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlcGxhY2VDYXNoaWVyTWVudU9uY2xpY2soKSB7XG4gICAgICAgIHRoaXMuc2V0SGFzU2V0Q3VycmVuY3koKTtcblxuICAgICAgICB0aGlzLnJvb3Rfc3RvcmUubWVudS51cGRhdGUoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6ICdkdF9jYXNoaWVyX3RhYicsXG4gICAgICAgICAgICAgICAgaWNvbjogPENhc2hpZXJOb3RpZmljYXRpb25zIHAycF9ub3RpZmljYXRpb25fY291bnQ9e3RoaXMucDJwX25vdGlmaWNhdGlvbl9jb3VudH0gLz4sXG4gICAgICAgICAgICAgICAgdGV4dDogKCkgPT4gbG9jYWxpemUoJ0Nhc2hpZXInKSxcbiAgICAgICAgICAgICAgICBsaW5rX3RvOiB0aGlzLmhhc19zZXRfY3VycmVuY3kgJiYgcm91dGVzLmNhc2hpZXIsXG4gICAgICAgICAgICAgICAgb25DbGljazogIXRoaXMuaGFzX3NldF9jdXJyZW5jeSA/IHRoaXMucm9vdF9zdG9yZS51aS50b2dnbGVTZXRDdXJyZW5jeU1vZGFsIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbG9naW5fb25seTogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAxXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldEhhc1NldEN1cnJlbmN5KCkge1xuICAgICAgICB0aGlzLmhhc19zZXRfY3VycmVuY3kgPVxuICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY2NvdW50X2xpc3RcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGFjY291bnQgPT4gIWFjY291bnQuaXNfdmlydHVhbClcbiAgICAgICAgICAgICAgICAuc29tZShhY2NvdW50ID0+IGFjY291bnQudGl0bGUgIT09ICdSZWFsJykgfHwgIXRoaXMucm9vdF9zdG9yZS5jbGllbnQuaGFzX2FjdGl2ZV9yZWFsX2FjY291bnQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGNoYW5nZVNldEN1cnJlbmN5TW9kYWxUaXRsZSgpIHtcbiAgICAgICAgdGhpcy5zaG91bGRfc2V0X2N1cnJlbmN5X21vZGFsX3RpdGxlX2NoYW5nZSA9IHRydWU7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIG9uTW91bnRDYXNoaWVyRGVmYXVsdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc19zZXRfY3VycmVuY3kpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SGFzU2V0Q3VycmVuY3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldElzQ2FzaGllckRlZmF1bHQodHJ1ZSk7XG4gICAgICAgIHRoaXMuYWNjb3VudF9wcm9tcHRfZGlhbG9nLnJlc2V0SXNDb25maXJtZWQoKTtcblxuICAgICAgICB0aGlzLnNldExvYWRpbmcodHJ1ZSk7XG4gICAgICAgIGlmICh0aGlzLmFsbF9wYXltZW50X2FnZW50X2xpc3Q/LnBheW1lbnRhZ2VudF9saXN0Py5saXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRfYWdlbnRfbGlzdCA9IGF3YWl0IHRoaXMuZ2V0QWxsUGF5bWVudEFnZW50TGlzdCgpO1xuICAgICAgICAgICAgdGhpcy5zZXRBbGxQYXltZW50QWdlbnRMaXN0KHBheW1lbnRfYWdlbnRfbGlzdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNXaXRoZHJhd0NvbmZpcm1lZChpc193aXRoZHJhd19jb25maXJtZWQpIHtcbiAgICAgICAgdGhpcy5pc193aXRoZHJhd19jb25maXJtZWQgPSBpc193aXRoZHJhd19jb25maXJtZWQ7XG5cbiAgICAgICAgaWYgKGlzX3dpdGhkcmF3X2NvbmZpcm1lZCkgdGhpcy5zZXRXaXRoZHJhd0Ftb3VudCh0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCk7XG5cbiAgICAgICAgaWYgKCFpc193aXRoZHJhd19jb25maXJtZWQgJiYgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS52ZXJpZmljYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJWZXJpZmljYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRXaXRoZHJhd0Ftb3VudChhbW91bnQpIHtcbiAgICAgICAgdGhpcy53aXRoZHJhd19hbW91bnQgPSBhbW91bnQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGNhbGN1bGF0ZVBlcmNlbnRhZ2UoYW1vdW50ID0gdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlX2NvbnRhaW5lciA9PT0gdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMucGVyY2VudGFnZSA9ICsoKGFtb3VudCAvICt0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uYmFsYW5jZSkgKiAxMDApLnRvRml4ZWQoMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSArKChhbW91bnQgLyArdGhpcy5yb290X3N0b3JlLmNsaWVudC5iYWxhbmNlKSAqIDEwMCkudG9GaXhlZCgwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBwZXJjZW50YWdlU2VsZWN0b3JTZWxlY3Rpb25TdGF0dXMoc2hvdWxkX3BlcmNlbnRhZ2VfcmVzZXQpIHtcbiAgICAgICAgdGhpcy5zaG91bGRfcGVyY2VudGFnZV9yZXNldCA9IHNob3VsZF9wZXJjZW50YWdlX3Jlc2V0O1xuXG4gICAgICAgIGlmIChzaG91bGRfcGVyY2VudGFnZV9yZXNldCkge1xuICAgICAgICAgICAgdGhpcy5wZXJjZW50YWdlID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHNhdmVXaXRoZHJhdyh2ZXJpZmljYXRpb25fY29kZSkge1xuICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJyk7XG4gICAgICAgIGF3YWl0IHRoaXMuV1MuY3J5cHRvV2l0aGRyYXcoe1xuICAgICAgICAgICAgYWRkcmVzczogdGhpcy5ibG9ja2NoYWluX2FkZHJlc3MsXG4gICAgICAgICAgICBhbW91bnQ6ICt0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCxcbiAgICAgICAgICAgIHZlcmlmaWNhdGlvbl9jb2RlLFxuICAgICAgICB9KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAodmVyaWZpY2F0aW9uX2NvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xlYXIgdmVyaWZpY2F0aW9uIGNvZGUgb24gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhclZlcmlmaWNhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0V2l0aHJhd0Zvcm0oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJc1dpdGhkcmF3Q29uZmlybWVkKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgcmVxdWVzdFdpdGhkcmF3KHZlcmlmaWNhdGlvbl9jb2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19sb2dnZWRfaW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUVycm9yKGxvY2FsaXplKCdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkLicpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuV1MuY3J5cHRvV2l0aGRyYXcoe1xuICAgICAgICAgICAgYWRkcmVzczogdGhpcy5ibG9ja2NoYWluX2FkZHJlc3MsXG4gICAgICAgICAgICBhbW91bnQ6ICt0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCxcbiAgICAgICAgICAgIHZlcmlmaWNhdGlvbl9jb2RlLFxuICAgICAgICAgICAgZHJ5X3J1bjogMSxcbiAgICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yX2RpYWxvZy5zZXRFcnJvck1lc3NhZ2UocmVzcG9uc2UuZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZVdpdGhkcmF3KHZlcmlmaWNhdGlvbl9jb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlc2V0V2l0aHJhd0Zvcm0oKSB7XG4gICAgICAgIHRoaXMuc2V0QmxvY2tjaGFpbkFkZHJlc3MoJycpO1xuICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21BbW91bnQoJycpO1xuICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvQW1vdW50KCcnKTtcbiAgICAgICAgdGhpcy5jbGVhclZlcmlmaWNhdGlvbigpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc0RlcG9zaXQoaXNfZGVwb3NpdCkge1xuICAgICAgICB0aGlzLmlzX2RlcG9zaXQgPSBpc19kZXBvc2l0O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRTaG91bGRTaG93QWxsQXZhaWxhYmxlQ3VycmVuY2llcyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNob3VsZF9zaG93X2FsbF9hdmFpbGFibGVfY3VycmVuY2llcyA9IHZhbHVlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRCbG9ja2NoYWluQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgICAgIHRoaXMuYmxvY2tjaGFpbl9hZGRyZXNzID0gYWRkcmVzcztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNDYXNoaWVyRGVmYXVsdChpc19jYXNoaWVyX2RlZmF1bHQpIHtcbiAgICAgICAgdGhpcy5pc19jYXNoaWVyX2RlZmF1bHQgPSBpc19jYXNoaWVyX2RlZmF1bHQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldERlcG9zaXRUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuZGVwb3NpdF90YXJnZXQgPSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGNvbnRpbnVlUm91dGUoKSB7XG4gICAgICAgIHRoaXMucm9vdF9zdG9yZS5jb21tb24ucm91dGVUbyh0aGlzLmRlcG9zaXRfdGFyZ2V0KTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QWNjb3VudFN3aXRjaExpc3RlbmVyKCkge1xuICAgICAgICAvLyBjYXNoaWVyIGluaXRzIG9uY2UgYW5kIHRyaWVzIHRvIHN0YXkgYWN0aXZlIHVudGlsIHN3aXRjaGluZyBhY2NvdW50XG4gICAgICAgIC8vIHNpbmNlIGNhc2hpZXIgY2FsbHMgdGFrZSBhIGxvbmcgdGltZSB0byByZXNwb25kIG9yIGRpc3BsYXkgaW4gaWZyYW1lXG4gICAgICAgIC8vIHNvIHdlIGRvbid0IGhhdmUgYW55IHVubW91bnQgZnVuY3Rpb24gaGVyZSBhbmQgZXZlcnl0aGluZyBnZXRzIHJlc2V0IG9uIHN3aXRjaCBpbnN0ZWFkXG4gICAgICAgIHRoaXMuZGlzcG9zZVN3aXRjaEFjY291bnQoKTtcbiAgICAgICAgdGhpcy5vblN3aXRjaEFjY291bnQodGhpcy5hY2NvdW50U3dpdGNoZXJMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldEFjdGl2ZVRhYkluZGV4KGluZGV4KSB7XG4gICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuc2V0QWN0aXZlVGFiSW5kZXgoaW5kZXgpO1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5zZW5kVmVyaWZpY2F0aW9uRW1haWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluaXRpYWxpc2UgUDJQIGF0dHJpYnV0ZXMgb24gYXBwIGxvYWQgd2l0aG91dCBtb3VudGluZyB0aGUgZW50aXJlIGNhc2hpZXJcbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgaW5pdCgpIHtcbiAgICAgICAgd2hlbihcbiAgICAgICAgICAgICgpID0+IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfbG9nZ2VkX2luLFxuICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0QWR2ZXJ0aXplckVycm9yKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja1AycFN0YXR1cygpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hlY2sxMGtMaW1pdCgpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0UGF5bWVudEFnZW50TGlzdCgpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZmlsdGVyUGF5bWVudEFnZW50TGlzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICB3aGVuKFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5pc19wYXltZW50X2FnZW50X3Zpc2libGUsXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmZpbHRlclBheW1lbnRBZ2VudExpc3QoKVxuICAgICAgICApO1xuXG4gICAgICAgIHJlYWN0aW9uKFxuICAgICAgICAgICAgKCkgPT4gW1xuICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuc3dpdGNoZWQsXG4gICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19sb2dnZWRfaW4sXG4gICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5jdXJyZW5jeSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gd2FpdCBmb3IgY2xpZW50IHNldHRpbmdzIHRvIGJlIHBvcHVsYXRlZCBpbiBjbGllbnQtc3RvcmVcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLldTLndhaXQoJ2dldF9zZXR0aW5ncycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfbG9nZ2VkX2luKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0QWR2ZXJ0aXplckVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjb3VudF9wcm9tcHRfZGlhbG9nLnJlc2V0TGFzdExvY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5yb290X3N0b3JlLmNsaWVudC5zd2l0Y2hlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1AycFN0YXR1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2l0aGRyYXdhbCBsaW1pdCBpcyByZWFjaGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB5ZXMsIHRoaXMgd2lsbCB0cmlnZ2VyIHRvIHNob3cgYSBub3RpZmljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hlY2sxMGtMaW1pdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHJlYWN0aW9uKFxuICAgICAgICAgICAgKCkgPT4gW3RoaXMucm9vdF9zdG9yZS5jbGllbnQuY3VycmVuY3ldLFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNXaXRoZHJhd0NvbmZpcm1lZChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIGdldEFkdmVydGl6ZXJFcnJvcigpIHtcbiAgICAgICAgY29uc3QgYWR2ZXJ0aXNlcl9pbmZvID0gYXdhaXQgdGhpcy5XUy5hdXRob3JpemVkLnAycEFkdmVydGlzZXJJbmZvKCk7XG4gICAgICAgIHRoaXMuc2V0UDJwQWR2ZXJ0aXNlckVycm9yKGdldFByb3BlcnR5VmFsdWUoYWR2ZXJ0aXNlcl9pbmZvLCBbJ2Vycm9yJywgJ2NvZGUnXSkpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRQMnBBZHZlcnRpc2VyRXJyb3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy5wMnBfYWR2ZXJ0aXNlcl9lcnJvciA9IHZhbHVlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBjaGVja1AycFN0YXR1cygpIHtcbiAgICAgICAgY29uc3QgYWR2ZXJ0aXNlcl9lcnJvciA9IHRoaXMucDJwX2FkdmVydGlzZXJfZXJyb3I7XG4gICAgICAgIGNvbnN0IGlzX3AycF9yZXN0cmljdGVkID0gYWR2ZXJ0aXNlcl9lcnJvciA9PT0gJ1Jlc3RyaWN0ZWRDb3VudHJ5JyB8fCBhZHZlcnRpc2VyX2Vycm9yID09PSAnUmVzdHJpY3RlZEN1cnJlbmN5JztcbiAgICAgICAgdGhpcy5zZXRJc1AycFZpc2libGUoIShpc19wMnBfcmVzdHJpY3RlZCB8fCB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX3ZpcnR1YWwpKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Nb3VudENvbW1vbihzaG91bGRfcmVtb3VudCkge1xuICAgICAgICBpZiAodGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19sb2dnZWRfaW4pIHtcbiAgICAgICAgICAgIC8vIGF2b2lkIGNhbGxpbmcgdGhpcyBhZ2FpblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfcG9wdWxhdGluZ192YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaXNfcG9wdWxhdGluZ192YWx1ZXMgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAoc2hvdWxkX3JlbW91bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uUmVtb3VudCA9IHRoaXMub25Nb3VudENvbW1vbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gc2VlIGlmIGNsaWVudCdzIGNvdW50cnkgaGFzIFBBXG4gICAgICAgICAgICAvLyBpZiB5ZXMsIHdlIGNhbiBzaG93IHRoZSBQQSB0YWIgaW4gY2FzaGllclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50Lmxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQYXltZW50QWdlbnRMaXN0KCkudGhlbih0aGlzLmZpbHRlclBheW1lbnRBZ2VudExpc3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnRfdHJhbnNmZXIuaXNfcGF5bWVudF9hZ2VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tJc1BheW1lbnRBZ2VudCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuYWNjb3VudHNfbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRBY2NvdW50c1RyYW5zZmVyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5vbnJhbXAuaXNfb25yYW1wX3RhYl92aXNpYmxlICYmIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5lbmRzV2l0aChyb3V0ZXMuY2FzaGllcl9vbnJhbXApKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNvbW1vbi5yb3V0ZVRvKHJvdXRlcy5jYXNoaWVyX2RlcG9zaXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIXRoaXMuaXNfY3J5cHRvX3RyYW5zYWN0aW9uc192aXNpYmxlICYmXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmVuZHNXaXRoKHJvdXRlcy5jYXNoaWVyX2NyeXB0b190cmFuc2FjdGlvbnMpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY29tbW9uLnJvdXRlVG8ocm91dGVzLmNhc2hpZXJfZGVwb3NpdCk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbl9oaXN0b3J5LnNldElzQ3J5cHRvVHJhbnNhY3Rpb25zVmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zYWN0aW9uX2hpc3Rvcnkub25Nb3VudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzQ3J5cHRvVHJhbnNhY3Rpb25zVmlzaWJsZShpc192aXNpYmxlKSB7XG4gICAgICAgIHRoaXMuaXNfY3J5cHRvX3RyYW5zYWN0aW9uc192aXNpYmxlID0gaXNfdmlzaWJsZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0Q2FzaGllclRhYkluZGV4KGluZGV4KSB7XG4gICAgICAgIHRoaXMuY2FzaGllcl9yb3V0ZV90YWJfaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgd2lsbE1vdW50V2l0aGRyYXcodmVyaWZpY2F0aW9uX2NvZGUpIHtcbiAgICAgICAgaWYgKHZlcmlmaWNhdGlvbl9jb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyVmVyaWZpY2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Nb3VudFdpdGhkcmF3KHZlcmlmaWNhdGlvbl9jb2RlKSB7XG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgY29uc3Qgc3RyUmVnRXhwID0gL15cXHd7OCwxMjh9JC87XG4gICAgICAgIGxldCByZXNwb25zZV9jYXNoaWVyO1xuXG4gICAgICAgIGlmIChzdHJSZWdFeHAudGVzdCh2ZXJpZmljYXRpb25fY29kZSkpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlX2Nhc2hpZXIgPSBhd2FpdCB0aGlzLldTLmNyeXB0b1dpdGhkcmF3KHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0aGlzLmJsb2NrY2hhaW5fYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBhbW91bnQ6ICt0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCxcbiAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25fY29kZSxcbiAgICAgICAgICAgICAgICBkcnlfcnVuOiAxLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZV9jYXNoaWVyID0geyBlcnJvcjogeyBjb2RlOiAnSW52YWxpZFRva2VuJywgbWVzc2FnZTogJ1lvdXIgdG9rZW4gaGFzIGV4cGlyZWQgb3IgaXMgaW52YWxpZC4nIH0gfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXNwb25zZV9jYXNoaWVyLmVycm9yLmNvZGUgPT09ICdJbnZhbGlkVG9rZW4nKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNhc2hpZXJFcnJvcihyZXNwb25zZV9jYXNoaWVyLmVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnNldFNlc3Npb25UaW1lb3V0KHRydWUpO1xuICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVvdXRDYXNoaWVyVXJsKCk7XG4gICAgICAgICAgICBpZiAodmVyaWZpY2F0aW9uX2NvZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBjbGVhciB2ZXJpZmljYXRpb24gY29kZSBvbiBlcnJvclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJWZXJpZmljYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLndpdGhkcmF3LmVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSh0aGlzLmNvbmZpZy53aXRoZHJhdy5lcnJvciwgdGhpcy5vbk1vdW50V2l0aGRyYXcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIG9uTW91bnREZXBvc2l0KHZlcmlmaWNhdGlvbl9jb2RlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRfY29udGFpbmVyID0gdGhpcy5hY3RpdmVfY29udGFpbmVyO1xuXG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICAgICAgdGhpcy5zZXRDb250YWluZXJIZWlnaHQoMCk7XG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcblxuICAgICAgICBpZiAoIXRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uaXNfc2Vzc2lvbl90aW1lb3V0KSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrSWZyYW1lTG9hZGVkKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBzZXNzaW9uIGhhcyB0aW1lZCBvdXQgcmVzZXQgZXZlcnl0aGluZ1xuICAgICAgICB0aGlzLnNldElmcmFtZVVybCgnJyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICh0aGlzLmFjdGl2ZV9jb250YWluZXIgPT09IHRoaXMuY29uZmlnLndpdGhkcmF3LmNvbnRhaW5lciAmJiAhdmVyaWZpY2F0aW9uX2NvZGUpIHx8XG4gICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX3ZpcnR1YWxcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgLy8gaWYgdmlydHVhbCwgY2xlYXIgZXZlcnl0aGluZyBhbmQgZG9uJ3QgcHJvY2VlZCBmdXJ0aGVyXG4gICAgICAgICAgICAvLyBpZiBubyB2ZXJpZmljYXRpb24gY29kZSwgd2Ugc2hvdWxkIHJlcXVlc3QgYWdhaW5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlX2Nhc2hpZXIgPSBhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQuY2FzaGllcih0aGlzLmFjdGl2ZV9jb250YWluZXIsIHsgdmVyaWZpY2F0aW9uX2NvZGUgfSk7XG5cbiAgICAgICAgLy8gaWYgdGFiIGNoYW5nZWQgd2hpbGUgd2FpdGluZyBmb3IgcmVzcG9uc2UsIGlnbm9yZSBpdFxuICAgICAgICBpZiAoY3VycmVudF9jb250YWluZXIgIT09IHRoaXMuYWN0aXZlX2NvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2VfY2FzaGllci5lcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDYXNoaWVyRXJyb3IocmVzcG9uc2VfY2FzaGllci5lcnJvcik7XG4gICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5zZXRTZXNzaW9uVGltZW91dCh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0Q2FzaGllclVybCgpO1xuICAgICAgICAgICAgaWYgKHZlcmlmaWNhdGlvbl9jb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgdmVyaWZpY2F0aW9uIGNvZGUgb24gZXJyb3JcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVmVyaWZpY2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNDcnlwdG9jdXJyZW5jeSh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmN1cnJlbmN5KSkge1xuICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udGFpbmVySGVpZ2h0KCczODAnKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SWZyYW1lVXJsKHJlc3BvbnNlX2Nhc2hpZXIuY2FzaGllcik7XG4gICAgICAgICAgICAvLyBjcnlwdG8gY2FzaGllciBjYW4gb25seSBiZSBhY2Nlc3NlZCBvbmNlIGFuZCB0aGUgc2Vzc2lvbiBleHBpcmVzXG4gICAgICAgICAgICAvLyBzbyBubyBuZWVkIHRvIHNldCB0aW1lb3V0cyB0byBrZWVwIHRoZSBzZXNzaW9uIGFsaXZlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoZWNrSWZyYW1lTG9hZGVkKCk7XG4gICAgICAgICAgICB0aGlzLnNldElmcmFtZVVybChyZXNwb25zZV9jYXNoaWVyLmNhc2hpZXIpO1xuICAgICAgICAgICAgdGhpcy5zZXRTZXNzaW9uVGltZW91dChmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnNldFRpbWVvdXRDYXNoaWVyVXJsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0Tm90aWZpY2F0aW9uQ291bnQobm90aWZpY2F0aW9uX2NvdW50KSB7XG4gICAgICAgIHRoaXMucDJwX25vdGlmaWNhdGlvbl9jb3VudCA9IG5vdGlmaWNhdGlvbl9jb3VudDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNQMnBWaXNpYmxlKGlzX3AycF92aXNpYmxlKSB7XG4gICAgICAgIHRoaXMuaXNfcDJwX3Zpc2libGUgPSBpc19wMnBfdmlzaWJsZTtcbiAgICAgICAgaWYgKCFpc19wMnBfdmlzaWJsZSAmJiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuZW5kc1dpdGgocm91dGVzLmNhc2hpZXJfcDJwKSkge1xuICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNvbW1vbi5yb3V0ZVRvKHRoaXMuYWNjb3VudF9wcm9tcHRfZGlhbG9nLmxhc3RfbG9jYXRpb24gPz8gcm91dGVzLmNhc2hpZXJfZGVwb3NpdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Nb3VudCh2ZXJpZmljYXRpb25fY29kZSkge1xuICAgICAgICB0aGlzLm9uUmVtb3VudCA9IHRoaXMub25Nb3VudDtcbiAgICAgICAgYXdhaXQgdGhpcy5vbk1vdW50Q29tbW9uKCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJzLmluZGV4T2YodGhpcy5hY3RpdmVfY29udGFpbmVyKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICF0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX3N3aXRjaGluZyAmJlxuICAgICAgICAgICAgdGhpcy5hY3RpdmVfY29udGFpbmVyICE9PSB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmNvbnRhaW5lclxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FzaGllciBTdG9yZSBvbk1vdW50IHJlcXVpcmVzIGEgdmFsaWQgY29udGFpbmVyIG5hbWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbk1vdW50RGVwb3NpdCh2ZXJpZmljYXRpb25fY29kZSk7XG4gICAgfVxuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IGlzX2Nhc2hpZXJfbG9ja2VkKCkge1xuICAgICAgICBpZiAoIXRoaXMucm9vdF9zdG9yZS5jbGllbnQuYWNjb3VudF9zdGF0dXM/LnN0YXR1cykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY2NvdW50X3N0YXR1cztcblxuICAgICAgICByZXR1cm4gc3RhdHVzLnNvbWUoc3RhdHVzX25hbWUgPT4gc3RhdHVzX25hbWUgPT09ICdjYXNoaWVyX2xvY2tlZCcpO1xuICAgIH1cblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBpc19zeXN0ZW1fbWFpbnRlbmFuY2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY2NvdW50X3N0YXR1cz8uY2FzaGllcl92YWxpZGF0aW9uKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHsgY2FzaGllcl92YWxpZGF0aW9uIH0gPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjY291bnRfc3RhdHVzO1xuXG4gICAgICAgIHJldHVybiBjYXNoaWVyX3ZhbGlkYXRpb24uc29tZSh2YWxpZGF0aW9uID0+IHZhbGlkYXRpb24gPT09ICdzeXN0ZW1fbWFpbnRlbmFuY2UnKTtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgaXNfZGVwb3NpdF9sb2NrZWQoKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGlzX2F1dGhlbnRpY2F0aW9uX25lZWRlZCxcbiAgICAgICAgICAgIGlzX3RuY19uZWVkZWQsXG4gICAgICAgICAgICBpc19maW5hbmNpYWxfYWNjb3VudCxcbiAgICAgICAgICAgIGlzX2ZpbmFuY2lhbF9pbmZvcm1hdGlvbl9pbmNvbXBsZXRlLFxuICAgICAgICAgICAgaXNfdHJhZGluZ19leHBlcmllbmNlX2luY29tcGxldGUsXG4gICAgICAgICAgICBhY2NvdW50X3N0YXR1cyxcbiAgICAgICAgICAgIGlzX2V1LFxuICAgICAgICAgICAgbXQ1X2xvZ2luX2xpc3QsXG4gICAgICAgICAgICBpc19kZXBvc2l0X2xvY2ssXG4gICAgICAgIH0gPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50O1xuICAgICAgICBpZiAoIWFjY291bnRfc3RhdHVzPy5zdGF0dXMpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBjb25zdCBuZWVkX2F1dGhlbnRpY2F0aW9uID1cbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmRlcG9zaXQuZXJyb3IuaXNfYXNrX2F1dGhlbnRpY2F0aW9uIHx8IChpc19hdXRoZW50aWNhdGlvbl9uZWVkZWQgJiYgaXNfZXUpO1xuICAgICAgICBjb25zdCBuZWVkX2ZpbmFuY2lhbF9hc3Nlc3NtZW50ID1cbiAgICAgICAgICAgIGlzX2ZpbmFuY2lhbF9hY2NvdW50ICYmIChpc19maW5hbmNpYWxfaW5mb3JtYXRpb25faW5jb21wbGV0ZSB8fCBpc190cmFkaW5nX2V4cGVyaWVuY2VfaW5jb21wbGV0ZSk7XG4gICAgICAgIC8vIENSIGNhbiBkZXBvc2l0IHdpdGhvdXQgYWNjZXB0aW5nIGxhdGVzdCB0bmMgZXhjZXB0IHRob3NlIHdpdGggRmluYW5jaWFsIFNUUFxuICAgICAgICBjb25zdCBuZWVkX3RuYyA9XG4gICAgICAgICAgICAoaXNfZXUgfHxcbiAgICAgICAgICAgICAgICBtdDVfbG9naW5fbGlzdC5zb21lKFxuICAgICAgICAgICAgICAgICAgICBpdGVtID0+IGl0ZW0uYWNjb3VudF90eXBlID09PSAncmVhbCcgJiYgaXRlbS5zdWJfYWNjb3VudF90eXBlID09PSAnZmluYW5jaWFsX3N0cCdcbiAgICAgICAgICAgICAgICApKSAmJlxuICAgICAgICAgICAgaXNfdG5jX25lZWRlZDtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaXNfZGVwb3NpdF9sb2NrIHx8XG4gICAgICAgICAgICBuZWVkX2F1dGhlbnRpY2F0aW9uIHx8XG4gICAgICAgICAgICBuZWVkX3RuYyB8fFxuICAgICAgICAgICAgbmVlZF9maW5hbmNpYWxfYXNzZXNzbWVudCB8fFxuICAgICAgICAgICAgdGhpcy5jb25maWcuZGVwb3NpdC5lcnJvci5pc19hc2tfZmluYW5jaWFsX3Jpc2tfYXBwcm92YWxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgaXNfd2l0aGRyYXdhbF9sb2NrZWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY2NvdW50X3N0YXR1cz8uc3RhdHVzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHsgYXV0aGVudGljYXRpb24gfSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuYWNjb3VudF9zdGF0dXM7XG4gICAgICAgIGNvbnN0IG5lZWRfcG9pID0gYXV0aGVudGljYXRpb24ubmVlZHNfdmVyaWZpY2F0aW9uLmluY2x1ZGVzKCdpZGVudGl0eScpO1xuXG4gICAgICAgIGNvbnN0IG5lZWRfYXV0aGVudGljYXRpb24gPSB0aGlzLmNvbmZpZy53aXRoZHJhdy5lcnJvci5pc19hc2tfYXV0aGVudGljYXRpb24gJiYgbmVlZF9wb2k7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfd2l0aGRyYXdhbF9sb2NrIHx8XG4gICAgICAgICAgICBuZWVkX2F1dGhlbnRpY2F0aW9uIHx8XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy53aXRoZHJhdy5lcnJvci5pc19hc2tfZmluYW5jaWFsX3Jpc2tfYXBwcm92YWxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgaXNfdHJhbnNmZXJfbG9ja2VkKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpc19maW5hbmNpYWxfYWNjb3VudCxcbiAgICAgICAgICAgIGlzX2ZpbmFuY2lhbF9pbmZvcm1hdGlvbl9pbmNvbXBsZXRlLFxuICAgICAgICAgICAgaXNfdHJhZGluZ19leHBlcmllbmNlX2luY29tcGxldGUsXG4gICAgICAgICAgICBhY2NvdW50X3N0YXR1cyxcbiAgICAgICAgfSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQ7XG5cbiAgICAgICAgaWYgKCFhY2NvdW50X3N0YXR1cz8uc3RhdHVzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgY29uc3QgbmVlZF9maW5hbmNpYWxfYXNzZXNzbWVudCA9XG4gICAgICAgICAgICBpc19maW5hbmNpYWxfYWNjb3VudCAmJiAoaXNfZmluYW5jaWFsX2luZm9ybWF0aW9uX2luY29tcGxldGUgfHwgaXNfdHJhZGluZ19leHBlcmllbmNlX2luY29tcGxldGUpO1xuXG4gICAgICAgIHJldHVybiBuZWVkX2ZpbmFuY2lhbF9hc3Nlc3NtZW50ICYmIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuZXJyb3IuaXNfYXNrX2ZpbmFuY2lhbF9yaXNrX2FwcHJvdmFsO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRNYXhXaXRoZHJhd0Ftb3VudChhbW91bnQpIHtcbiAgICAgICAgdGhpcy5tYXhfd2l0aGRyYXdfYW1vdW50ID0gYW1vdW50O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBjaGVjazEwa0xpbWl0KCkge1xuICAgICAgICBjb25zdCByZW1haW5kZXIgPSAoYXdhaXQgdGhpcy5yb290X3N0b3JlLmNsaWVudC5nZXRMaW1pdHMoKSk/LmdldF9saW1pdHM/LnJlbWFpbmRlcjtcbiAgICAgICAgdGhpcy5zZXRNYXhXaXRoZHJhd0Ftb3VudChyZW1haW5kZXIpO1xuICAgICAgICBjb25zdCBtaW5fd2l0aGRyYXdhbCA9IGdldE1pbldpdGhkcmF3YWwodGhpcy5yb290X3N0b3JlLmNsaWVudC5jdXJyZW5jeSk7XG4gICAgICAgIGNvbnN0IGlzX2xpbWl0X3JlYWNoZWQgPSAhISh0eXBlb2YgcmVtYWluZGVyICE9PSAndW5kZWZpbmVkJyAmJiArcmVtYWluZGVyIDwgbWluX3dpdGhkcmF3YWwpO1xuICAgICAgICB0aGlzLnNldDEwa0xpbWl0YXRpb24oaXNfbGltaXRfcmVhY2hlZCk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldDEwa0xpbWl0YXRpb24oaXNfbGltaXRfcmVhY2hlZCkge1xuICAgICAgICB0aGlzLmlzXzEwa193aXRoZHJhd2FsX2xpbWl0X3JlYWNoZWQgPSBpc19saW1pdF9yZWFjaGVkO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBjaGVja0lmcmFtZUxvYWRlZCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVPbklmcmFtZUxvYWRlZCgpO1xuICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLm9uSWZyYW1lTG9hZGVkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmICgvY2FzaGllcnxkb3VnaGZsb3cvLnRlc3QoZS5vcmlnaW4pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGhlaWdodCBvZiB0aGUgY29udGFpbmVyIGFmdGVyIGNvbnRlbnQgbG9hZHMgc28gdGhhdCB0aGVcbiAgICAgICAgICAgICAgICAvLyBsb2FkaW5nIGJhciBzdGF5cyB2ZXJ0aWNhbGx5IGNlbnRlcmVkIHVudGlsIHRoZSBlbmRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb290X3N0b3JlLnVpLmlzX21vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENvbnRhaW5lckhlaWdodCh3aW5kb3cuaW5uZXJIZWlnaHQgLSAxMDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udGFpbmVySGVpZ2h0KHdpbmRvdy5pbm5lckhlaWdodCAtIDE5MCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGRvIG5vdCByZW1vdmUgdGhlIGxpc3RlbmVyXG4gICAgICAgICAgICAgICAgLy8gb24gZXZlcnkgaWZyYW1lIHNjcmVlbiBjaGFuZ2Ugd2UgbmVlZCB0byB1cGRhdGUgdGhlIGhlaWdodCB0byBtb3JlL2xlc3MgdG8gbWF0Y2ggdGhlIG5ldyBjb250ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLm9uSWZyYW1lTG9hZGVkLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlT25JZnJhbWVMb2FkZWQoY29udGFpbmVyID0gdGhpcy5hY3RpdmVfY29udGFpbmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ1tjb250YWluZXJdLm9uSWZyYW1lTG9hZGVkKSB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuY29uZmlnW2NvbnRhaW5lcl0ub25JZnJhbWVMb2FkZWQsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnW2NvbnRhaW5lcl0ub25JZnJhbWVMb2FkZWQgPSAnJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJZnJhbWVVcmwodXJsLCBjb250YWluZXIgPSB0aGlzLmFjdGl2ZV9jb250YWluZXIpIHtcbiAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgdGhpcy5jb25maWdbY29udGFpbmVyXS5pZnJhbWVfdXJsID0gYCR7dXJsfSZ0aGVtZT0ke3RoaXMucm9vdF9zdG9yZS51aS5pc19kYXJrX21vZGVfb24gPyAnZGFyaycgOiAnbGlnaHQnfWA7XG4gICAgICAgICAgICAvLyBhZnRlciB3ZSBzZXQgaWZyYW1lIHVybCB3ZSBjYW4gY2xlYXIgdmVyaWZpY2F0aW9uIGNvZGVcbiAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuc2V0VmVyaWZpY2F0aW9uQ29kZSgnJywgdGhpcy5tYXBfYWN0aW9uW2NvbnRhaW5lcl0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb25maWdbY29udGFpbmVyXS5pZnJhbWVfdXJsID0gdXJsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldENvbnRhaW5lckhlaWdodChoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS5pZnJhbWVfaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRFcnJvck1lc3NhZ2UoZXJyb3IsIG9uQ2xpY2tCdXR0b24sIGlzX3Nob3dfZnVsbF9wYWdlLCBpc192ZXJpZmljYXRpb25fZXJyb3IpIHtcbiAgICAgICAgLy8gZm9yIGVycm9ycyB0aGF0IG5lZWQgdG8gc2hvdyBhIGJ1dHRvbiwgcmVzZXQgdGhlIGZvcm1cbiAgICAgICAgY29uc3QgZXJyb3Jfb2JqZWN0ID0ge1xuICAgICAgICAgICAgb25DbGlja0J1dHRvbixcbiAgICAgICAgICAgIGNvZGU6IGVycm9yLmNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgaXNfc2hvd19mdWxsX3BhZ2U6IGlzX3Nob3dfZnVsbF9wYWdlIHx8IC9JbnZhbGlkVG9rZW58V3JvbmdSZXNwb25zZS8udGVzdChlcnJvci5jb2RlKSxcbiAgICAgICAgICAgIC4uLihnZXRQcm9wZXJ0eVZhbHVlKGVycm9yLCBbJ2RldGFpbHMnLCAnZmllbGRzJ10pICYmIHtcbiAgICAgICAgICAgICAgICBmaWVsZHM6IGVycm9yLmRldGFpbHMuZmllbGRzLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGlzX3ZlcmlmaWNhdGlvbl9lcnJvciAmJiB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLnZlcmlmaWNhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS52ZXJpZmljYXRpb24uZXJyb3IgPSBlcnJvcl9vYmplY3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmVycm9yID0gZXJyb3Jfb2JqZWN0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGhhbmRsZUNhc2hpZXJFcnJvcihlcnJvcikge1xuICAgICAgICBzd2l0Y2ggKGVycm9yLmNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0FTS19UTkNfQVBQUk9WQUwnOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKGVycm9yLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0FTS19GSVhfREVUQUlMUyc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoZXJyb3IsIG51bGwsIHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQVNLX1VLX0ZVTkRTX1BST1RFQ1RJT04nOlxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX2Fza191a19mdW5kc19wcm90ZWN0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBU0tfU0VMRl9FWENMVVNJT05fTUFYX1RVUk5PVkVSX1NFVCc6XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS5lcnJvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgaXNfc2VsZl9leGNsdXNpb25fbWF4X3R1cm5vdmVyX3NldDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQVNLX0FVVEhFTlRJQ0FURSc6XG4gICAgICAgICAgICBjYXNlICdBU0tfQUdFX1ZFUklGSUNBVElPTic6XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS5lcnJvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgaXNfYXNrX2F1dGhlbnRpY2F0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBU0tfRklOQU5DSUFMX1JJU0tfQVBQUk9WQUwnOlxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX2Fza19maW5hbmNpYWxfcmlza19hcHByb3ZhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICBpc19hc2tfdWtfZnVuZHNfcHJvdGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzX3NlbGZfZXhjbHVzaW9uX21heF90dXJub3Zlcl9zZXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpc19hc2tfYXV0aGVudGljYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpc19hc2tfZmluYW5jaWFsX3Jpc2tfYXBwcm92YWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldEVycm9yQ29uZmlnKGNvbmZpZ19uYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmVycm9yID0ge1xuICAgICAgICAgICAgW2NvbmZpZ19uYW1lXTogdmFsdWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHN1Ym1pdEZ1bmRzUHJvdGVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5XUy5zZW5kKHsgdWtnY19mdW5kc19wcm90ZWN0aW9uOiAxLCB0bmNfYXBwcm92YWw6IDEgfSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yQ29uZmlnKCdtZXNzYWdlJywgcmVzcG9uc2UuZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0TG9hZGluZyhpc19sb2FkaW5nKSB7XG4gICAgICAgIHRoaXMuaXNfbG9hZGluZyA9IGlzX2xvYWRpbmc7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFNlc3Npb25UaW1lb3V0KGlzX3Nlc3Npb25fdGltZV9vdXQsIGNvbnRhaW5lciA9IHRoaXMuYWN0aXZlX2NvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbmZpZ1tjb250YWluZXJdLmlzX3Nlc3Npb25fdGltZW91dCA9IGlzX3Nlc3Npb25fdGltZV9vdXQ7XG4gICAgICAgIGlmIChpc19zZXNzaW9uX3RpbWVfb3V0KSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZU9uSWZyYW1lTG9hZGVkKGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0VmVyaWZpY2F0aW9uQnV0dG9uQ2xpY2tlZChpc19idXR0b25fY2xpY2tlZCwgY29udGFpbmVyID0gdGhpcy5hY3RpdmVfY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29uZmlnW2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uLmlzX2J1dHRvbl9jbGlja2VkID0gaXNfYnV0dG9uX2NsaWNrZWQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFZlcmlmaWNhdGlvbkVtYWlsU2VudChpc19lbWFpbF9zZW50LCBjb250YWluZXIgPSB0aGlzLmFjdGl2ZV9jb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb25maWdbY29udGFpbmVyXS52ZXJpZmljYXRpb24uaXNfZW1haWxfc2VudCA9IGlzX2VtYWlsX3NlbnQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFZlcmlmaWNhdGlvblJlc2VuZENsaWNrZWQoaXNfcmVzZW5kX2NsaWNrZWQsIGNvbnRhaW5lciA9IHRoaXMuYWN0aXZlX2NvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbmZpZ1tjb250YWluZXJdLnZlcmlmaWNhdGlvbi5pc19yZXNlbmRfY2xpY2tlZCA9IGlzX3Jlc2VuZF9jbGlja2VkO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRWZXJpZmljYXRpb25SZXNlbmRUaW1lb3V0KHJlc2VuZF90aW1lb3V0LCBjb250YWluZXIgPSB0aGlzLmFjdGl2ZV9jb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb25maWdbY29udGFpbmVyXS52ZXJpZmljYXRpb24ucmVzZW5kX3RpbWVvdXQgPSByZXNlbmRfdGltZW91dDtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXRDYXNoaWVyVXJsKGNvbnRhaW5lciA9IHRoaXMuYWN0aXZlX2NvbnRhaW5lcikge1xuICAgICAgICBpZiAodGhpcy5jb25maWdbY29udGFpbmVyXS50aW1lb3V0X3Nlc3Npb24pIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNvbmZpZ1tjb250YWluZXJdLnRpbWVvdXRfc2Vzc2lvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjYXNoaWVyIHNlc3Npb24gZXhwaXJlcyBhZnRlciBvbmUgbWludXRlXG4gICAgLy8gc28gd2Ugc2hvdWxkIHJlc2VuZCB0aGUgcmVxdWVzdCBmb3IgY29udGFpbmVyIChkZXBvc2l0fHdpdGhkcmF3KSB1cmwgb24gbmV4dCBtb3VudFxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRUaW1lb3V0Q2FzaGllclVybCgpIHtcbiAgICAgICAgdGhpcy5jbGVhclRpbWVvdXRDYXNoaWVyVXJsKCk7XG4gICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0udGltZW91dF9zZXNzaW9uID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFNlc3Npb25UaW1lb3V0KHRydWUpO1xuICAgICAgICB9LCA2MDAwMCk7XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0VmVyaWZpY2F0aW9uKGNvbnRhaW5lciA9IHRoaXMuYWN0aXZlX2NvbnRhaW5lcikge1xuICAgICAgICBpZiAodGhpcy5jb25maWdbY29udGFpbmVyXS52ZXJpZmljYXRpb24udGltZW91dF9idXR0b24pIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNvbmZpZ1tjb250YWluZXJdLnZlcmlmaWNhdGlvbi50aW1lb3V0X2J1dHRvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB2ZXJpZmljYXRpb24gdG9rZW4gZXhwaXJlcyBhZnRlciBvbmUgaG91clxuICAgIC8vIHNvIHdlIHNob3VsZCBzaG93IHRoZSB2ZXJpZmljYXRpb24gcmVxdWVzdCBidXR0b24gYWdhaW4gYWZ0ZXIgdGhhdFxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRUaW1lb3V0VmVyaWZpY2F0aW9uKCkge1xuICAgICAgICB0aGlzLmNsZWFyVGltZW91dFZlcmlmaWNhdGlvbigpO1xuICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLnZlcmlmaWNhdGlvbi50aW1lb3V0X2J1dHRvbiA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbGVhclZlcmlmaWNhdGlvbigpO1xuICAgICAgICB9LCAzNjAwMDAwKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgc2VuZFZlcmlmaWNhdGlvbkVtYWlsKCkge1xuICAgICAgICBpZiAodGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS52ZXJpZmljYXRpb24uaXNfYnV0dG9uX2NsaWNrZWQgfHwgIXRoaXMucm9vdF9zdG9yZS5jbGllbnQuZW1haWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICAgICAgdGhpcy5zZXRWZXJpZmljYXRpb25CdXR0b25DbGlja2VkKHRydWUpO1xuICAgICAgICBjb25zdCB3aXRoZHJhd2FsX3R5cGUgPSBgcGF5bWVudCR7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZV9jb250YWluZXIgPT09IHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuY29udGFpbmVyID8gJ2FnZW50JyA6ICcnXG4gICAgICAgIH1fd2l0aGRyYXdgO1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlX3ZlcmlmeV9lbWFpbCA9IGF3YWl0IHRoaXMuV1MudmVyaWZ5RW1haWwodGhpcy5yb290X3N0b3JlLmNsaWVudC5lbWFpbCwgd2l0aGRyYXdhbF90eXBlKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlX3ZlcmlmeV9lbWFpbC5lcnJvcikge1xuICAgICAgICAgICAgdGhpcy5jbGVhclZlcmlmaWNhdGlvbigpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlX3ZlcmlmeV9lbWFpbC5lcnJvci5jb2RlID09PSAnUGF5bWVudEFnZW50V2l0aGRyYXdFcnJvcicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZShyZXNwb25zZV92ZXJpZnlfZW1haWwuZXJyb3IsIHRoaXMucmVzZXRQYXltZW50QWdlbnQsIG51bGwsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VfdmVyaWZ5X2VtYWlsLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJywgbnVsbCwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRWZXJpZmljYXRpb25FbWFpbFNlbnQodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnNldFRpbWVvdXRWZXJpZmljYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICByZXNlbmRWZXJpZmljYXRpb25FbWFpbCgpIHtcbiAgICAgICAgLy8gZG9uJ3QgYWxsb3cgY2xpY2tpbmcgd2hpbGUgb25nb2luZyB0aW1lb3V0XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLnZlcmlmaWNhdGlvbi5yZXNlbmRfdGltZW91dCA8IDYwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRWZXJpZmljYXRpb25CdXR0b25DbGlja2VkKGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRDb3VudERvd25SZXNlbmRWZXJpZmljYXRpb24oKTtcbiAgICAgICAgdGhpcy5zZW5kVmVyaWZpY2F0aW9uRW1haWwoKTtcbiAgICB9XG5cbiAgICBzZXRDb3VudERvd25SZXNlbmRWZXJpZmljYXRpb24oKSB7XG4gICAgICAgIHRoaXMuc2V0VmVyaWZpY2F0aW9uUmVzZW5kVGltZW91dCh0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLnZlcmlmaWNhdGlvbi5yZXNlbmRfdGltZW91dCAtIDEpO1xuICAgICAgICBjb25zdCByZXNlbmRfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0gfHwgIXRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChyZXNlbmRfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uLnJlc2VuZF90aW1lb3V0ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWZXJpZmljYXRpb25SZXNlbmRUaW1lb3V0KDYwKTtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHJlc2VuZF9pbnRlcnZhbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmVyaWZpY2F0aW9uUmVzZW5kVGltZW91dCh0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLnZlcmlmaWNhdGlvbi5yZXNlbmRfdGltZW91dCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG5cbiAgICBjbGVhclZlcmlmaWNhdGlvbihjb250YWluZXIgPSB0aGlzLmFjdGl2ZV9jb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jbGVhclRpbWVvdXRWZXJpZmljYXRpb24oY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5zZXRWZXJpZmljYXRpb25CdXR0b25DbGlja2VkKGZhbHNlLCBjb250YWluZXIpO1xuICAgICAgICB0aGlzLnNldFZlcmlmaWNhdGlvbkVtYWlsU2VudChmYWxzZSwgY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5zZXRWZXJpZmljYXRpb25SZXNlbmRDbGlja2VkKGZhbHNlLCBjb250YWluZXIpO1xuICAgICAgICB0aGlzLnNldFZlcmlmaWNhdGlvblJlc2VuZFRpbWVvdXQoNjAsIGNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnLCBudWxsLCBudWxsLCB0cnVlKTtcbiAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5zZXRWZXJpZmljYXRpb25Db2RlKCcnLCB0aGlzLm1hcF9hY3Rpb25bY29udGFpbmVyXSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzVGltZXJWaXNpYmxlKGlzX3RpbWVyX3Zpc2libGUpIHtcbiAgICAgICAgdGhpcy5pc190aW1lcl92aXNpYmxlID0gaXNfdGltZXJfdmlzaWJsZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgcmVzZXRUaW1lcigpIHtcbiAgICAgICAgdGhpcy5zZXRJc1RpbWVyVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIGdldEV4Y2hhbmdlUmF0ZShmcm9tX2N1cnJlbmN5LCB0b19jdXJyZW5jeSkge1xuICAgICAgICBjb25zdCB7IGV4Y2hhbmdlX3JhdGVzIH0gPSBhd2FpdCB0aGlzLldTLnNlbmQoe1xuICAgICAgICAgICAgZXhjaGFuZ2VfcmF0ZXM6IDEsXG4gICAgICAgICAgICBiYXNlX2N1cnJlbmN5OiBmcm9tX2N1cnJlbmN5LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGV4Y2hhbmdlX3JhdGVzLnJhdGVzW3RvX2N1cnJlbmN5XTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QWN0aXZlVGFiKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmFjdGl2ZV9jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIG9uTW91bnRQYXltZW50QWdlbnRMaXN0KCkge1xuICAgICAgICB0aGlzLnNldExvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHRoaXMub25SZW1vdW50ID0gdGhpcy5vbk1vdW50UGF5bWVudEFnZW50TGlzdDtcbiAgICAgICAgYXdhaXQgdGhpcy5vbk1vdW50Q29tbW9uKCk7XG5cbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgZ2V0UGF5bWVudEFnZW50TGlzdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQubGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLldTLndhaXQoJ3BheW1lbnRhZ2VudF9saXN0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3YWl0IGZvciBnZXRfc2V0dGluZ3Mgc28gcmVzaWRlbmNlIGdldHMgcG9wdWxhdGVkIGluIGNsaWVudC1zdG9yZVxuICAgICAgICAvLyBUT0RPOiBzZXQgcmVzaWRlbmNlIGluIGNsaWVudC1zdG9yZSBmcm9tIGF1dGhvcml6ZSBzbyBpdCdzIGZhc3RlclxuICAgICAgICBhd2FpdCB0aGlzLldTLndhaXQoJ2dldF9zZXR0aW5ncycpO1xuICAgICAgICByZXR1cm4gdGhpcy5XUy5hdXRob3JpemVkLnBheW1lbnRBZ2VudExpc3QodGhpcy5yb290X3N0b3JlLmNsaWVudC5yZXNpZGVuY2UsIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuY3VycmVuY3kpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFsbFBheW1lbnRBZ2VudExpc3QoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuV1Mud2FpdCgnZ2V0X3NldHRpbmdzJyk7XG4gICAgICAgIHJldHVybiB0aGlzLldTLmFsbFBheW1lbnRBZ2VudExpc3QodGhpcy5yb290X3N0b3JlLmNsaWVudC5yZXNpZGVuY2UpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRBbGxQYXltZW50QWdlbnRMaXN0KGxpc3QpIHtcbiAgICAgICAgdGhpcy5hbGxfcGF5bWVudF9hZ2VudF9saXN0ID0gbGlzdDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgZ2V0UGF5bWVudEFnZW50RGV0YWlscygpIHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50YWdlbnRfZGV0YWlscyB9ID0gYXdhaXQgdGhpcy5XUy5hdXRob3JpemVkLnBheW1lbnRBZ2VudERldGFpbHMoKTtcbiAgICAgICAgcmV0dXJuIHBheW1lbnRhZ2VudF9kZXRhaWxzO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhZGRTdXBwb3J0ZWRCYW5rKGJhbmspIHtcbiAgICAgICAgY29uc3Qgc3VwcG9ydGVkX2JhbmtfZXhpc3RzID0gdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfYmFua3MuZmluZChcbiAgICAgICAgICAgIHN1cHBvcnRlZF9iYW5rID0+IHN1cHBvcnRlZF9iYW5rLnZhbHVlID09PSBiYW5rLnRvTG93ZXJDYXNlKClcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCFzdXBwb3J0ZWRfYmFua19leGlzdHMpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuc3VwcG9ydGVkX2JhbmtzLnB1c2goeyB0ZXh0OiBiYW5rLCB2YWx1ZTogYmFuay50b0xvd2VyQ2FzZSgpIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNvcnRTdXBwb3J0ZWRCYW5rcygpIHtcbiAgICAgICAgLy8gc29ydCBzdXBwb3J0ZWQgYmFua3MgYWxwaGFiZXRpY2FsbHkgYnkgdmFsdWUsIHRoZSBvcHRpb24gJ0FsbCBwYXltZW50IGFnZW50cycgd2l0aCB2YWx1ZSAwIHNob3VsZCBiZSBvbiB0b3BcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfYmFua3MucmVwbGFjZShcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuc3VwcG9ydGVkX2JhbmtzLnNsaWNlKCkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhLnZhbHVlIDwgYi52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhLnZhbHVlID4gYi52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBzZXRQYXltZW50QWdlbnRMaXN0KHBhX2xpc3QpIHtcbiAgICAgICAgY29uc3QgcGF5bWVudF9hZ2VudF9saXN0ID0gcGFfbGlzdCB8fCAoYXdhaXQgdGhpcy5nZXRQYXltZW50QWdlbnRMaXN0KCkpO1xuICAgICAgICBpZiAoIXBheW1lbnRfYWdlbnRfbGlzdCB8fCAhcGF5bWVudF9hZ2VudF9saXN0LnBheW1lbnRhZ2VudF9saXN0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogT25jZSB0ZWxlcGhvbmUsIHVybCBhbmQgc3VwcG9ydGVkX2JhbmtzIHJlbW92ZWQgZnJvbSBwYXltZW50YWdlbnRfbGlzdC5saXN0IHdlIGNhbiByZW1vdmUgdGhlbSBhbmQganVzdCB1c2UgdGhlIHBsdXJhbCBvbmVzXG4gICAgICAgIHBheW1lbnRfYWdlbnRfbGlzdC5wYXltZW50YWdlbnRfbGlzdC5saXN0LmZvckVhY2gocGF5bWVudF9hZ2VudCA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50Lmxpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgZW1haWw6IHBheW1lbnRfYWdlbnQuZW1haWwsXG4gICAgICAgICAgICAgICAgcGhvbmVzOiBwYXltZW50X2FnZW50Py5waG9uZV9udW1iZXJzIHx8IHBheW1lbnRfYWdlbnQ/LnRlbGVwaG9uZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXltZW50X2FnZW50Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3VwcG9ydGVkX2JhbmtzOiBwYXltZW50X2FnZW50Py5zdXBwb3J0ZWRfcGF5bWVudF9tZXRob2RzIHx8IHBheW1lbnRfYWdlbnQ/LnN1cHBvcnRlZF9iYW5rcyxcbiAgICAgICAgICAgICAgICB1cmxzOiBwYXltZW50X2FnZW50Py51cmxzIHx8IHBheW1lbnRfYWdlbnQ/LnVybCxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAocGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfYmFua3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdXBwb3J0ZWRfYmFua3NfYXJyYXkgPSBwYXltZW50X2FnZW50Py5zdXBwb3J0ZWRfcGF5bWVudF9tZXRob2RzXG4gICAgICAgICAgICAgICAgICAgID8gcGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfcGF5bWVudF9tZXRob2RzLm1hcChiYW5rID0+IGJhbmsucGF5bWVudF9tZXRob2QpXG4gICAgICAgICAgICAgICAgICAgIDogcGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfYmFua3Muc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICBzdXBwb3J0ZWRfYmFua3NfYXJyYXkuZm9yRWFjaChiYW5rID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRTdXBwb3J0ZWRCYW5rKGJhbmspO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNvcnRTdXBwb3J0ZWRCYW5rcygpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBmaWx0ZXJQYXltZW50QWdlbnRMaXN0KGJhbmspIHtcbiAgICAgICAgaWYgKGJhbmspIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuZmlsdGVyZWRfbGlzdCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5saXN0LmZvckVhY2gocGF5bWVudF9hZ2VudCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50LnN1cHBvcnRlZF9iYW5rcyAmJlxuICAgICAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50LnN1cHBvcnRlZF9iYW5rcy50b0xvd2VyQ2FzZSgpLnNwbGl0KCcsJykuaW5kZXhPZihiYW5rKSAhPT0gLTFcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5maWx0ZXJlZF9saXN0LnB1c2gocGF5bWVudF9hZ2VudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmZpbHRlcmVkX2xpc3QgPSB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50Lmxpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzX3BheW1lbnRfYWdlbnRfdmlzaWJsZSAmJiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuZW5kc1dpdGgocm91dGVzLmNhc2hpZXJfcGEpKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY29tbW9uLnJvdXRlVG8ocm91dGVzLmNhc2hpZXJfZGVwb3NpdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25DaGFuZ2VQYXltZW50TWV0aG9kKHsgdGFyZ2V0IH0pIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0YXJnZXQudmFsdWUgPT09ICcwJyA/IHBhcnNlSW50KHRhcmdldC52YWx1ZSkgOiB0YXJnZXQudmFsdWU7XG4gICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuc2VsZWN0ZWRfYmFuayA9IHZhbHVlO1xuICAgICAgICB0aGlzLmZpbHRlclBheW1lbnRBZ2VudExpc3QodmFsdWUpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBvbk1vdW50UGF5bWVudEFnZW50V2l0aGRyYXcoKSB7XG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgdGhpcy5vblJlbW91bnQgPSB0aGlzLm9uTW91bnRQYXltZW50QWdlbnRXaXRoZHJhdztcbiAgICAgICAgYXdhaXQgdGhpcy5vbk1vdW50Q29tbW9uKCk7XG5cbiAgICAgICAgdGhpcy5zZXRJc1dpdGhkcmF3KHRydWUpO1xuICAgICAgICB0aGlzLnNldElzV2l0aGRyYXdTdWNjZXNzZnVsKGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRSZWNlaXB0KHt9KTtcblxuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuYWdlbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcGF5bWVudF9hZ2VudF9saXN0ID0gYXdhaXQgdGhpcy5nZXRQYXltZW50QWdlbnRMaXN0KCk7XG4gICAgICAgICAgICBwYXltZW50X2FnZW50X2xpc3QucGF5bWVudGFnZW50X2xpc3QubGlzdC5mb3JFYWNoKHBheW1lbnRfYWdlbnQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUGF5bWVudEFnZW50KHBheW1lbnRfYWdlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIXBheW1lbnRfYWdlbnRfbGlzdC5wYXltZW50YWdlbnRfbGlzdC5saXN0Lmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5lbmRzV2l0aChyb3V0ZXMuY2FzaGllcl9wYSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jb21tb24ucm91dGVUbyhyb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNXaXRoZHJhdyhpc193aXRoZHJhdyA9ICF0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmlzX3dpdGhkcmF3KSB7XG4gICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuaXNfd2l0aGRyYXcgPSBpc193aXRoZHJhdztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNUcnlXaXRoZHJhd1N1Y2Nlc3NmdWwoaXNfdHJ5X3dpdGhkcmF3X3N1Y2Nlc3NmdWwpIHtcbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycpO1xuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmlzX3RyeV93aXRoZHJhd19zdWNjZXNzZnVsID0gaXNfdHJ5X3dpdGhkcmF3X3N1Y2Nlc3NmdWw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzV2l0aGRyYXdTdWNjZXNzZnVsKGlzX3dpdGhkcmF3X3N1Y2Nlc3NmdWwpIHtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5pc193aXRoZHJhd19zdWNjZXNzZnVsID0gaXNfd2l0aGRyYXdfc3VjY2Vzc2Z1bDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0Q29uZmlybWF0aW9uKHsgYW1vdW50LCBjdXJyZW5jeSwgbG9naW5pZCwgcGF5bWVudF9hZ2VudF9uYW1lIH0pIHtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5jb25maXJtID0ge1xuICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgY3VycmVuY3ksXG4gICAgICAgICAgICBsb2dpbmlkLFxuICAgICAgICAgICAgcGF5bWVudF9hZ2VudF9uYW1lLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRSZWNlaXB0KHtcbiAgICAgICAgYW1vdW50X3RyYW5zZmVycmVkLFxuICAgICAgICBwYXltZW50X2FnZW50X2VtYWlsLFxuICAgICAgICBwYXltZW50X2FnZW50X2lkLFxuICAgICAgICBwYXltZW50X2FnZW50X25hbWUsXG4gICAgICAgIHBheW1lbnRfYWdlbnRfcGhvbmUsXG4gICAgICAgIHBheW1lbnRfYWdlbnRfdXJsLFxuICAgIH0pIHtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5yZWNlaXB0ID0ge1xuICAgICAgICAgICAgYW1vdW50X3RyYW5zZmVycmVkLFxuICAgICAgICAgICAgcGF5bWVudF9hZ2VudF9lbWFpbCxcbiAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfaWQsXG4gICAgICAgICAgICBwYXltZW50X2FnZW50X25hbWUsXG4gICAgICAgICAgICBwYXltZW50X2FnZW50X3Bob25lLFxuICAgICAgICAgICAgcGF5bWVudF9hZ2VudF91cmwsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFkZFBheW1lbnRBZ2VudChwYXltZW50X2FnZW50KSB7XG4gICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuYWdlbnRzLnB1c2goe1xuICAgICAgICAgICAgdGV4dDogcGF5bWVudF9hZ2VudC5uYW1lLFxuICAgICAgICAgICAgdmFsdWU6IHBheW1lbnRfYWdlbnQucGF5bWVudGFnZW50X2xvZ2luaWQsXG4gICAgICAgICAgICBtYXhfd2l0aGRyYXdhbDogcGF5bWVudF9hZ2VudC5tYXhfd2l0aGRyYXdhbCxcbiAgICAgICAgICAgIG1pbl93aXRoZHJhd2FsOiBwYXltZW50X2FnZW50Lm1pbl93aXRoZHJhd2FsLFxuICAgICAgICAgICAgZW1haWw6IHBheW1lbnRfYWdlbnQuZW1haWwsXG4gICAgICAgICAgICBwaG9uZTogcGF5bWVudF9hZ2VudC50ZWxlcGhvbmUsXG4gICAgICAgICAgICB1cmw6IHBheW1lbnRfYWdlbnQudXJsLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgcmVxdWVzdFRyeVBheW1lbnRBZ2VudFdpdGhkcmF3KHsgbG9naW5pZCwgY3VycmVuY3ksIGFtb3VudCwgdmVyaWZpY2F0aW9uX2NvZGUgfSkge1xuICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJyk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRfYWdlbnRfd2l0aGRyYXcgPSBhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQucGF5bWVudEFnZW50V2l0aGRyYXcoe1xuICAgICAgICAgICAgbG9naW5pZCxcbiAgICAgICAgICAgIGN1cnJlbmN5LFxuICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgdmVyaWZpY2F0aW9uX2NvZGUsXG4gICAgICAgICAgICBkcnlfcnVuOiAxLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCtwYXltZW50X2FnZW50X3dpdGhkcmF3LnBheW1lbnRhZ2VudF93aXRoZHJhdyA9PT0gMikge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRfYWdlbnQgPSB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmFnZW50cy5maW5kKGFnZW50ID0+IGFnZW50LnZhbHVlID09PSBsb2dpbmlkKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29uZmlybWF0aW9uKHtcbiAgICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgICAgY3VycmVuY3ksXG4gICAgICAgICAgICAgICAgbG9naW5pZCxcbiAgICAgICAgICAgICAgICAuLi4oc2VsZWN0ZWRfYWdlbnQgJiYgeyBwYXltZW50X2FnZW50X25hbWU6IHNlbGVjdGVkX2FnZW50LnRleHQgfSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0SXNUcnlXaXRoZHJhd1N1Y2Nlc3NmdWwodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZShwYXltZW50X2FnZW50X3dpdGhkcmF3LmVycm9yLCB0aGlzLnJlc2V0UGF5bWVudEFnZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyByZXF1ZXN0UGF5bWVudEFnZW50V2l0aGRyYXcoeyBsb2dpbmlkLCBjdXJyZW5jeSwgYW1vdW50LCB2ZXJpZmljYXRpb25fY29kZSB9KSB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICAgICAgY29uc3QgcGF5bWVudF9hZ2VudF93aXRoZHJhdyA9IGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC5wYXltZW50QWdlbnRXaXRoZHJhdyh7XG4gICAgICAgICAgICBsb2dpbmlkLFxuICAgICAgICAgICAgY3VycmVuY3ksXG4gICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICB2ZXJpZmljYXRpb25fY29kZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICgrcGF5bWVudF9hZ2VudF93aXRoZHJhdy5wYXltZW50YWdlbnRfd2l0aGRyYXcgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkX2FnZW50ID0gdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5hZ2VudHMuZmluZChhZ2VudCA9PiBhZ2VudC52YWx1ZSA9PT0gbG9naW5pZCk7XG4gICAgICAgICAgICB0aGlzLnNldFJlY2VpcHQoe1xuICAgICAgICAgICAgICAgIGFtb3VudF90cmFuc2ZlcnJlZDogZm9ybWF0TW9uZXkoY3VycmVuY3ksIGFtb3VudCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgLi4uKHNlbGVjdGVkX2FnZW50ICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudF9hZ2VudF9lbWFpbDogc2VsZWN0ZWRfYWdlbnQuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfaWQ6IHNlbGVjdGVkX2FnZW50LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X25hbWU6IHNlbGVjdGVkX2FnZW50LnRleHQsXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfcGhvbmU6IHNlbGVjdGVkX2FnZW50LnBob25lLFxuICAgICAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X3VybDogc2VsZWN0ZWRfYWdlbnQudXJsLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIC4uLighc2VsZWN0ZWRfYWdlbnQgJiYge1xuICAgICAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X2lkOiBsb2dpbmlkLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnNldElzV2l0aGRyYXdTdWNjZXNzZnVsKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5zZXRJc1RyeVdpdGhkcmF3U3VjY2Vzc2Z1bChmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnNldENvbmZpcm1hdGlvbih7fSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZShwYXltZW50X2FnZW50X3dpdGhkcmF3LmVycm9yLCB0aGlzLnJlc2V0UGF5bWVudEFnZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICByZXNldFBheW1lbnRBZ2VudCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycpO1xuICAgICAgICB0aGlzLnNldElzV2l0aGRyYXcoZmFsc2UpO1xuICAgICAgICB0aGlzLmNsZWFyVmVyaWZpY2F0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlVGFiSW5kZXgoMCk7XG4gICAgfTtcblxuICAgIC8vIHBvc3NpYmxlIHRyYW5zZmVyczpcbiAgICAvLyAxLiBmaWF0IHRvIGNyeXB0byAmIHZpY2UgdmVyc2FcbiAgICAvLyAyLiBmaWF0IHRvIG10ICYgdmljZSB2ZXJzYVxuICAgIC8vIDMuIGNyeXB0byB0byBtdCAmIHZpY2UgdmVyc2FcbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Nb3VudEFjY291bnRUcmFuc2ZlcigpIHtcbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICB0aGlzLm9uUmVtb3VudCA9IHRoaXMub25Nb3VudEFjY291bnRUcmFuc2ZlcjtcbiAgICAgICAgYXdhaXQgdGhpcy5vbk1vdW50Q29tbW9uKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuV1Mud2FpdCgnd2Vic2l0ZV9zdGF0dXMnKTtcblxuICAgICAgICAvLyBjaGVjayBpZiBzb21lIGJhbGFuY2UgdXBkYXRlIGhhcyBjb21lIGluIHNpbmNlIHRoZSBsYXN0IG1vdW50XG4gICAgICAgIGNvbnN0IGhhc191cGRhdGVkX2FjY291bnRfYmFsYW5jZSA9XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmhhc19ub19hY2NvdW50c19iYWxhbmNlICYmXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjdGl2ZV9hY2NvdW50cykuZmluZChcbiAgICAgICAgICAgICAgICBhY2NvdW50ID0+XG4gICAgICAgICAgICAgICAgICAgICF0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjdGl2ZV9hY2NvdW50c1thY2NvdW50XS5pc192aXJ0dWFsICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuYWN0aXZlX2FjY291bnRzW2FjY291bnRdLmJhbGFuY2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIGlmIChoYXNfdXBkYXRlZF9hY2NvdW50X2JhbGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SGFzTm9BY2NvdW50c0JhbGFuY2UoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFyaW91cyBpc3N1ZXMgaGFwcGVuIHdoZW4gbG9hZGluZyBmcm9tIGNhY2hlXG4gICAgICAgIC8vIGUuZy4gbmV3IGFjY291bnQgbWF5IGhhdmUgYmVlbiBjcmVhdGVkLCB0cmFuc2ZlciBtYXkgaGF2ZSBiZWVuIGRvbmUgZWxzZXdoZXJlLCBldGNcbiAgICAgICAgLy8gc28gb24gbG9hZCBvZiB0aGlzIHBhZ2UganVzdCBjYWxsIGl0IGFnYWluXG4gICAgICAgIGlmICh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2xvZ2dlZF9pbikge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cyA9IGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC50cmFuc2ZlckJldHdlZW5BY2NvdW50cygpO1xuXG4gICAgICAgICAgICBpZiAodHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cy5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuZXJyb3IsIHRoaXMub25Nb3VudEFjY291bnRUcmFuc2Zlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5jYW5Eb0FjY291bnRUcmFuc2Zlcih0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmFjY291bnRzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zb3J0QWNjb3VudHNUcmFuc2Zlcih0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzKTtcbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNmZXJGZWUoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0TWluaW11bUZlZSgpO1xuICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2ZlckxpbWl0KCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmFjY291bnRzX2xpc3Q/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZmRfdHJhbnNmZXJfdG9fbG9naW5faWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdjZmRfdHJhbnNmZXJfdG9fbG9naW5faWQnKTtcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKCdjZmRfdHJhbnNmZXJfdG9fbG9naW5faWQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmpfdmFsdWVzID0gdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5hY2NvdW50c19saXN0LmZpbmQoXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnQgPT4gYWNjb3VudC52YWx1ZSA9PT0gY2ZkX3RyYW5zZmVyX3RvX2xvZ2luX2lkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAob2JqX3ZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzVHJhbnNmZXJOb3RBbGxvd2VkTG9naW5pZChvYmpfdmFsdWVzLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgc2VsZWN0ZWQgdG8gaXMgbm90IGFsbG93ZWQgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqX3ZhbHVlcy5lcnJvciA9IGdldFNlbGVjdGVkRXJyb3Iob2JqX3ZhbHVlcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZFRvKG9ial92YWx1ZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgIH1cblxuICAgIGNhbkRvQWNjb3VudFRyYW5zZmVyKGFjY291bnRzKSB7XG4gICAgICAgIGxldCBjYW5fdHJhbnNmZXIgPSB0cnVlO1xuICAgICAgICAvLyBzaG91bGQgaGF2ZSBhdCBsZWFzdCBvbmUgYWNjb3VudCB3aXRoIGJhbGFuY2VcbiAgICAgICAgaWYgKCFhY2NvdW50cy5maW5kKGFjY291bnQgPT4gK2FjY291bnQuYmFsYW5jZSA+IDApKSB7XG4gICAgICAgICAgICBjYW5fdHJhbnNmZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2V0SGFzTm9BY2NvdW50c0JhbGFuY2UodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEhhc05vQWNjb3VudHNCYWxhbmNlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzaG91bGQgaGF2ZSBhdCBsZWFzdCB0d28gcmVhbC1tb25leSBhY2NvdW50c1xuICAgICAgICBpZiAoYWNjb3VudHMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIGNhbl90cmFuc2ZlciA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zZXRIYXNOb0FjY291bnQodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEhhc05vQWNjb3VudChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjYW5fdHJhbnNmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbl90cmFuc2ZlcjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SGFzTm9BY2NvdW50c0JhbGFuY2UoaGFzX25vX2FjY291bnRzX2JhbGFuY2UpIHtcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5oYXNfbm9fYWNjb3VudHNfYmFsYW5jZSA9IGhhc19ub19hY2NvdW50c19iYWxhbmNlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRIYXNOb0FjY291bnQoaGFzX25vX2FjY291bnQpIHtcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5oYXNfbm9fYWNjb3VudCA9IGhhc19ub19hY2NvdW50O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRUcmFuc2ZlckZlZSgpIHtcbiAgICAgICAgY29uc3QgdHJhbnNmZXJfZmVlID0gZ2V0UHJvcGVydHlWYWx1ZShnZXRDdXJyZW5jaWVzKCksIFtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS5jdXJyZW5jeSxcbiAgICAgICAgICAgICd0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzJyxcbiAgICAgICAgICAgICdmZWVzJyxcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uY3VycmVuY3ksXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnRyYW5zZmVyX2ZlZSA9IE51bWJlcih0cmFuc2Zlcl9mZWUgfHwgMCk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldE1pbmltdW1GZWUoKSB7XG4gICAgICAgIGNvbnN0IGRlY2ltYWxzID0gZ2V0RGVjaW1hbFBsYWNlcyh0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uY3VycmVuY3kpO1xuICAgICAgICAvLyB3ZSBuZWVkIC50b0ZpeGVkKCkgc28gdGhhdCBpdCBkb2Vzbid0IGRpc3BsYXkgaW4gc2NpZW50aWZpYyBub3RhdGlvbiwgZS5nLiAxZS04IGZvciBjdXJyZW5jaWVzIHdpdGggOCBkZWNpbWFsIHBsYWNlc1xuICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLm1pbmltdW1fZmVlID0gKDEgLyBNYXRoLnBvdygxMCwgZGVjaW1hbHMpKS50b0ZpeGVkKGRlY2ltYWxzKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0VHJhbnNmZXJMaW1pdCgpIHtcbiAgICAgICAgY29uc3QgaXNfbXRfdHJhbnNmZXIgPVxuICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLmlzX210IHx8IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uaXNfbXQ7XG4gICAgICAgIGNvbnN0IGlzX2R4dHJhZGVfdHJhbnNmZXIgPVxuICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLmlzX2R4dHJhZGUgfHxcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uaXNfZHh0cmFkZTtcblxuICAgICAgICBsZXQgbGltaXRzX2tleTtcbiAgICAgICAgaWYgKGlzX210X3RyYW5zZmVyKSB7XG4gICAgICAgICAgICBsaW1pdHNfa2V5ID0gJ2xpbWl0c19tdDUnO1xuICAgICAgICB9IGVsc2UgaWYgKGlzX2R4dHJhZGVfdHJhbnNmZXIpIHtcbiAgICAgICAgICAgIGxpbWl0c19rZXkgPSAnbGltaXRzX2R4dHJhZGUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGltaXRzX2tleSA9ICdsaW1pdHMnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhbnNmZXJfbGltaXQgPSBnZXRQcm9wZXJ0eVZhbHVlKGdldEN1cnJlbmNpZXMoKSwgW1xuICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLmN1cnJlbmN5LFxuICAgICAgICAgICAgJ3RyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMnLFxuICAgICAgICAgICAgbGltaXRzX2tleSxcbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IGJhbGFuY2UgPSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uYmFsYW5jZTtcbiAgICAgICAgY29uc3QgZGVjaW1hbF9wbGFjZXMgPSBnZXREZWNpbWFsUGxhY2VzKHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS5jdXJyZW5jeSk7XG4gICAgICAgIC8vIHdlIG5lZWQgLnRvRml4ZWQoKSBzbyB0aGF0IGl0IGRvZXNuJ3QgZGlzcGxheSBpbiBzY2llbnRpZmljIG5vdGF0aW9uLCBlLmcuIDFlLTggZm9yIGN1cnJlbmNpZXMgd2l0aCA4IGRlY2ltYWwgcGxhY2VzXG4gICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIudHJhbnNmZXJfbGltaXQgPSB7XG4gICAgICAgICAgICBtYXg6XG4gICAgICAgICAgICAgICAgIXRyYW5zZmVyX2xpbWl0Py5tYXggfHwgKCtiYWxhbmNlID49ICh0cmFuc2Zlcl9saW1pdD8ubWluIHx8IDApICYmICtiYWxhbmNlIDw9IHRyYW5zZmVyX2xpbWl0Py5tYXgpXG4gICAgICAgICAgICAgICAgICAgID8gYmFsYW5jZVxuICAgICAgICAgICAgICAgICAgICA6IHRyYW5zZmVyX2xpbWl0Py5tYXgudG9GaXhlZChkZWNpbWFsX3BsYWNlcyksXG4gICAgICAgICAgICBtaW46IHRyYW5zZmVyX2xpbWl0Py5taW4gPyAoK3RyYW5zZmVyX2xpbWl0Py5taW4pLnRvRml4ZWQoZGVjaW1hbF9wbGFjZXMpIDogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgc29ydEFjY291bnRzVHJhbnNmZXIocmVzcG9uc2VfYWNjb3VudHMpIHtcbiAgICAgICAgY29uc3QgdHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cyA9IHJlc3BvbnNlX2FjY291bnRzIHx8IChhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQudHJhbnNmZXJCZXR3ZWVuQWNjb3VudHMoKSk7XG4gICAgICAgIGlmICghdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5hY2NvdW50c19saXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtdDVfbG9naW5fbGlzdCA9IChhd2FpdCB0aGlzLldTLnN0b3JhZ2UubXQ1TG9naW5MaXN0KCkpPy5tdDVfbG9naW5fbGlzdDtcbiAgICAgICAgLy8gVE9ETzogbW92ZSBgdHJhZGluZ1BsYXRmb3JtQWNjb3VudHNMaXN0YCB0byBkZXJpdi1hcGkgdG8gdXNlIHN0b3JhZ2VcbiAgICAgICAgY29uc3QgZHh0cmFkZV9hY2NvdW50c19saXN0ID0gKGF3YWl0IHRoaXMuV1MudHJhZGluZ1BsYXRmb3JtQWNjb3VudHNMaXN0KENGRF9QTEFURk9STVMuRFhUUkFERSkpXG4gICAgICAgICAgICA/LnRyYWRpbmdfcGxhdGZvcm1fYWNjb3VudHM7XG5cbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgdGVtcG9yYXJ5IG1hcHBpbmcgd2hlbiBBUEkgYWRkcyBtYXJrZXRfdHlwZSBhbmQgc3ViX2FjY291bnRfdHlwZSB0byB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzXG4gICAgICAgIGNvbnN0IGFjY291bnRzID0gdHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cy5hY2NvdW50cy5tYXAoYWNjb3VudCA9PiB7XG4gICAgICAgICAgICBpZiAoYWNjb3VudC5hY2NvdW50X3R5cGUgPT09IENGRF9QTEFURk9STVMuTVQ1ICYmIEFycmF5LmlzQXJyYXkobXQ1X2xvZ2luX2xpc3QpICYmIG10NV9sb2dpbl9saXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vIGFjY291bnRfdHlwZSBpbiB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzIChtdDV8YmluYXJ5KVxuICAgICAgICAgICAgICAgIC8vIGdldHMgb3ZlcnJpZGRlbiBieSBhY2NvdW50X3R5cGUgaW4gbXQ1X2xvZ2luX2xpc3QgKGRlbW98cmVhbClcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSBpbiBjYXNoaWVyIGFsbCB0aGVzZSBhcmUgcmVhbCBhY2NvdW50cywgdGhlIG10NSBhY2NvdW50IHR5cGUgaXMgd2hhdCB3ZSB3YW50IHRvIGtlZXBcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZF9hY2NvdW50ID0gbXQ1X2xvZ2luX2xpc3QuZmluZChhY2MgPT4gYWNjLmxvZ2luID09PSBhY2NvdW50LmxvZ2luaWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kX2FjY291bnQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGFjY291bnQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5hY2NvdW50LCAuLi5mb3VuZF9hY2NvdW50LCBhY2NvdW50X3R5cGU6IENGRF9QTEFURk9STVMuTVQ1IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgYWNjb3VudC5hY2NvdW50X3R5cGUgPT09IENGRF9QTEFURk9STVMuRFhUUkFERSAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZHh0cmFkZV9hY2NvdW50c19saXN0KSAmJlxuICAgICAgICAgICAgICAgIGR4dHJhZGVfYWNjb3VudHNfbGlzdC5sZW5ndGhcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIGFjY291bnRfdHlwZSBpbiB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzIChtdDV8YmluYXJ5KVxuICAgICAgICAgICAgICAgIC8vIGdldHMgb3ZlcnJpZGRlbiBieSBhY2NvdW50X3R5cGUgaW4gZHh0cmFkZV9hY2NvdW50c19saXN0IChkZW1vfHJlYWwpXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgaW4gY2FzaGllciBhbGwgdGhlc2UgYXJlIHJlYWwgYWNjb3VudHMsIHRoZSBtdDUgYWNjb3VudCB0eXBlIGlzIHdoYXQgd2Ugd2FudCB0byBrZWVwXG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmRfYWNjb3VudCA9IGR4dHJhZGVfYWNjb3VudHNfbGlzdC5maW5kKGFjYyA9PiBhY2MuYWNjb3VudF9pZCA9PT0gYWNjb3VudC5sb2dpbmlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmb3VuZF9hY2NvdW50ID09PSB1bmRlZmluZWQpIHJldHVybiBhY2NvdW50O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uYWNjb3VudCwgLi4uZm91bmRfYWNjb3VudCwgYWNjb3VudF90eXBlOiBDRkRfUExBVEZPUk1TLkRYVFJBREUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2NvdW50O1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gc29ydCBhY2NvdW50cyBhcyBmb2xsb3dzOlxuICAgICAgICAvLyBmb3IgTVQ1LCBzeW50aGV0aWMsIGZpbmFuY2lhbCwgZmluYW5jaWFsIHN0cFxuICAgICAgICAvLyBmb3Igbm9uLU1UNSwgZmlhdCwgY3J5cHRvIChhbHBoYWJldGljYWxseSBieSBjdXJyZW5jeSlcbiAgICAgICAgLy8gc2hvdWxkIGhhdmUgbW9yZSB0aGFuIG9uZSBhY2NvdW50XG4gICAgICAgIGlmICh0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmFjY291bnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGFjY291bnRzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhX2lzX210ID0gYS5hY2NvdW50X3R5cGUgPT09IENGRF9QTEFURk9STVMuTVQ1O1xuICAgICAgICAgICAgICAgIGNvbnN0IGJfaXNfbXQgPSBiLmFjY291bnRfdHlwZSA9PT0gQ0ZEX1BMQVRGT1JNUy5NVDU7XG4gICAgICAgICAgICAgICAgY29uc3QgYV9pc19jcnlwdG8gPSAhYV9pc19tdCAmJiBpc0NyeXB0b2N1cnJlbmN5KGEuY3VycmVuY3kpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJfaXNfY3J5cHRvID0gIWJfaXNfbXQgJiYgaXNDcnlwdG9jdXJyZW5jeShiLmN1cnJlbmN5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBhX2lzX2ZpYXQgPSAhYV9pc19tdCAmJiAhYV9pc19jcnlwdG87XG4gICAgICAgICAgICAgICAgY29uc3QgYl9pc19maWF0ID0gIWJfaXNfbXQgJiYgIWJfaXNfY3J5cHRvO1xuICAgICAgICAgICAgICAgIGlmIChhX2lzX210ICYmIGJfaXNfbXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEubWFya2V0X3R5cGUgPT09ICdnYW1pbmcnIHx8IGEubWFya2V0X3R5cGUgPT09ICdzeW50aGV0aWMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGEuc3ViX2FjY291bnRfdHlwZSA9PT0gJ2ZpbmFuY2lhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiLm1hcmtldF90eXBlID09PSAnZ2FtaW5nJyB8fCBiLm1hcmtldF90eXBlID09PSAnc3ludGhldGljJyA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChhX2lzX2NyeXB0byAmJiBiX2lzX2NyeXB0bykgfHwgKGFfaXNfZmlhdCAmJiBiX2lzX2ZpYXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmN1cnJlbmN5IDwgYi5jdXJyZW5jeSA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChhX2lzX2NyeXB0byAmJiBiX2lzX210KSB8fCAoYV9pc19maWF0ICYmIGJfaXNfY3J5cHRvKSB8fCAoYV9pc19maWF0ICYmIGJfaXNfbXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFfaXNfbXQgPyAtMSA6IDE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcnJfYWNjb3VudHMgPSBbXTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZFRvKHt9KTsgLy8gc2V0IHNlbGVjdGVkIHRvIGVtcHR5IGVhY2ggdGltZSBzbyB3ZSBjYW4gcmVkZXRlcm1pbmUgaXRzIHZhbHVlIG9uIHJlbG9hZFxuXG4gICAgICAgIGFjY291bnRzLmZvckVhY2goYWNjb3VudCA9PiB7XG4gICAgICAgICAgICBjb25zdCBjZmRfcGxhdGZvcm1zID0ge1xuICAgICAgICAgICAgICAgIG10NTogeyBuYW1lOiAnRE1UNScsIGljb246ICdJY010NScgfSxcbiAgICAgICAgICAgICAgICBkeHRyYWRlOiB7IG5hbWU6ICdEZXJpdiBYJywgaWNvbjogJ0ljRHh0cmFkZScgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBpc19jZmQgPSBPYmplY3Qua2V5cyhjZmRfcGxhdGZvcm1zKS5pbmNsdWRlcyhhY2NvdW50LmFjY291bnRfdHlwZSk7XG4gICAgICAgICAgICBjb25zdCBjZmRfdGV4dF9kaXNwbGF5ID0gY2ZkX3BsYXRmb3Jtc1thY2NvdW50LmFjY291bnRfdHlwZV0/Lm5hbWU7XG4gICAgICAgICAgICBjb25zdCBjZmRfaWNvbl9kaXNwbGF5ID0gYCR7Y2ZkX3BsYXRmb3Jtc1thY2NvdW50LmFjY291bnRfdHlwZV0/Lmljb259LSR7Z2V0Q0ZEQWNjb3VudCh7XG4gICAgICAgICAgICAgICAgbWFya2V0X3R5cGU6IGFjY291bnQubWFya2V0X3R5cGUsXG4gICAgICAgICAgICAgICAgc3ViX2FjY291bnRfdHlwZTogYWNjb3VudC5zdWJfYWNjb3VudF90eXBlLFxuICAgICAgICAgICAgICAgIHBsYXRmb3JtOiBhY2NvdW50LmFjY291bnRfdHlwZSxcbiAgICAgICAgICAgICAgICBpc19ldTogdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19ldSxcbiAgICAgICAgICAgIH0pfWA7XG4gICAgICAgICAgICBjb25zdCBhY2NvdW50X3RleHRfZGlzcGxheSA9IGlzX2NmZFxuICAgICAgICAgICAgICAgID8gYCR7Y2ZkX3RleHRfZGlzcGxheX0gJHtnZXRDRkRBY2NvdW50RGlzcGxheSh7XG4gICAgICAgICAgICAgICAgICAgICAgbWFya2V0X3R5cGU6IGFjY291bnQubWFya2V0X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgc3ViX2FjY291bnRfdHlwZTogYWNjb3VudC5zdWJfYWNjb3VudF90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtOiBhY2NvdW50LmFjY291bnRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICBpc19ldTogdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19ldSxcbiAgICAgICAgICAgICAgICAgIH0pfWBcbiAgICAgICAgICAgICAgICA6IGdldEN1cnJlbmN5RGlzcGxheUNvZGUoXG4gICAgICAgICAgICAgICAgICAgICAgYWNjb3VudC5jdXJyZW5jeSAhPT0gJ2VVU0RUJyA/IGFjY291bnQuY3VycmVuY3kudG9VcHBlckNhc2UoKSA6IGFjY291bnQuY3VycmVuY3lcbiAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IG9ial92YWx1ZXMgPSB7XG4gICAgICAgICAgICAgICAgdGV4dDogYWNjb3VudF90ZXh0X2Rpc3BsYXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IGFjY291bnQubG9naW5pZCxcbiAgICAgICAgICAgICAgICBiYWxhbmNlOiBhY2NvdW50LmJhbGFuY2UsXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGFjY291bnQuY3VycmVuY3ksXG4gICAgICAgICAgICAgICAgaXNfY3J5cHRvOiBpc0NyeXB0b2N1cnJlbmN5KGFjY291bnQuY3VycmVuY3kpLFxuICAgICAgICAgICAgICAgIGlzX210OiBhY2NvdW50LmFjY291bnRfdHlwZSA9PT0gQ0ZEX1BMQVRGT1JNUy5NVDUsXG4gICAgICAgICAgICAgICAgaXNfZHh0cmFkZTogYWNjb3VudC5hY2NvdW50X3R5cGUgPT09IENGRF9QTEFURk9STVMuRFhUUkFERSxcbiAgICAgICAgICAgICAgICAuLi4oaXNfY2ZkICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm1faWNvbjogY2ZkX2ljb25fZGlzcGxheSxcbiAgICAgICAgICAgICAgICAgICAgbWFya2V0X3R5cGU6IGdldENGREFjY291bnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2V0X3R5cGU6IGFjY291bnQubWFya2V0X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJfYWNjb3VudF90eXBlOiBhY2NvdW50LnN1Yl9hY2NvdW50X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybTogYWNjb3VudC5hY2NvdW50X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc19ldTogdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19ldSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgbG9nZ2VkIGluIGNsaWVudCBhcyB0aGUgZGVmYXVsdCB0cmFuc2ZlciBmcm9tIGFjY291bnRcbiAgICAgICAgICAgIGlmIChhY2NvdW50LmxvZ2luaWQgPT09IHRoaXMucm9vdF9zdG9yZS5jbGllbnQubG9naW5pZCkge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHNlbGVjdGVkIGZyb20gaXMgbm90IGFsbG93ZWQgYWNjb3VudFxuICAgICAgICAgICAgICAgIGlmIChoYXNUcmFuc2Zlck5vdEFsbG93ZWRMb2dpbmlkKG9ial92YWx1ZXMudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ial92YWx1ZXMuZXJyb3IgPSBnZXRTZWxlY3RlZEVycm9yKG9ial92YWx1ZXMudmFsdWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRGcm9tKG9ial92YWx1ZXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0VtcHR5T2JqZWN0KHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8pKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc1RyYW5zZmVyTm90QWxsb3dlZExvZ2luaWQob2JqX3ZhbHVlcy52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgc2VsZWN0ZWQgdG8gaXMgbm90IGFsbG93ZWQgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICBvYmpfdmFsdWVzLmVycm9yID0gZ2V0U2VsZWN0ZWRFcnJvcihvYmpfdmFsdWVzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBmaXJzdCBhdmFpbGFibGUgYWNjb3VudCBhcyB0aGUgZGVmYXVsdCB0cmFuc2ZlciB0byBhY2NvdW50XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZFRvKG9ial92YWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyX2FjY291bnRzLnB1c2gob2JqX3ZhbHVlcyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldEFjY291bnRzKGFycl9hY2NvdW50cyk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFNlbGVjdGVkRnJvbShvYmpfdmFsdWVzKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbSA9IG9ial92YWx1ZXM7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFNlbGVjdGVkVG8ob2JqX3ZhbHVlcykge1xuICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvID0gb2JqX3ZhbHVlcztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QWNjb3VudHMoYXJyX2FjY291bnRzKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuYWNjb3VudHNfbGlzdCA9IGFycl9hY2NvdW50cztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNUcnlUcmFuc2ZlclN1Y2Nlc3NmdWwoaXNfdHJ5X3RyYW5zZmVyX3N1Y2Nlc3NmdWwpIHtcbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycpO1xuICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmlzX3RyeV90cmFuc2Zlcl9zdWNjZXNzZnVsID0gaXNfdHJ5X3RyYW5zZmVyX3N1Y2Nlc3NmdWw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzVHJhbnNmZXJDb25maXJtKGlzX3RyYW5zZmVyX2NvbmZpcm0pIHtcbiAgICAgICAgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS5pc190cmFuc2Zlcl9jb25maXJtID0gaXNfdHJhbnNmZXJfY29uZmlybTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QWNjb3VudFRyYW5zZmVyQW1vdW50KGFtb3VudCkge1xuICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmFjY291bnRfdHJhbnNmZXJfYW1vdW50ID0gYW1vdW50O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc1RyYW5zZmVyU3VjY2Vzc2Z1bChpc190cmFuc2Zlcl9zdWNjZXNzZnVsKSB7XG4gICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uaXNfdHJhbnNmZXJfc3VjY2Vzc2Z1bCA9IGlzX3RyYW5zZmVyX3N1Y2Nlc3NmdWw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzTVQ1VHJhbnNmZXJJblByb2dyZXNzKGlzX210NV90cmFuc2Zlcl9pbl9wcm9ncmVzcykge1xuICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmlzX210NV90cmFuc2Zlcl9pbl9wcm9ncmVzcyA9IGlzX210NV90cmFuc2Zlcl9pbl9wcm9ncmVzcztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgaXNNVDVUcmFuc2ZlckluUHJvZ3Jlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdPy5pc19tdDVfdHJhbnNmZXJfaW5fcHJvZ3Jlc3M7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFJlY2VpcHRUcmFuc2Zlcih7IGFtb3VudCB9KSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIucmVjZWlwdCA9IHtcbiAgICAgICAgICAgIGFtb3VudF90cmFuc2ZlcnJlZDogYW1vdW50LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBvbkNoYW5nZVRyYW5zZmVyRnJvbSh7IHRhcmdldCB9KSB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLmVycm9yID0gJyc7XG5cbiAgICAgICAgY29uc3QgYWNjb3VudHMgPSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmFjY291bnRzX2xpc3Q7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkX2Zyb20gPSBhY2NvdW50cy5maW5kKGFjY291bnQgPT4gYWNjb3VudC52YWx1ZSA9PT0gdGFyZ2V0LnZhbHVlKTtcblxuICAgICAgICAvLyBpZiBuZXcgdmFsdWUgb2Ygc2VsZWN0ZWRfZnJvbSBpcyB0aGUgc2FtZSBhcyB0aGUgY3VycmVudCBzZWxlY3RlZF90b1xuICAgICAgICAvLyBzd2l0Y2ggdGhlIHZhbHVlIG9mIHNlbGVjdGVkX2Zyb20gYW5kIHNlbGVjdGVkX3RvXG4gICAgICAgIGlmIChzZWxlY3RlZF9mcm9tLnZhbHVlID09PSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlVHJhbnNmZXJUbyh7IHRhcmdldDogeyB2YWx1ZTogdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLnZhbHVlIH0gfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAoc2VsZWN0ZWRfZnJvbS5pc19tdCAmJiB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLmlzX210KSB8fFxuICAgICAgICAgICAgKHNlbGVjdGVkX2Zyb20uaXNfZHh0cmFkZSAmJiB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLmlzX2R4dHJhZGUpIHx8XG4gICAgICAgICAgICAoc2VsZWN0ZWRfZnJvbS5pc19keHRyYWRlICYmIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uaXNfbXQpIHx8XG4gICAgICAgICAgICAoc2VsZWN0ZWRfZnJvbS5pc19tdCAmJiB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLmlzX2R4dHJhZGUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgLy8gbm90IGFsbG93ZWQgdG8gdHJhbnNmZXIgZnJvbSBNVCB0byBNVFxuICAgICAgICAgICAgLy8gbm90IGFsbG93ZWQgdG8gdHJhbnNmZXIgZnJvbSBEeHRyYWRlIHRvIER4dHJhZGVcbiAgICAgICAgICAgIC8vIG5vdCBhbGxvd2VkIHRvIHRyYW5zZmVyIGJldHdlZW4gTVQgYW5kIER4dHJhZGVcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0X25vbl9jZmQgPSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmFjY291bnRzX2xpc3QuZmluZChcbiAgICAgICAgICAgICAgICBhY2NvdW50ID0+ICFhY2NvdW50LmlzX210ICYmICFhY2NvdW50LmlzX2R4dHJhZGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlVHJhbnNmZXJUbyh7IHRhcmdldDogeyB2YWx1ZTogZmlyc3Rfbm9uX2NmZC52YWx1ZSB9IH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkX2Zyb20uaXNfY3J5cHRvICYmIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uaXNfY3J5cHRvKSB7XG4gICAgICAgICAgICAvLyBub3QgYWxsb3dlZCB0byB0cmFuc2ZlciBjcnlwdG8gdG8gY3J5cHRvXG4gICAgICAgICAgICBjb25zdCBmaXJzdF9maWF0ID0gdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5hY2NvdW50c19saXN0LmZpbmQoYWNjb3VudCA9PiAhYWNjb3VudC5pc19jcnlwdG8pO1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZVRyYW5zZmVyVG8oeyB0YXJnZXQ6IHsgdmFsdWU6IGZpcnN0X2ZpYXQudmFsdWUgfSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNUcmFuc2Zlck5vdEFsbG93ZWRMb2dpbmlkKHNlbGVjdGVkX2Zyb20udmFsdWUpKSB7XG4gICAgICAgICAgICBzZWxlY3RlZF9mcm9tLmVycm9yID0gZ2V0U2VsZWN0ZWRFcnJvcihzZWxlY3RlZF9mcm9tLnZhbHVlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbSA9IHNlbGVjdGVkX2Zyb207XG4gICAgICAgIHRoaXMuc2V0VHJhbnNmZXJGZWUoKTtcbiAgICAgICAgdGhpcy5zZXRNaW5pbXVtRmVlKCk7XG4gICAgICAgIHRoaXMuc2V0VHJhbnNmZXJMaW1pdCgpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBvbkNoYW5nZVRyYW5zZmVyVG8oeyB0YXJnZXQgfSkge1xuICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJyk7XG4gICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uZXJyb3IgPSAnJztcblxuICAgICAgICBjb25zdCBhY2NvdW50cyA9IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuYWNjb3VudHNfbGlzdDtcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90byA9IGFjY291bnRzLmZpbmQoYWNjb3VudCA9PiBhY2NvdW50LnZhbHVlID09PSB0YXJnZXQudmFsdWUpIHx8IHt9O1xuICAgICAgICBpZiAoaGFzVHJhbnNmZXJOb3RBbGxvd2VkTG9naW5pZCh0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5lcnJvciA9IGdldFNlbGVjdGVkRXJyb3IoXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by52YWx1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFRyYW5zZmVyRmVlKCk7XG4gICAgICAgIHRoaXMuc2V0TWluaW11bUZlZSgpO1xuICAgICAgICB0aGlzLnNldFRyYW5zZmVyTGltaXQoKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0VHJhbnNmZXJCZXR3ZWVuQWNjb3VudHMgPSBhc3luYyAoeyBhbW91bnQgfSkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfbG9nZ2VkX2luKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycpO1xuXG4gICAgICAgIGNvbnN0IGlzX210X3RyYW5zZmVyID1cbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS5pc19tdCB8fCB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLmlzX210O1xuXG4gICAgICAgIGlmIChpc19tdF90cmFuc2ZlcikgdGhpcy5zZXRJc01UNVRyYW5zZmVySW5Qcm9ncmVzcyh0cnVlKTtcblxuICAgICAgICBjb25zdCBjdXJyZW5jeSA9IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS5jdXJyZW5jeTtcbiAgICAgICAgY29uc3QgdHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cyA9IGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC50cmFuc2ZlckJldHdlZW5BY2NvdW50cyhcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS52YWx1ZSxcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8udmFsdWUsXG4gICAgICAgICAgICBjdXJyZW5jeSxcbiAgICAgICAgICAgIGFtb3VudFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChpc19tdF90cmFuc2ZlcikgdGhpcy5zZXRJc01UNVRyYW5zZmVySW5Qcm9ncmVzcyhmYWxzZSk7XG5cbiAgICAgICAgaWYgKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGZpYXQyY3J5cHRvIHRyYW5zZmVyIGxpbWl0IGVycm9yLCB3ZSBuZWVkIHRvIHJlZnJlc2ggdGhlIGFjY291bnRfc3RhdHVzIGZvciBhdXRoZW50aWNhdGlvblxuICAgICAgICAgICAgaWYgKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuZXJyb3IuY29kZSA9PT0gJ0ZpYXQyQ3J5cHRvVHJhbnNmZXJPdmVyTGltaXQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudF9zdGF0dXNfcmVzcG9uc2UgPSBhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQuZ2V0QWNjb3VudFN0YXR1cygpO1xuICAgICAgICAgICAgICAgIGlmICghYWNjb3VudF9zdGF0dXNfcmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5zZXRBY2NvdW50U3RhdHVzKGFjY291bnRfc3RhdHVzX3Jlc3BvbnNlLmdldF9hY2NvdW50X3N0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UodHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cy5lcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFJlY2VpcHRUcmFuc2Zlcih7IGFtb3VudDogZm9ybWF0TW9uZXkoY3VycmVuY3ksIGFtb3VudCwgdHJ1ZSkgfSk7XG4gICAgICAgICAgICB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmFjY291bnRzLmZvckVhY2goYWNjb3VudCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZXRCYWxhbmNlQnlMb2dpbklkKGFjY291bnQubG9naW5pZCwgYWNjb3VudC5iYWxhbmNlKTtcbiAgICAgICAgICAgICAgICBpZiAoYWNjb3VudC5sb2dpbmlkID09PSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20udmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZXRCYWxhbmNlU2VsZWN0ZWRGcm9tKGFjY291bnQuYmFsYW5jZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY2NvdW50LmxvZ2luaWQgPT09IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8udmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZXRCYWxhbmNlU2VsZWN0ZWRUbyhhY2NvdW50LmJhbGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiBvbmUgb2YgdGhlIGFjY291bnRzIHdhcyBtdDVcbiAgICAgICAgICAgICAgICBpZiAoYWNjb3VudC5hY2NvdW50X3R5cGUgPT09IENGRF9QTEFURk9STVMuTVQ1KSB7XG4gICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFt0aGlzLldTLm10NUxvZ2luTGlzdCgpLCB0aGlzLldTLmJhbGFuY2VBbGwoKV0pLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAoW210NV9sb2dpbl9saXN0X3Jlc3BvbnNlLCBiYWxhbmNlX3Jlc3BvbnNlXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgYmFsYW5jZSBmb3IgYWNjb3VudCBzd2l0Y2hlciBieSByZW5ld2luZyB0aGUgbXQ1X2xvZ2luX2xpc3QgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnJlc3BvbnNlTXQ1TG9naW5MaXN0KG10NV9sb2dpbl9saXN0X3Jlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdG90YWwgYmFsYW5jZSBzaW5jZSBNVDUgdG90YWwgb25seSBjb21lcyBpbiBub24tc3RyZWFtIGJhbGFuY2UgY2FsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuc2V0QmFsYW5jZU90aGVyQWNjb3VudHMoYmFsYW5jZV9yZXNwb25zZS5iYWxhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBhY2NvdW50cyB3YXMgZHh0cmFkZVxuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50LmFjY291bnRfdHlwZSA9PT0gQ0ZEX1BMQVRGT1JNUy5EWFRSQURFKSB7XG4gICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuV1MudHJhZGluZ1BsYXRmb3JtQWNjb3VudHNMaXN0KENGRF9QTEFURk9STVMuRFhUUkFERSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLldTLmJhbGFuY2VBbGwoKSxcbiAgICAgICAgICAgICAgICAgICAgXSkudGhlbigoW2R4dHJhZGVfbG9naW5fbGlzdF9yZXNwb25zZSwgYmFsYW5jZV9yZXNwb25zZV0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgYmFsYW5jZSBmb3IgYWNjb3VudCBzd2l0Y2hlciBieSByZW5ld2luZyB0aGUgZHh0cmFkZV9sb2dpbl9saXN0X3Jlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnJlc3BvbnNlVHJhZGluZ1BsYXRmb3JtQWNjb3VudHNMaXN0KGR4dHJhZGVfbG9naW5fbGlzdF9yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdG90YWwgYmFsYW5jZSBzaW5jZSBEeHRyYWRlIHRvdGFsIG9ubHkgY29tZXMgaW4gbm9uLXN0cmVhbSBiYWxhbmNlIGNhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuc2V0QmFsYW5jZU90aGVyQWNjb3VudHMoYmFsYW5jZV9yZXNwb25zZS5iYWxhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnNldEFjY291bnRUcmFuc2ZlckFtb3VudChudWxsKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SXNUcmFuc2ZlckNvbmZpcm0odHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHM7XG4gICAgfTtcblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICByZXNldEFjY291bnRUcmFuc2ZlciA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRJc1RyYW5zZmVyQ29uZmlybShmYWxzZSk7XG4gICAgfTtcblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBvbk1vdW50UGF5bWVudEFnZW50VHJhbnNmZXIoKSB7XG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgdGhpcy5vblJlbW91bnQgPSB0aGlzLm9uTW91bnRQYXltZW50QWdlbnRUcmFuc2ZlcjtcbiAgICAgICAgYXdhaXQgdGhpcy5vbk1vdW50Q29tbW9uKCk7XG4gICAgICAgIGlmICghdGhpcy5jb25maWcucGF5bWVudF9hZ2VudF90cmFuc2Zlci50cmFuc2Zlcl9saW1pdC5taW5fd2l0aGRyYXdhbCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldFBheW1lbnRBZ2VudExpc3QoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRfcGF5bWVudF9hZ2VudCA9IGF3YWl0IHRoaXMuZ2V0Q3VycmVudFBheW1lbnRBZ2VudChyZXNwb25zZSk7XG4gICAgICAgICAgICB0aGlzLnNldE1pbk1heFBheW1lbnRBZ2VudFRyYW5zZmVyKGN1cnJlbnRfcGF5bWVudF9hZ2VudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDdXJyZW50UGF5bWVudEFnZW50KHJlc3BvbnNlX3BheW1lbnRfYWdlbnQpIHtcbiAgICAgICAgY29uc3QgcGF5bWVudF9hZ2VudF9saXN0ZWQgPSByZXNwb25zZV9wYXltZW50X2FnZW50LnBheW1lbnRhZ2VudF9saXN0Lmxpc3QuZmluZChcbiAgICAgICAgICAgIGFnZW50ID0+IGFnZW50LnBheW1lbnRhZ2VudF9sb2dpbmlkID09PSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmxvZ2luaWRcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgY3VycmVudF9wYXltZW50X2FnZW50ID0gcGF5bWVudF9hZ2VudF9saXN0ZWQgfHwgKGF3YWl0IHRoaXMuZ2V0UGF5bWVudEFnZW50RGV0YWlscygpKTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfcGF5bWVudF9hZ2VudCA/PyB7fTtcbiAgICB9XG5cbiAgICBhc3luYyBjaGVja0lzUGF5bWVudEFnZW50KCkge1xuICAgICAgICBjb25zdCBnZXRfc2V0dGluZ3MgPSAoYXdhaXQgdGhpcy5XUy5hdXRob3JpemVkLnN0b3JhZ2UuZ2V0U2V0dGluZ3MoKSkuZ2V0X3NldHRpbmdzO1xuICAgICAgICB0aGlzLnNldElzUGF5bWVudEFnZW50KGdldF9zZXR0aW5ncz8uaXNfYXV0aGVudGljYXRlZF9wYXltZW50X2FnZW50ID8/IGZhbHNlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNQYXltZW50QWdlbnQoaXNfcGF5bWVudF9hZ2VudCkge1xuICAgICAgICBpZiAoIWlzX3BheW1lbnRfYWdlbnQgJiYgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmVuZHNXaXRoKHJvdXRlcy5jYXNoaWVyX3BhX3RyYW5zZmVyKSkge1xuICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNvbW1vbi5yb3V0ZVRvKHJvdXRlcy5jYXNoaWVyX2RlcG9zaXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnRfdHJhbnNmZXIuaXNfcGF5bWVudF9hZ2VudCA9ICEhaXNfcGF5bWVudF9hZ2VudDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0TWluTWF4UGF5bWVudEFnZW50VHJhbnNmZXIoeyBtaW5fd2l0aGRyYXdhbCwgbWF4X3dpdGhkcmF3YWwgfSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50X3RyYW5zZmVyLnRyYW5zZmVyX2xpbWl0ID0ge1xuICAgICAgICAgICAgbWluOiBtaW5fd2l0aGRyYXdhbCxcbiAgICAgICAgICAgIG1heDogbWF4X3dpdGhkcmF3YWwsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldENvbmZpcm1hdGlvblBheW1lbnRBZ2VudFRyYW5zZmVyKHsgYW1vdW50LCBjbGllbnRfaWQsIGNsaWVudF9uYW1lLCBkZXNjcmlwdGlvbiB9KSB7XG4gICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnRfdHJhbnNmZXIuY29uZmlybSA9IHtcbiAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgIGNsaWVudF9pZCxcbiAgICAgICAgICAgIGNsaWVudF9uYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlcXVlc3RUcnlQYXltZW50QWdlbnRUcmFuc2ZlciA9IGFzeW5jICh7IGFtb3VudCwgY3VycmVuY3ksIGRlc2NyaXB0aW9uLCB0cmFuc2Zlcl90byB9KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICAgICAgY29uc3QgcGF5bWVudF9hZ2VudF90cmFuc2ZlciA9IGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC5wYXltZW50QWdlbnRUcmFuc2Zlcih7XG4gICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICBjdXJyZW5jeSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdHJhbnNmZXJfdG8sXG4gICAgICAgICAgICBkcnlfcnVuOiAxLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCtwYXltZW50X2FnZW50X3RyYW5zZmVyLnBheW1lbnRhZ2VudF90cmFuc2ZlciA9PT0gMikge1xuICAgICAgICAgICAgLy8gc2hvdyBjb25maXJtYXRpb24gc2NyZWVuXG4gICAgICAgICAgICB0aGlzLnNldENvbmZpcm1hdGlvblBheW1lbnRBZ2VudFRyYW5zZmVyKHtcbiAgICAgICAgICAgICAgICBjbGllbnRfaWQ6IHRyYW5zZmVyX3RvLFxuICAgICAgICAgICAgICAgIGNsaWVudF9uYW1lOiBwYXltZW50X2FnZW50X3RyYW5zZmVyLmNsaWVudF90b19mdWxsX25hbWUsXG4gICAgICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnNldElzVHJ5VHJhbnNmZXJTdWNjZXNzZnVsKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UocGF5bWVudF9hZ2VudF90cmFuc2Zlci5lcnJvciwgdGhpcy5yZXNldFBheW1lbnRBZ2VudFRyYW5zZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXltZW50X2FnZW50X3RyYW5zZmVyO1xuICAgIH07XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0UmVjZWlwdFBheW1lbnRBZ2VudFRyYW5zZmVyKHsgYW1vdW50X3RyYW5zZmVycmVkLCBjbGllbnRfaWQsIGNsaWVudF9uYW1lIH0pIHtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudF90cmFuc2Zlci5yZWNlaXB0ID0ge1xuICAgICAgICAgICAgYW1vdW50X3RyYW5zZmVycmVkLFxuICAgICAgICAgICAgY2xpZW50X2lkLFxuICAgICAgICAgICAgY2xpZW50X25hbWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlcXVlc3RQYXltZW50QWdlbnRUcmFuc2ZlciA9IGFzeW5jICh7IGFtb3VudCwgY3VycmVuY3ksIGRlc2NyaXB0aW9uLCB0cmFuc2Zlcl90byB9KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICAgICAgY29uc3QgcGF5bWVudF9hZ2VudF90cmFuc2ZlciA9IGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC5wYXltZW50QWdlbnRUcmFuc2Zlcih7XG4gICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICBjdXJyZW5jeSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdHJhbnNmZXJfdG8sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoK3BheW1lbnRfYWdlbnRfdHJhbnNmZXIucGF5bWVudGFnZW50X3RyYW5zZmVyID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnNldFJlY2VpcHRQYXltZW50QWdlbnRUcmFuc2Zlcih7XG4gICAgICAgICAgICAgICAgYW1vdW50X3RyYW5zZmVycmVkOiBhbW91bnQsXG4gICAgICAgICAgICAgICAgY2xpZW50X2lkOiB0cmFuc2Zlcl90byxcbiAgICAgICAgICAgICAgICBjbGllbnRfbmFtZTogcGF5bWVudF9hZ2VudF90cmFuc2Zlci5jbGllbnRfdG9fZnVsbF9uYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnNldElzVHJhbnNmZXJTdWNjZXNzZnVsKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5zZXRJc1RyeVRyYW5zZmVyU3VjY2Vzc2Z1bChmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnNldENvbmZpcm1hdGlvblBheW1lbnRBZ2VudFRyYW5zZmVyKHt9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKHBheW1lbnRfYWdlbnRfdHJhbnNmZXIuZXJyb3IsIHRoaXMucmVzZXRQYXltZW50QWdlbnRUcmFuc2Zlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGF5bWVudF9hZ2VudF90cmFuc2ZlcjtcbiAgICB9O1xuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlc2V0UGF5bWVudEFnZW50VHJhbnNmZXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0SXNUcmFuc2ZlclN1Y2Nlc3NmdWwoZmFsc2UpO1xuICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJyk7XG4gICAgfTtcblxuICAgIGFjY291bnRTd2l0Y2hlckxpc3RlbmVyKCkge1xuICAgICAgICBbdGhpcy5jb25maWcud2l0aGRyYXcuY29udGFpbmVyLCB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmNvbnRhaW5lcl0uZm9yRWFjaChjb250YWluZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbGVhclZlcmlmaWNhdGlvbihjb250YWluZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgW3RoaXMuY29uZmlnLmRlcG9zaXQuY29udGFpbmVyLCB0aGlzLmNvbmZpZy53aXRoZHJhdy5jb250YWluZXJdLmZvckVhY2goY29udGFpbmVyID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0SWZyYW1lVXJsKCcnLCBjb250YWluZXIpO1xuICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVvdXRDYXNoaWVyVXJsKGNvbnRhaW5lcik7XG4gICAgICAgICAgICB0aGlzLnNldFNlc3Npb25UaW1lb3V0KHRydWUsIGNvbnRhaW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50ID0gbmV3IENvbmZpZ1BheW1lbnRBZ2VudCgpO1xuICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyID0gbmV3IENvbmZpZ0FjY291bnRUcmFuc2ZlcigpO1xuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50X3RyYW5zZmVyID0gbmV3IENvbmZpZ1BheW1lbnRBZ2VudFRyYW5zZmVyKCk7XG4gICAgICAgIHRoaXMuaXNfcG9wdWxhdGluZ192YWx1ZXMgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLm9uUmVtb3VudCgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgYWNjb3VudF9wbGF0Zm9ybV9pY29uKCkge1xuICAgICAgICBjb25zdCBwbGF0Zm9ybV9pY29uID0gdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY2NvdW50X2xpc3QuZmluZChcbiAgICAgICAgICAgIGFjYyA9PiB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmxvZ2luaWQgPT09IGFjYy5sb2dpbmlkXG4gICAgICAgICkuaWNvbjtcblxuICAgICAgICByZXR1cm4gcGxhdGZvcm1faWNvbjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0Q29udmVydGVyRnJvbUFtb3VudChhbW91bnQpIHtcbiAgICAgICAgdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQgPSBhbW91bnQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldENvbnZlcnRlclRvQW1vdW50KGFtb3VudCkge1xuICAgICAgICB0aGlzLmNvbnZlcnRlcl90b19hbW91bnQgPSBhbW91bnQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldENvbnZlcnRlckZyb21FcnJvcihlcnJvcikge1xuICAgICAgICB0aGlzLmNvbnZlcnRlcl9mcm9tX2Vycm9yID0gZXJyb3I7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldENvbnZlcnRlclRvRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5jb252ZXJ0ZXJfdG9fZXJyb3IgPSBlcnJvcjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25DaGFuZ2VDb252ZXJ0ZXJGcm9tQW1vdW50KHsgdGFyZ2V0IH0sIGZyb21fY3VycmVuY3ksIHRvX2N1cnJlbmN5KSB7XG4gICAgICAgIHRoaXMucmVzZXRUaW1lcigpO1xuICAgICAgICBpZiAodGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21BbW91bnQodGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVGcm9tQW1vdW50KCk7XG4gICAgICAgICAgICB0aGlzLnBlcmNlbnRhZ2VTZWxlY3RvclNlbGVjdGlvblN0YXR1cyh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlUGVyY2VudGFnZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udmVydGVyX2Zyb21fZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvQW1vdW50KCcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvRXJyb3IoJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNUaW1lclZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QWNjb3VudFRyYW5zZmVyQW1vdW50KCcnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmF0ZSA9IGF3YWl0IHRoaXMuZ2V0RXhjaGFuZ2VSYXRlKGZyb21fY3VycmVuY3ksIHRvX2N1cnJlbmN5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWNpbWFscyA9IGdldERlY2ltYWxQbGFjZXModG9fY3VycmVuY3kpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFtb3VudCA9IChyYXRlICogdGFyZ2V0LnZhbHVlKS50b0ZpeGVkKGRlY2ltYWxzKTtcbiAgICAgICAgICAgICAgICBpZiAoK2Ftb3VudCB8fCB0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvQW1vdW50KGFtb3VudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJUb0Ftb3VudCgnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVUb0Ftb3VudCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9FcnJvcignJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJc1RpbWVyVmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFjY291bnRUcmFuc2ZlckFtb3VudCh0YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXNldENvbnZlcnRlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIG9uQ2hhbmdlQ29udmVydGVyVG9BbW91bnQoeyB0YXJnZXQgfSwgZnJvbV9jdXJyZW5jeSwgdG9fY3VycmVuY3kpIHtcbiAgICAgICAgdGhpcy5yZXNldFRpbWVyKCk7XG4gICAgICAgIGlmICh0YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9BbW91bnQodGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVUb0Ftb3VudCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udmVydGVyX3RvX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KCcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21FcnJvcignJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJc1RpbWVyVmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY2NvdW50VHJhbnNmZXJBbW91bnQoJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByYXRlID0gYXdhaXQgdGhpcy5nZXRFeGNoYW5nZVJhdGUoZnJvbV9jdXJyZW5jeSwgdG9fY3VycmVuY3kpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlY2ltYWxzID0gZ2V0RGVjaW1hbFBsYWNlcyh0b19jdXJyZW5jeSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gKHJhdGUgKiB0YXJnZXQudmFsdWUpLnRvRml4ZWQoZGVjaW1hbHMpO1xuICAgICAgICAgICAgICAgIGlmICgrYW1vdW50IHx8IHRoaXMuY29udmVydGVyX3RvX2Ftb3VudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21BbW91bnQoYW1vdW50KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21BbW91bnQoJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnBlcmNlbnRhZ2VTZWxlY3RvclNlbGVjdGlvblN0YXR1cyh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVBlcmNlbnRhZ2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlRnJvbUFtb3VudCgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnZlcnRlcl9mcm9tX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNUaW1lclZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFjY291bnRUcmFuc2ZlckFtb3VudCgnJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tRXJyb3IoJycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldElzVGltZXJWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFjY291bnRUcmFuc2ZlckFtb3VudChhbW91bnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRDb252ZXJ0ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRUcmFuc2ZlclBlcmNlbnRhZ2VTZWxlY3RvclJlc3VsdChhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRfZnJvbV9jdXJyZW5jeSA9IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS5jdXJyZW5jeTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRfdG9fY3VycmVuY3kgPSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLmN1cnJlbmN5O1xuXG4gICAgICAgIGlmIChhbW91bnQgPiAwIHx8ICt0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uYmFsYW5jZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KGFtb3VudCk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlVHJhbnNmZXJGcm9tQW1vdW50KCk7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlQ29udmVydGVyRnJvbUFtb3VudChcbiAgICAgICAgICAgICAgICB7IHRhcmdldDogeyB2YWx1ZTogYW1vdW50IH0gfSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZF9mcm9tX2N1cnJlbmN5LFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkX3RvX2N1cnJlbmN5XG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKCt0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uYmFsYW5jZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KGFtb3VudCk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlVHJhbnNmZXJGcm9tQW1vdW50KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0Q29udmVydGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRJc1RpbWVyVmlzaWJsZShmYWxzZSk7XG4gICAgICAgIHRoaXMucGVyY2VudGFnZVNlbGVjdG9yU2VsZWN0aW9uU3RhdHVzKGZhbHNlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0V2l0aGRyYXdQZXJjZW50YWdlU2VsZWN0b3JSZXN1bHQoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21BbW91bnQoYW1vdW50KTtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVXaXRoZHJhd0Zyb21BbW91bnQoKTtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2VDb252ZXJ0ZXJGcm9tQW1vdW50KFxuICAgICAgICAgICAgICAgIHsgdGFyZ2V0OiB7IHZhbHVlOiBhbW91bnQgfSB9LFxuICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuY3VycmVuY3ksXG4gICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5jdXJyZW50X2ZpYXRfY3VycmVuY3kgfHwgJ1VTRCdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0Q29udmVydGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRJc1RpbWVyVmlzaWJsZShmYWxzZSk7XG4gICAgICAgIHRoaXMucGVyY2VudGFnZVNlbGVjdG9yU2VsZWN0aW9uU3RhdHVzKGZhbHNlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgdmFsaWRhdGVGcm9tQW1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmVfY29udGFpbmVyID09PSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVRyYW5zZmVyRnJvbUFtb3VudCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVdpdGhkcmF3RnJvbUFtb3VudCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHZhbGlkYXRlVG9BbW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZV9jb250YWluZXIgPT09IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlVHJhbnNmZXJUb0Ftb3VudCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVdpdGhkcmF3VG9BbW91bnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICB2YWxpZGF0ZVRyYW5zZmVyRnJvbUFtb3VudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tRXJyb3IobG9jYWxpemUoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQuJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeyBpc19vaywgbWVzc2FnZSB9ID0gdmFsaWROdW1iZXIodGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZmxvYXQnLFxuICAgICAgICAgICAgICAgIGRlY2ltYWxzOiBnZXREZWNpbWFsUGxhY2VzKHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS5jdXJyZW5jeSksXG4gICAgICAgICAgICAgICAgbWluOiB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnRyYW5zZmVyX2xpbWl0Lm1pbixcbiAgICAgICAgICAgICAgICBtYXg6IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIudHJhbnNmZXJfbGltaXQubWF4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWlzX29rKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCt0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uYmFsYW5jZSA8ICt0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUVycm9yKGxvY2FsaXplKCdJbnN1ZmZpY2llbnQgZnVuZHMnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUVycm9yKCcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICB2YWxpZGF0ZVRyYW5zZmVyVG9BbW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnZlcnRlcl90b19hbW91bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5ID0gdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5jdXJyZW5jeTtcbiAgICAgICAgICAgIGNvbnN0IHsgaXNfb2ssIG1lc3NhZ2UgfSA9IHZhbGlkTnVtYmVyKHRoaXMuY29udmVydGVyX3RvX2Ftb3VudCwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdmbG9hdCcsXG4gICAgICAgICAgICAgICAgZGVjaW1hbHM6IGdldERlY2ltYWxQbGFjZXMoY3VycmVuY3kpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWlzX29rKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJUb0Vycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvRXJyb3IoJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHZhbGlkYXRlV2l0aGRyYXdGcm9tQW1vdW50KCkge1xuICAgICAgICBsZXQgZXJyb3JfbWVzc2FnZSA9ICcnO1xuXG4gICAgICAgIGNvbnN0IHsgYmFsYW5jZSwgY3VycmVuY3ksIHdlYnNpdGVfc3RhdHVzIH0gPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50O1xuICAgICAgICBjb25zdCBtaW5fd2l0aGRyYXdfYW1vdW50ID0gd2Vic2l0ZV9zdGF0dXMuY3J5cHRvX2NvbmZpZ1tjdXJyZW5jeV0ubWluaW11bV93aXRoZHJhd2FsO1xuICAgICAgICBjb25zdCBtYXhfd2l0aGRyYXdfYW1vdW50ID0gK3RoaXMubWF4X3dpdGhkcmF3X2Ftb3VudCA+ICtiYWxhbmNlID8gK2JhbGFuY2UgOiArdGhpcy5tYXhfd2l0aGRyYXdfYW1vdW50O1xuXG4gICAgICAgIGlmICh0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCkge1xuICAgICAgICAgICAgY29uc3QgeyBpc19vaywgbWVzc2FnZSB9ID0gdmFsaWROdW1iZXIodGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZmxvYXQnLFxuICAgICAgICAgICAgICAgIGRlY2ltYWxzOiBnZXREZWNpbWFsUGxhY2VzKGN1cnJlbmN5KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFpc19vaykgZXJyb3JfbWVzc2FnZSA9IG1lc3NhZ2U7XG5cbiAgICAgICAgICAgIGlmICgrYmFsYW5jZSA8ICt0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCkgZXJyb3JfbWVzc2FnZSA9IGxvY2FsaXplKCdJbnN1ZmZpY2llbnQgZnVuZHMnKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICt0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCA8ICttaW5fd2l0aGRyYXdfYW1vdW50IHx8XG4gICAgICAgICAgICAgICAgK3RoaXMuY29udmVydGVyX2Zyb21fYW1vdW50ID4gK21heF93aXRoZHJhd19hbW91bnRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGVycm9yX21lc3NhZ2UgPSAoXG4gICAgICAgICAgICAgICAgICAgIDxMb2NhbGl6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaTE4bl9kZWZhdWx0X3RleHQ9J1RoZSBhbGxvd2VkIHdpdGhkcmF3IGFtb3VudCBpcyB7e21pbl93aXRoZHJhd19hbW91bnR9fSB0byB7e21heF93aXRoZHJhd19hbW91bnR9fSB7e2N1cnJlbmN5fX0nXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5fd2l0aGRyYXdfYW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heF93aXRoZHJhd19hbW91bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVuY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tRXJyb3IoZXJyb3JfbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHZhbGlkYXRlV2l0aGRyYXdUb0Ftb3VudCgpIHtcbiAgICAgICAgbGV0IGVycm9yX21lc3NhZ2UgPSAnJztcbiAgICAgICAgY29uc3QgeyBjdXJyZW50X2ZpYXRfY3VycmVuY3kgfSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQ7XG5cbiAgICAgICAgaWYgKHRoaXMuY29udmVydGVyX3RvX2Ftb3VudCkge1xuICAgICAgICAgICAgY29uc3QgeyBpc19vaywgbWVzc2FnZSB9ID0gdmFsaWROdW1iZXIodGhpcy5jb252ZXJ0ZXJfdG9fYW1vdW50LCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Zsb2F0JyxcbiAgICAgICAgICAgICAgICBkZWNpbWFsczogZ2V0RGVjaW1hbFBsYWNlcyhjdXJyZW50X2ZpYXRfY3VycmVuY3kpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWlzX29rKSBlcnJvcl9tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9FcnJvcihlcnJvcl9tZXNzYWdlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgcmVzZXRDb252ZXJ0ZXIoKSB7XG4gICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUFtb3VudCgnJyk7XG4gICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9BbW91bnQoJycpO1xuICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21FcnJvcignJyk7XG4gICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9FcnJvcignJyk7XG4gICAgICAgIHRoaXMuc2V0SXNUaW1lclZpc2libGUoZmFsc2UpO1xuICAgICAgICB0aGlzLnBlcmNlbnRhZ2VTZWxlY3RvclNlbGVjdGlvblN0YXR1cyh0cnVlKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsibG9jYWxpemUiLCJjcmVhdGVCYW54YVByb3ZpZGVyIiwic3RvcmUiLCJpY29uIiwiZGFyayIsImxpZ2h0IiwibmFtZSIsImdldERlc2NyaXB0aW9uIiwiZ2V0QWxsb3dlZFJlc2lkZW5jaWVzIiwiZ2V0UGF5bWVudEljb25zIiwiZ2V0U2NyaXB0RGVwZW5kZW5jaWVzIiwiZ2V0RGVmYXVsdEZyb21DdXJyZW5jeSIsImdldEZyb21DdXJyZW5jaWVzIiwiZ2V0VG9DdXJyZW5jaWVzIiwiZ2V0V2lkZ2V0SHRtbCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiV1MiLCJzZXJ2aWNlVG9rZW4iLCJzZXJ2aWNlX3Rva2VuIiwic2VydmljZSIsInJlZmVycmVyIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwidGhlbiIsInJlc3BvbnNlIiwiZXJyb3IiLCJtZXNzYWdlIiwidXJsIiwiYmFueGEiLCJvcGVuIiwib25Nb3VudFdpZGdldENvbnRhaW5lciIsInNob3VsZF9zaG93X2RlcG9zaXRfYWRkcmVzcyIsImNyZWF0ZUNoYW5nZWxseVByb3ZpZGVyIiwiVVJMIiwic2VhcmNoUGFyYW1zIiwiYXBwZW5kIiwiY3VycmVuY3kiLCJyb290X3N0b3JlIiwiY2xpZW50IiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInRvX2N1cnJlbmN5IiwiY3JlYXRlWGFuUG9vbFByb3ZpZGVyIiwiZGVwb3NpdF9hZGRyZXNzIiwiZ2V0Q3VycmVuY3lEaXNwbGF5Q29kZSIsInRlbXBsYXRlIiwic3RyaW5nIiwiY29udGVudCIsInRvX3JlcGxhY2UiLCJBcnJheSIsImlzQXJyYXkiLCJyZXBsYWNlIiwicyIsImluZGV4IiwiY3JlYXRlRWxlbWVudCIsInRhZ19uYW1lIiwiYXR0cmlidXRlcyIsImVsIiwiZG9jdW1lbnQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImF0dHIiLCJ2YWx1ZSIsInRleHRDb250ZW50IiwiaHRtbCIsInNldEF0dHJpYnV0ZSIsInN0YXRpY19oYXNoIiwiZ2V0U3RhdGljSGFzaCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJzcGxpdCIsIlByb21pc2VDbGFzcyIsInByb21pc2UiLCJjb3B5VG9DbGlwYm9hcmQiLCJ0ZXh0IiwidGV4dEZpZWxkIiwiaW5uZXJUZXh0IiwiYm9keSIsImFwcGVuZENoaWxkIiwic2VsZWN0IiwiZXhlY0NvbW1hbmQiLCJyZW1vdmUiLCJldV9jb3VudHJpZXMiLCJpc0V1Q291bnRyeSIsImNvdW50cnkiLCJnZXRBY2NvdW50VGV4dCIsImFjY291bnQiLCJhY2NvdW50X3RleHQiLCJpc19keHRyYWRlIiwiaXNfbXQiLCJFcnJvcnMiLCJlcnJvcnMiLCJhdHRyaWJ1dGUiLCJoYXMiLCJpbmRleE9mIiwicHVzaCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImdldFByZUJ1aWxkRFZScyIsIkVycm9yIiwiVmFsaWRhdG9yIiwiaW5wdXQiLCJydWxlcyIsImVycm9yX2NvdW50IiwicnVsZSIsImVycm9yX21lc3NhZ2UiLCJvcHRpb25zIiwibWluIiwibWF4IiwibmFtZTEiLCJuYW1lMiIsImFkZCIsInJ1bGVPYmplY3QiLCJnZXRSdWxlT2JqZWN0IiwidmFsaWRhdG9yIiwiY29uZGl0aW9uIiwiaXNfdmFsaWQiLCJpc19vayIsImFkZEZhaWx1cmUiLCJjaGVjayIsImlzX3J1bGVfc3RyaW5nIiwicnVsZV9vYmplY3QiLCJmdW5jIiwiZGVmYXVsdCIsImFjdGlvbiIsImludGVyY2VwdCIsIm9ic2VydmFibGUiLCJyZWFjdGlvbiIsInRvSlMiLCJ3aGVuIiwiaXNQcm9kdWN0aW9uIiwiaXNFbXB0eU9iamVjdCIsIkJhc2VTdG9yZSIsImJvdW5kIiwicHJlU3dpdGNoQWNjb3VudERpc3Bvc2VyIiwicHJlX3N3aXRjaF9hY2NvdW50X2xpc3RlbmVyIiwic3dpdGNoQWNjb3VudERpc3Bvc2VyIiwic3dpdGNoX2FjY291bnRfbGlzdGVuZXIiLCJsb2dvdXREaXNwb3NlciIsImxvZ291dF9saXN0ZW5lciIsImNsaWVudEluaXREaXNwb3NlciIsImNsaWVudF9pbml0X2xpc3RlbmVyIiwibmV0d29ya1N0YXR1c0NoYW5nZURpc3Bvc2VyIiwibmV0d29ya19zdGF0dXNfY2hhbmdlX2xpc3RlbmVyIiwidGhlbWVDaGFuZ2VEaXNwb3NlciIsInRoZW1lX2NoYW5nZV9saXN0ZW5lciIsInJlYWxBY2NvdW50U2lnbnVwRW5kZWREaXNwb3NlciIsInJlYWxfYWNjb3VudF9zaWdudXBfZW5kZWRfbGlzdGVuZXIiLCJsb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMiLCJzZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllcyIsInZhbGlkYXRpb25fcnVsZXMiLCJzdG9yZV9uYW1lIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJoYXNfbG9jYWxfb3Jfc2Vzc2lvbl9zdG9yYWdlIiwibGVuZ3RoIiwic2V0VmFsaWRhdGlvblJ1bGVzIiwic2V0dXBSZWFjdGlvbkZvckxvY2FsU3RvcmFnZSIsInNldHVwUmVhY3Rpb25Gb3JTZXNzaW9uU3RvcmFnZSIsInJldHJpZXZlRnJvbVN0b3JhZ2UiLCJwcm9wZXJ0aWVzIiwic25hcHNob3QiLCJyZWR1Y2UiLCJyZXN1bHQiLCJwIiwiYXNzaWduIiwibWFwIiwiaSIsInNhdmVUb1N0b3JhZ2UiLCJTVE9SQUdFUyIsIkxPQ0FMX1NUT1JBR0UiLCJTRVNTSU9OX1NUT1JBR0UiLCJzdG9yYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldFNuYXBzaG90Iiwia2V5IiwidW5kZWZpbmVkIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInNlc3Npb25TdG9yYWdlIiwibG9jYWxfc3RvcmFnZV9zbmFwc2hvdCIsInBhcnNlIiwiZ2V0SXRlbSIsInNlc3Npb25fc3RvcmFnZV9zbmFwc2hvdCIsImsiLCJwcm9wZXJ0eU5hbWUiLCJtZXNzYWdlcyIsImlzX2RpZmZlcmVudCIsInZhbGlkYXRpb25fZXJyb3JzIiwiZmlsdGVyIiwieCIsImNvbmNhdCIsImFkZFJ1bGUiLCJwcm9wZXJ0eSIsImNoYW5nZSIsInZhbGlkYXRlUHJvcGVydHkiLCJuZXdWYWx1ZSIsInRyaWdnZXIiLCJpbnB1dHMiLCJpc1Bhc3NlZCIsInNldFZhbGlkYXRpb25FcnJvck1lc3NhZ2VzIiwiZ2V0IiwibGlzdGVuZXIiLCJzd2l0Y2hfYnJvYWRjYXN0Iiwic3dpdGNoRW5kU2lnbmFsIiwib25Td2l0Y2hBY2NvdW50IiwiY29uc29sZSIsInByZV9zd2l0Y2hfYnJvYWRjYXN0Iiwic2V0UHJlU3dpdGNoQWNjb3VudCIsIm9uUHJlU3dpdGNoQWNjb3VudCIsImhhc19sb2dnZWRfb3V0Iiwic2V0TG9nb3V0Iiwib25Mb2dvdXQiLCJpbml0aWFsaXplZF9icm9hZGNhc3QiLCJzZXRJbml0aWFsaXplZCIsIm9uQ2xpZW50SW5pdCIsImNvbW1vbiIsImlzX25ldHdvcmtfb25saW5lIiwiaXNfb25saW5lIiwidWkiLCJpc19kYXJrX21vZGVfb24iLCJoYXNfcmVhbF9hY2NvdW50X3NpZ251cF9lbmRlZCIsInNldFJlYWxBY2NvdW50U2lnbnVwRW5kIiwib25SZWFsQWNjb3VudFNpZ251cEVuZCIsImRpc3Bvc2VQcmVTd2l0Y2hBY2NvdW50IiwiZGlzcG9zZVN3aXRjaEFjY291bnQiLCJkaXNwb3NlTG9nb3V0IiwiZGlzcG9zZUNsaWVudEluaXQiLCJkaXNwb3NlTmV0d29ya1N0YXR1c0NoYW5nZSIsImRpc3Bvc2VUaGVtZUNoYW5nZSIsImRpc3Bvc2VSZWFsQWNjb3VudFNpZ251cEVuZCIsImxvZ2luaWQiLCJyZWFjdGlvbnMiLCJhY3QiLCJwYXJ0aWFsX2ZldGNoX3RpbWUiLCJmcmVlemUiLCJTeW1ib2wiLCJjb21wdXRlZCIsImdldEtlYmFiQ2FzZSIsImlzQ3J5cHRvY3VycmVuY3kiLCJyb3V0ZXMiLCJ3ZWJzaXRlVXJsIiwiT25yYW1wUHJvdmlkZXJzIiwiT25SYW1wU3RvcmUiLCJzaGFsbG93IiwicmVmIiwiZGVwb3NpdF9hZGRyZXNzX3JlZiIsInNldE9ucmFtcFByb3ZpZGVycyIsImlzX3ZpcnR1YWwiLCJmaWx0ZXJlZF9vbnJhbXBfcHJvdmlkZXJzIiwib25yYW1wX3Byb3ZpZGVycyIsInByb3ZpZGVyIiwidG9fY3VycmVuY2llcyIsImFsbG93ZWRfcmVzaWRlbmNpZXMiLCJyZXNpZGVuY2UiLCJzaG91bGRfc2hvd193aWRnZXQiLCJzZWxlY3RlZF9wcm92aWRlciIsInNob3VsZF9zaG93X2RpYWxvZyIsImFwaV9lcnJvciIsImRpc3Bvc2VUaGlyZFBhcnR5SnNSZWFjdGlvbiIsImRlcGVuZGVuY2llcyIsImxvYWRqcyIsInNjcmlwdF9uYW1lIiwiaXNEZWZpbmVkIiwid2FybiIsInNldFNlbGVjdGVkUHJvdmlkZXIiLCJkaXNwb3NlR2V0V2lkZ2V0SHRtbFJlYWN0aW9uIiwiaXNfcmVxdWVzdGluZ193aWRnZXRfaHRtbCIsInNldElzUmVxdWVzdGluZ1dpZGdldEh0bWwiLCJ3aWRnZXRfaHRtbCIsInNldFdpZGdldEh0bWwiLCJzZXRTaG91bGRTaG93V2lkZ2V0Iiwic2V0V2lkZ2V0RXJyb3IiLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwic2VsZWN0aW9ucyIsImdldFNlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0Iiwic2V0SXNEZXBvc2l0QWRkcmVzc1BvcG92ZXJPcGVuIiwic2V0VGltZW91dCIsInBvbGxBcGlGb3JEZXBvc2l0QWRkcmVzcyIsImNhc2hpZXJfZGVwb3NpdCIsInN1YnN0cmluZyIsInNob3VsZF9hbGxvd19lbXB0eV9hZGRyZXNzIiwic2V0SXNEZXBvc2l0QWRkcmVzc0xvYWRpbmciLCJzZXRBcGlFcnJvciIsImRlcG9zaXRfYWRkcmVzc19pbnRlcnZhbCIsInNldEludGVydmFsIiwiZ2V0RGVwb3NpdEFkZHJlc3NGcm9tQXBpIiwibW9kdWxlcyIsImNhc2hpZXIiLCJhdXRob3JpemVkIiwidHlwZSIsInNob3VsZF9jbGVhcl9pbnRlcnZhbCIsImFkZHJlc3MiLCJkZXBvc2l0Iiwic2V0RGVwb3NpdEFkZHJlc3MiLCJjbGVhckludGVydmFsIiwic2V0RGVwb3NpdEFkZHJlc3NSZWYiLCJjb3B5X2ljb25fcmVmIiwiaXNfbG9hZGluZyIsImlzX2RlcG9zaXRfYWRkcmVzc19sb2FkaW5nIiwiaXNfb3BlbiIsImlzX2RlcG9zaXRfYWRkcmVzc19wb3BvdmVyX29wZW4iLCJpc19vbnJhbXBfbW9kYWxfb3BlbiIsInNldElzT25SYW1wTW9kYWxPcGVuIiwic2hvdWxkX3Nob3ciLCJzbGljZSIsIndpZGdldF9lcnJvciIsIlRyYW5zYWN0aW9uSGlzdG9yeVN0b3JlIiwidHJhbnNhY3Rpb25zIiwidHJhbnNhY3Rpb24iLCJjcnlwdG9fdHJhbnNhY3Rpb25zIiwiZmluZEluZGV4IiwiY3J5cHRvIiwiaWQiLCJzb3J0Q3J5cHRvVHJhbnNhY3Rpb25zIiwic29ydCIsImEiLCJiIiwic3VibWl0X2RhdGUiLCJzdWJzY3JpYmVDYXNoaWVyUGF5bWVudHMiLCJjYXNoaWVyX3BheW1lbnRzIiwidXBkYXRlQ3J5cHRvVHJhbnNhY3Rpb25zIiwic3dpdGNoZWQiLCJpc19jcnlwdG8iLCJzZXRMb2FkaW5nIiwidW5zdWJzY3JpYmVDcnlwdG9UcmFuc2FjdGlvbnMiLCJnZXRDcnlwdG9UcmFuc2FjdGlvbnMiLCJjYXNoaWVyUGF5bWVudHMiLCJ0cmFuc2FjdGlvbl90eXBlIiwic2V0Q3J5cHRvVHJhbnNhY3Rpb25zSGlzdG9yeSIsInRyYW5zYWN0aW9uX2lkIiwiY2FuY2VsQ3J5cHRvVHJhbnNhY3Rpb24iLCJzZXRTZWxlY3RlZENyeXB0b1RyYW5zYWN0aW9uSWQiLCJzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsVmlzaWJsZSIsInNlbGVjdGVkX2NyeXB0b190cmFuc2FjdGlvbl9pZCIsImlzX3Zpc2libGUiLCJpc19jcnlwdG9fdHJhbnNhY3Rpb25zX2NhbmNlbF9tb2RhbF92aXNpYmxlIiwic3RhdHVzIiwic2VsZWN0ZWRfY3J5cHRvX3N0YXR1cyIsImRlc2NyaXB0aW9uIiwic2VsZWN0ZWRfY3J5cHRvX3N0YXR1c19kZXNjcmlwdGlvbiIsImlzX2NyeXB0b190cmFuc2FjdGlvbnNfc3RhdHVzX21vZGFsX3Zpc2libGUiLCJzZXRTZWxlY3RlZENyeXB0b1N0YXR1c0Rlc2NyaXB0aW9uIiwic2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXMiLCJzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsVmlzaWJsZSIsImlzX2NyeXB0b190cmFuc2FjdGlvbnNfdmlzaWJsZSIsIkFjY291bnRQcm9tcHREaWFsb2dTdG9yZSIsIm5leHRfbG9jYXRpb24iLCJjdXJyZW50X2xvY2F0aW9uIiwiaXNfY29uZmlybWVkIiwibGFzdF9sb2NhdGlvbiIsImhhc19maWF0X2FjY291bnQiLCJjb25maWciLCJhY2NvdW50X3RyYW5zZmVyIiwiYWNjb3VudHNfbGlzdCIsInNvbWUiLCJkb1N3aXRjaCIsIm5vbl9jcnlwdG9fYWNjb3VudHMiLCJzd2l0Y2hBY2NvdW50Iiwic2V0SXNEZXBvc2l0Iiwicm91dGVUbyIsIkVycm9yRGlhbG9nU3RvcmUiLCJzZXRTaG91bGRTaG93IiwiUmVhY3QiLCJQcm9wVHlwZXMiLCJJY29uIiwiQ291bnRlciIsIkNhc2hpZXJOb3RpZmljYXRpb25zIiwicDJwX25vdGlmaWNhdGlvbl9jb3VudCIsInByb3BUeXBlcyIsIm51bWJlciIsImZvcm1hdE1vbmV5IiwiZ2V0Q3VycmVuY2llcyIsImdldERlY2ltYWxQbGFjZXMiLCJnZXRNaW5XaXRoZHJhd2FsIiwiZ2V0Q0ZEQWNjb3VudERpc3BsYXkiLCJnZXRDRkRBY2NvdW50IiwiZ2V0UHJvcGVydHlWYWx1ZSIsInZhbGlkTnVtYmVyIiwiQ0ZEX1BMQVRGT1JNUyIsIkxvY2FsaXplIiwiQWNjb3VudFByb21wdERpYWxvZyIsIkVycm9yRGlhbG9nIiwiaGFzVHJhbnNmZXJOb3RBbGxvd2VkTG9naW5pZCIsInN0YXJ0c1dpdGgiLCJnZXRTZWxlY3RlZEVycm9yIiwic2VsZWN0ZWRfdmFsdWUiLCJpc19mcm9tX2FjY291bnQiLCJDb25maWciLCJjb250YWluZXIiLCJpc19zZXNzaW9uX3RpbWVvdXQiLCJvbklmcmFtZUxvYWRlZCIsInRpbWVvdXRfc2Vzc2lvbiIsIkNvbmZpZ0Vycm9yIiwiQ29uZmlnUGF5bWVudEFnZW50IiwibGlzdCIsImFjdGl2ZV90YWJfaW5kZXgiLCJDb25maWdWZXJpZmljYXRpb24iLCJDb25maWdQYXltZW50QWdlbnRUcmFuc2ZlciIsIkNvbmZpZ0FjY291bnRUcmFuc2ZlciIsImJhbGFuY2UiLCJmaW5kIiwiYWNjIiwic2VsZWN0ZWRfZnJvbSIsInNlbGVjdGVkX3RvIiwiQ29uZmlnV2l0aGRyYXciLCJpc19idXR0b25fY2xpY2tlZCIsInRpbWVvdXRfYnV0dG9uIiwiQ2FzaGllclN0b3JlIiwiYWN0aXZlX2NvbnRhaW5lciIsIm9uUmVtb3VudCIsImlzX3BvcHVsYXRpbmdfdmFsdWVzIiwiY29udGFpbmVycyIsIndpdGhkcmF3IiwibWFwX2FjdGlvbiIsInBheW1lbnRfYWdlbnQiLCJyZXF1ZXN0VHJhbnNmZXJCZXR3ZWVuQWNjb3VudHMiLCJhbW91bnQiLCJpc19sb2dnZWRfaW4iLCJzZXRFcnJvck1lc3NhZ2UiLCJpc19tdF90cmFuc2ZlciIsInNldElzTVQ1VHJhbnNmZXJJblByb2dyZXNzIiwidHJhbnNmZXJCZXR3ZWVuQWNjb3VudHMiLCJ0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzIiwiY29kZSIsImdldEFjY291bnRTdGF0dXMiLCJhY2NvdW50X3N0YXR1c19yZXNwb25zZSIsInNldEFjY291bnRTdGF0dXMiLCJnZXRfYWNjb3VudF9zdGF0dXMiLCJzZXRSZWNlaXB0VHJhbnNmZXIiLCJhY2NvdW50cyIsInNldEJhbGFuY2VCeUxvZ2luSWQiLCJzZXRCYWxhbmNlU2VsZWN0ZWRGcm9tIiwic2V0QmFsYW5jZVNlbGVjdGVkVG8iLCJhY2NvdW50X3R5cGUiLCJNVDUiLCJhbGwiLCJtdDVMb2dpbkxpc3QiLCJiYWxhbmNlQWxsIiwibXQ1X2xvZ2luX2xpc3RfcmVzcG9uc2UiLCJiYWxhbmNlX3Jlc3BvbnNlIiwicmVzcG9uc2VNdDVMb2dpbkxpc3QiLCJzZXRCYWxhbmNlT3RoZXJBY2NvdW50cyIsIkRYVFJBREUiLCJ0cmFkaW5nUGxhdGZvcm1BY2NvdW50c0xpc3QiLCJkeHRyYWRlX2xvZ2luX2xpc3RfcmVzcG9uc2UiLCJyZXNwb25zZVRyYWRpbmdQbGF0Zm9ybUFjY291bnRzTGlzdCIsInNldEFjY291bnRUcmFuc2ZlckFtb3VudCIsInNldElzVHJhbnNmZXJDb25maXJtIiwiYXR0YWNoQ2FzaGllclRvTWVudSIsImhhc19zZXRfY3VycmVuY3kiLCJjaGFuZ2VTZXRDdXJyZW5jeU1vZGFsVGl0bGUiLCJvbnJhbXAiLCJhY2NvdW50X3Byb21wdF9kaWFsb2ciLCJlcnJvcl9kaWFsb2ciLCJ0cmFuc2FjdGlvbl9oaXN0b3J5IiwiaW5pdCIsImZpbHRlcmVkX2xpc3QiLCJhZ2VudHMiLCJhbGxfcGF5bWVudF9hZ2VudF9saXN0IiwicGF5bWVudGFnZW50X2xpc3QiLCJwYXltZW50X2FnZW50X3RyYW5zZmVyIiwiaXNfcGF5bWVudF9hZ2VudCIsImlzX3AycF92aXNpYmxlIiwiaXNfZXUiLCJpc19wMnBfcmVzdHJpY3RlZCIsInAycF9hZHZlcnRpc2VyX2Vycm9yIiwiaGFzX3VzZF9jdXJyZW5jeSIsImFjY291bnRfbGlzdCIsInRpdGxlIiwiaGFzX3VzZXJfZmlhdF9jdXJyZW5jeSIsInNob3dfcDJwX2luX2Nhc2hpZXJfZGVmYXVsdCIsInNldEhhc1NldEN1cnJlbmN5IiwibWVudSIsImF0dGFjaCIsImxpbmtfdG8iLCJvbkNsaWNrIiwidG9nZ2xlU2V0Q3VycmVuY3lNb2RhbCIsImxvZ2luX29ubHkiLCJ1cGRhdGUiLCJoYXNfYWN0aXZlX3JlYWxfYWNjb3VudCIsInNob3VsZF9zZXRfY3VycmVuY3lfbW9kYWxfdGl0bGVfY2hhbmdlIiwic2V0SXNDYXNoaWVyRGVmYXVsdCIsInJlc2V0SXNDb25maXJtZWQiLCJnZXRBbGxQYXltZW50QWdlbnRMaXN0IiwicGF5bWVudF9hZ2VudF9saXN0Iiwic2V0QWxsUGF5bWVudEFnZW50TGlzdCIsImlzX3dpdGhkcmF3X2NvbmZpcm1lZCIsInNldFdpdGhkcmF3QW1vdW50IiwiY29udmVydGVyX2Zyb21fYW1vdW50IiwidmVyaWZpY2F0aW9uIiwiY2xlYXJWZXJpZmljYXRpb24iLCJ3aXRoZHJhd19hbW91bnQiLCJwZXJjZW50YWdlIiwidG9GaXhlZCIsInNob3VsZF9wZXJjZW50YWdlX3Jlc2V0IiwidmVyaWZpY2F0aW9uX2NvZGUiLCJjcnlwdG9XaXRoZHJhdyIsImJsb2NrY2hhaW5fYWRkcmVzcyIsInJlc2V0V2l0aHJhd0Zvcm0iLCJzZXRJc1dpdGhkcmF3Q29uZmlybWVkIiwic2V0Q29udmVydGVyRnJvbUVycm9yIiwiZHJ5X3J1biIsInNhdmVXaXRoZHJhdyIsInNldEJsb2NrY2hhaW5BZGRyZXNzIiwic2V0Q29udmVydGVyRnJvbUFtb3VudCIsInNldENvbnZlcnRlclRvQW1vdW50IiwiaXNfZGVwb3NpdCIsInNob3VsZF9zaG93X2FsbF9hdmFpbGFibGVfY3VycmVuY2llcyIsImlzX2Nhc2hpZXJfZGVmYXVsdCIsInRhcmdldCIsImRlcG9zaXRfdGFyZ2V0IiwiYWNjb3VudFN3aXRjaGVyTGlzdGVuZXIiLCJzZXRBY3RpdmVUYWJJbmRleCIsInNlbmRWZXJpZmljYXRpb25FbWFpbCIsImdldEFkdmVydGl6ZXJFcnJvciIsImNoZWNrUDJwU3RhdHVzIiwiY2hlY2sxMGtMaW1pdCIsInNldFBheW1lbnRBZ2VudExpc3QiLCJmaWx0ZXJQYXltZW50QWdlbnRMaXN0IiwiaXNfcGF5bWVudF9hZ2VudF92aXNpYmxlIiwid2FpdCIsInJlc2V0TGFzdExvY2F0aW9uIiwicDJwQWR2ZXJ0aXNlckluZm8iLCJhZHZlcnRpc2VyX2luZm8iLCJzZXRQMnBBZHZlcnRpc2VyRXJyb3IiLCJhZHZlcnRpc2VyX2Vycm9yIiwic2V0SXNQMnBWaXNpYmxlIiwic2hvdWxkX3JlbW91bnQiLCJvbk1vdW50Q29tbW9uIiwiY2hlY2tJc1BheW1lbnRBZ2VudCIsInNvcnRBY2NvdW50c1RyYW5zZmVyIiwiaXNfb25yYW1wX3RhYl92aXNpYmxlIiwicGF0aG5hbWUiLCJlbmRzV2l0aCIsImNhc2hpZXJfb25yYW1wIiwiY2FzaGllcl9jcnlwdG9fdHJhbnNhY3Rpb25zIiwic2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNWaXNpYmxlIiwib25Nb3VudCIsImNhc2hpZXJfcm91dGVfdGFiX2luZGV4Iiwic3RyUmVnRXhwIiwidGVzdCIsInJlc3BvbnNlX2Nhc2hpZXIiLCJoYW5kbGVDYXNoaWVyRXJyb3IiLCJzZXRTZXNzaW9uVGltZW91dCIsImNsZWFyVGltZW91dENhc2hpZXJVcmwiLCJvbk1vdW50V2l0aGRyYXciLCJjdXJyZW50X2NvbnRhaW5lciIsInNldENvbnRhaW5lckhlaWdodCIsImNoZWNrSWZyYW1lTG9hZGVkIiwic2V0SWZyYW1lVXJsIiwic2V0VGltZW91dENhc2hpZXJVcmwiLCJub3RpZmljYXRpb25fY291bnQiLCJjYXNoaWVyX3AycCIsImlzX3N3aXRjaGluZyIsIm9uTW91bnREZXBvc2l0IiwiYWNjb3VudF9zdGF0dXMiLCJzdGF0dXNfbmFtZSIsImNhc2hpZXJfdmFsaWRhdGlvbiIsInZhbGlkYXRpb24iLCJpc19hdXRoZW50aWNhdGlvbl9uZWVkZWQiLCJpc190bmNfbmVlZGVkIiwiaXNfZmluYW5jaWFsX2FjY291bnQiLCJpc19maW5hbmNpYWxfaW5mb3JtYXRpb25faW5jb21wbGV0ZSIsImlzX3RyYWRpbmdfZXhwZXJpZW5jZV9pbmNvbXBsZXRlIiwibXQ1X2xvZ2luX2xpc3QiLCJpc19kZXBvc2l0X2xvY2siLCJuZWVkX2F1dGhlbnRpY2F0aW9uIiwiaXNfYXNrX2F1dGhlbnRpY2F0aW9uIiwibmVlZF9maW5hbmNpYWxfYXNzZXNzbWVudCIsIm5lZWRfdG5jIiwiaXRlbSIsInN1Yl9hY2NvdW50X3R5cGUiLCJpc19hc2tfZmluYW5jaWFsX3Jpc2tfYXBwcm92YWwiLCJhdXRoZW50aWNhdGlvbiIsIm5lZWRfcG9pIiwibmVlZHNfdmVyaWZpY2F0aW9uIiwiaXNfd2l0aGRyYXdhbF9sb2NrIiwibWF4X3dpdGhkcmF3X2Ftb3VudCIsImdldExpbWl0cyIsImdldF9saW1pdHMiLCJyZW1haW5kZXIiLCJzZXRNYXhXaXRoZHJhd0Ftb3VudCIsIm1pbl93aXRoZHJhd2FsIiwiaXNfbGltaXRfcmVhY2hlZCIsInNldDEwa0xpbWl0YXRpb24iLCJpc18xMGtfd2l0aGRyYXdhbF9saW1pdF9yZWFjaGVkIiwicmVtb3ZlT25JZnJhbWVMb2FkZWQiLCJlIiwib3JpZ2luIiwiaXNfbW9iaWxlIiwiaW5uZXJIZWlnaHQiLCJiaW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpZnJhbWVfdXJsIiwic2V0VmVyaWZpY2F0aW9uQ29kZSIsImhlaWdodCIsImlmcmFtZV9oZWlnaHQiLCJvbkNsaWNrQnV0dG9uIiwiaXNfc2hvd19mdWxsX3BhZ2UiLCJpc192ZXJpZmljYXRpb25fZXJyb3IiLCJlcnJvcl9vYmplY3QiLCJmaWVsZHMiLCJkZXRhaWxzIiwiaXNfYXNrX3VrX2Z1bmRzX3Byb3RlY3Rpb24iLCJpc19zZWxmX2V4Y2x1c2lvbl9tYXhfdHVybm92ZXJfc2V0IiwiY29uZmlnX25hbWUiLCJzZW5kIiwidWtnY19mdW5kc19wcm90ZWN0aW9uIiwidG5jX2FwcHJvdmFsIiwic2V0RXJyb3JDb25maWciLCJyZWxvYWQiLCJpc19zZXNzaW9uX3RpbWVfb3V0IiwiaXNfZW1haWxfc2VudCIsImlzX3Jlc2VuZF9jbGlja2VkIiwicmVzZW5kX3RpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXRWZXJpZmljYXRpb24iLCJlbWFpbCIsInNldFZlcmlmaWNhdGlvbkJ1dHRvbkNsaWNrZWQiLCJ3aXRoZHJhd2FsX3R5cGUiLCJ2ZXJpZnlFbWFpbCIsInJlc3BvbnNlX3ZlcmlmeV9lbWFpbCIsInJlc2V0UGF5bWVudEFnZW50Iiwic2V0VmVyaWZpY2F0aW9uRW1haWxTZW50Iiwic2V0VGltZW91dFZlcmlmaWNhdGlvbiIsInNldENvdW50RG93blJlc2VuZFZlcmlmaWNhdGlvbiIsInNldFZlcmlmaWNhdGlvblJlc2VuZFRpbWVvdXQiLCJyZXNlbmRfaW50ZXJ2YWwiLCJzZXRWZXJpZmljYXRpb25SZXNlbmRDbGlja2VkIiwiaXNfdGltZXJfdmlzaWJsZSIsInNldElzVGltZXJWaXNpYmxlIiwiZnJvbV9jdXJyZW5jeSIsImV4Y2hhbmdlX3JhdGVzIiwiYmFzZV9jdXJyZW5jeSIsInJhdGVzIiwib25Nb3VudFBheW1lbnRBZ2VudExpc3QiLCJwYXltZW50QWdlbnRMaXN0IiwiYWxsUGF5bWVudEFnZW50TGlzdCIsInBheW1lbnRBZ2VudERldGFpbHMiLCJwYXltZW50YWdlbnRfZGV0YWlscyIsImJhbmsiLCJzdXBwb3J0ZWRfYmFua19leGlzdHMiLCJzdXBwb3J0ZWRfYmFua3MiLCJzdXBwb3J0ZWRfYmFuayIsInBhX2xpc3QiLCJnZXRQYXltZW50QWdlbnRMaXN0IiwicGhvbmVzIiwicGhvbmVfbnVtYmVycyIsInRlbGVwaG9uZSIsInN1cHBvcnRlZF9wYXltZW50X21ldGhvZHMiLCJ1cmxzIiwic3VwcG9ydGVkX2JhbmtzX2FycmF5IiwicGF5bWVudF9tZXRob2QiLCJhZGRTdXBwb3J0ZWRCYW5rIiwic29ydFN1cHBvcnRlZEJhbmtzIiwiY2FzaGllcl9wYSIsInBhcnNlSW50Iiwic2VsZWN0ZWRfYmFuayIsIm9uTW91bnRQYXltZW50QWdlbnRXaXRoZHJhdyIsInNldElzV2l0aGRyYXciLCJzZXRJc1dpdGhkcmF3U3VjY2Vzc2Z1bCIsInNldFJlY2VpcHQiLCJhZGRQYXltZW50QWdlbnQiLCJpc193aXRoZHJhdyIsImlzX3RyeV93aXRoZHJhd19zdWNjZXNzZnVsIiwiaXNfd2l0aGRyYXdfc3VjY2Vzc2Z1bCIsInBheW1lbnRfYWdlbnRfbmFtZSIsImNvbmZpcm0iLCJhbW91bnRfdHJhbnNmZXJyZWQiLCJwYXltZW50X2FnZW50X2VtYWlsIiwicGF5bWVudF9hZ2VudF9pZCIsInBheW1lbnRfYWdlbnRfcGhvbmUiLCJwYXltZW50X2FnZW50X3VybCIsInJlY2VpcHQiLCJwYXltZW50YWdlbnRfbG9naW5pZCIsIm1heF93aXRoZHJhd2FsIiwicGhvbmUiLCJwYXltZW50QWdlbnRXaXRoZHJhdyIsInBheW1lbnRfYWdlbnRfd2l0aGRyYXciLCJwYXltZW50YWdlbnRfd2l0aGRyYXciLCJzZWxlY3RlZF9hZ2VudCIsImFnZW50Iiwic2V0Q29uZmlybWF0aW9uIiwic2V0SXNUcnlXaXRoZHJhd1N1Y2Nlc3NmdWwiLCJvbk1vdW50QWNjb3VudFRyYW5zZmVyIiwiaGFzX3VwZGF0ZWRfYWNjb3VudF9iYWxhbmNlIiwiaGFzX25vX2FjY291bnRzX2JhbGFuY2UiLCJhY3RpdmVfYWNjb3VudHMiLCJzZXRIYXNOb0FjY291bnRzQmFsYW5jZSIsImNhbkRvQWNjb3VudFRyYW5zZmVyIiwic2V0VHJhbnNmZXJGZWUiLCJzZXRNaW5pbXVtRmVlIiwic2V0VHJhbnNmZXJMaW1pdCIsImNmZF90cmFuc2Zlcl90b19sb2dpbl9pZCIsInJlbW92ZUl0ZW0iLCJvYmpfdmFsdWVzIiwic2V0U2VsZWN0ZWRUbyIsImNhbl90cmFuc2ZlciIsInNldEhhc05vQWNjb3VudCIsImhhc19ub19hY2NvdW50IiwidHJhbnNmZXJfZmVlIiwiTnVtYmVyIiwiZGVjaW1hbHMiLCJtaW5pbXVtX2ZlZSIsIk1hdGgiLCJwb3ciLCJpc19keHRyYWRlX3RyYW5zZmVyIiwibGltaXRzX2tleSIsInRyYW5zZmVyX2xpbWl0IiwiZGVjaW1hbF9wbGFjZXMiLCJyZXNwb25zZV9hY2NvdW50cyIsInRyYWRpbmdfcGxhdGZvcm1fYWNjb3VudHMiLCJkeHRyYWRlX2FjY291bnRzX2xpc3QiLCJmb3VuZF9hY2NvdW50IiwibG9naW4iLCJhY2NvdW50X2lkIiwiYV9pc19tdCIsImJfaXNfbXQiLCJhX2lzX2NyeXB0byIsImJfaXNfY3J5cHRvIiwiYV9pc19maWF0IiwiYl9pc19maWF0IiwibWFya2V0X3R5cGUiLCJhcnJfYWNjb3VudHMiLCJjZmRfcGxhdGZvcm1zIiwibXQ1IiwiZHh0cmFkZSIsImlzX2NmZCIsImNmZF90ZXh0X2Rpc3BsYXkiLCJjZmRfaWNvbl9kaXNwbGF5IiwicGxhdGZvcm0iLCJhY2NvdW50X3RleHRfZGlzcGxheSIsInRvVXBwZXJDYXNlIiwicGxhdGZvcm1faWNvbiIsInNldFNlbGVjdGVkRnJvbSIsInNldEFjY291bnRzIiwiaXNfdHJ5X3RyYW5zZmVyX3N1Y2Nlc3NmdWwiLCJpc190cmFuc2Zlcl9jb25maXJtIiwiYWNjb3VudF90cmFuc2Zlcl9hbW91bnQiLCJpc190cmFuc2Zlcl9zdWNjZXNzZnVsIiwiaXNfbXQ1X3RyYW5zZmVyX2luX3Byb2dyZXNzIiwib25DaGFuZ2VUcmFuc2ZlclRvIiwiZmlyc3Rfbm9uX2NmZCIsImZpcnN0X2ZpYXQiLCJvbk1vdW50UGF5bWVudEFnZW50VHJhbnNmZXIiLCJnZXRDdXJyZW50UGF5bWVudEFnZW50IiwiY3VycmVudF9wYXltZW50X2FnZW50Iiwic2V0TWluTWF4UGF5bWVudEFnZW50VHJhbnNmZXIiLCJyZXNwb25zZV9wYXltZW50X2FnZW50IiwicGF5bWVudF9hZ2VudF9saXN0ZWQiLCJnZXRQYXltZW50QWdlbnREZXRhaWxzIiwiZ2V0U2V0dGluZ3MiLCJnZXRfc2V0dGluZ3MiLCJzZXRJc1BheW1lbnRBZ2VudCIsImlzX2F1dGhlbnRpY2F0ZWRfcGF5bWVudF9hZ2VudCIsImNhc2hpZXJfcGFfdHJhbnNmZXIiLCJjbGllbnRfaWQiLCJjbGllbnRfbmFtZSIsImNvbnZlcnRlcl90b19hbW91bnQiLCJjb252ZXJ0ZXJfZnJvbV9lcnJvciIsImNvbnZlcnRlcl90b19lcnJvciIsInJlc2V0VGltZXIiLCJ2YWxpZGF0ZUZyb21BbW91bnQiLCJwZXJjZW50YWdlU2VsZWN0b3JTZWxlY3Rpb25TdGF0dXMiLCJjYWxjdWxhdGVQZXJjZW50YWdlIiwic2V0Q29udmVydGVyVG9FcnJvciIsImdldEV4Y2hhbmdlUmF0ZSIsInJhdGUiLCJ2YWxpZGF0ZVRvQW1vdW50IiwicmVzZXRDb252ZXJ0ZXIiLCJzZWxlY3RlZF9mcm9tX2N1cnJlbmN5Iiwic2VsZWN0ZWRfdG9fY3VycmVuY3kiLCJ2YWxpZGF0ZVRyYW5zZmVyRnJvbUFtb3VudCIsIm9uQ2hhbmdlQ29udmVydGVyRnJvbUFtb3VudCIsInZhbGlkYXRlV2l0aGRyYXdGcm9tQW1vdW50IiwiY3VycmVudF9maWF0X2N1cnJlbmN5IiwidmFsaWRhdGVUcmFuc2ZlclRvQW1vdW50IiwidmFsaWRhdGVXaXRoZHJhd1RvQW1vdW50Iiwid2Vic2l0ZV9zdGF0dXMiLCJtaW5fd2l0aGRyYXdfYW1vdW50IiwiY3J5cHRvX2NvbmZpZyIsIm1pbmltdW1fd2l0aGRyYXdhbCIsInRyYW5zZmVyX3RvIiwicGF5bWVudEFnZW50VHJhbnNmZXIiLCJwYXltZW50YWdlbnRfdHJhbnNmZXIiLCJzZXRDb25maXJtYXRpb25QYXltZW50QWdlbnRUcmFuc2ZlciIsImNsaWVudF90b19mdWxsX25hbWUiLCJzZXRJc1RyeVRyYW5zZmVyU3VjY2Vzc2Z1bCIsInJlc2V0UGF5bWVudEFnZW50VHJhbnNmZXIiLCJzZXRSZWNlaXB0UGF5bWVudEFnZW50VHJhbnNmZXIiLCJzZXRJc1RyYW5zZmVyU3VjY2Vzc2Z1bCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./Stores/Cashier/cashier-store.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/factoryWithThrowingShims.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = __webpack_require__(\\\"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\\");\\n\\nfunction emptyFunction() {}\\nfunction emptyFunctionWithReset() {}\\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\\n\\nmodule.exports = function() {\\n  function shim(props, propName, componentName, location, propFullName, secret) {\\n    if (secret === ReactPropTypesSecret) {\\n      // It is still safe when called from React.\\n      return;\\n    }\\n    var err = new Error(\\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\\n      'Use PropTypes.checkPropTypes() to call them. ' +\\n      'Read more at http://fb.me/use-check-prop-types'\\n    );\\n    err.name = 'Invariant Violation';\\n    throw err;\\n  };\\n  shim.isRequired = shim;\\n  function getShim() {\\n    return shim;\\n  };\\n  // Important!\\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\\n  var ReactPropTypes = {\\n    array: shim,\\n    bool: shim,\\n    func: shim,\\n    number: shim,\\n    object: shim,\\n    string: shim,\\n    symbol: shim,\\n\\n    any: shim,\\n    arrayOf: getShim,\\n    element: shim,\\n    elementType: shim,\\n    instanceOf: getShim,\\n    node: shim,\\n    objectOf: getShim,\\n    oneOf: getShim,\\n    oneOfType: getShim,\\n    shape: getShim,\\n    exact: getShim,\\n\\n    checkPropTypes: emptyFunctionWithReset,\\n    resetWarningCache: emptyFunction\\n  };\\n\\n  ReactPropTypes.PropTypes = ReactPropTypes;\\n\\n  return ReactPropTypes;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzP2RjMDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/factoryWithThrowingShims.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nif (false) { var throwOnDirectAccess, ReactIs; } else {\\n  // By explicitly using `prop-types` you are opting into new production behavior.\\n  // http://fb.me/prop-types-in-prod\\n  module.exports = __webpack_require__(\\\"../../../node_modules/prop-types/factoryWithThrowingShims.js\\\")();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanM/NzBkNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\\n\\nmodule.exports = ReactPropTypesSecret;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jYXNoaWVyLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz9hZDgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"mobx\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_567938__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_567938__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_567938__.m = __webpack_modules__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_567938__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_567938__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/create fake namespace object */\n/******/ \t(() => {\n/******/ \t\tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\n/******/ \t\tvar leafPrototypes;\n/******/ \t\t// create a fake namespace object\n/******/ \t\t// mode & 1: value is a module id, require it\n/******/ \t\t// mode & 2: merge all properties of value into the ns\n/******/ \t\t// mode & 4: return value when already ns object\n/******/ \t\t// mode & 16: return value when it's Promise-like\n/******/ \t\t// mode & 8|1: behave like require\n/******/ \t\t__nested_webpack_require_567938__.t = function(value, mode) {\n/******/ \t\t\tif(mode & 1) value = this(value);\n/******/ \t\t\tif(mode & 8) return value;\n/******/ \t\t\tif(typeof value === 'object' && value) {\n/******/ \t\t\t\tif((mode & 4) && value.__esModule) return value;\n/******/ \t\t\t\tif((mode & 16) && typeof value.then === 'function') return value;\n/******/ \t\t\t}\n/******/ \t\t\tvar ns = Object.create(null);\n/******/ \t\t\t__nested_webpack_require_567938__.r(ns);\n/******/ \t\t\tvar def = {};\n/******/ \t\t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n/******/ \t\t\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n/******/ \t\t\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n/******/ \t\t\t}\n/******/ \t\t\tdef['default'] = () => (value);\n/******/ \t\t\t__nested_webpack_require_567938__.d(ns, def);\n/******/ \t\t\treturn ns;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_567938__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_567938__.o(definition, key) && !__nested_webpack_require_567938__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_567938__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__nested_webpack_require_567938__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__nested_webpack_require_567938__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__nested_webpack_require_567938__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__nested_webpack_require_567938__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"cashier/js/cashier.\" + chunkId + \".\" + \"a007a79dd7345a890a13\" + \".js\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__nested_webpack_require_567938__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn undefined;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_567938__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = \"@deriv/cashier:\";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__nested_webpack_require_567938__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement('script');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_567938__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __nested_webpack_require_567938__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n/******/ \t\t\t\tscript.src = url;\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\t;\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_567938__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_567938__.p = \"/\";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = {\n/******/ \t\t\t\"cashier-store\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_567938__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __nested_webpack_require_567938__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(true) { // all chunks have JS\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __nested_webpack_require_567938__.p + __nested_webpack_require_567938__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__nested_webpack_require_567938__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__nested_webpack_require_567938__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t} else {}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no prefetching\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\t// no HMR\n/******/ \t\t\n/******/ \t\t// no HMR manifest\n/******/ \t\t\n/******/ \t\t// no on chunks loaded\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add \"moreModules\" to the modules object,\n/******/ \t\t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0;\n/******/ \t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\tif(__nested_webpack_require_567938__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t__nested_webpack_require_567938__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(runtime) var result = runtime(__nested_webpack_require_567938__);\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__nested_webpack_require_567938__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tinstalledChunks[chunkId][0]();\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkIds[i]] = 0;\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cashier\"] = self[\"webpackChunk_deriv_cashier\"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_567938__(\"./Stores/Cashier/cashier-store.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../cashier/dist/cashier/js/cashier-store.js\n");

/***/ })

}]);